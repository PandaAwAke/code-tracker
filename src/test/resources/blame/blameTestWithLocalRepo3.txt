0fd69594a src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-06-22 13:24:24 +0000 1)   ////////////////////////////////////////////////////////////////////////////////
0fd69594a src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-06-22 13:24:24 +0000 2)   // checkstyle: Checks Java source code for adherence to a set of rules.
dabb75d43 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Roman Ivanov        2018-01-02 21:24:25 +0000 3)   // Copyright (C) 2001-2018 the original author or authors.
0fd69594a src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-06-22 13:24:24 +0000 4)   //
b779f3c1d src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2002-02-04 12:44:04 +0000 5)   // This library is free software; you can redistribute it and/or
b779f3c1d src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2002-02-04 12:44:04 +0000 6)   // modify it under the terms of the GNU Lesser General Public
b779f3c1d src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2002-02-04 12:44:04 +0000 7)   // License as published by the Free Software Foundation; either
b779f3c1d src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2002-02-04 12:44:04 +0000 8)   // version 2.1 of the License, or (at your option) any later version.
0fd69594a src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-06-22 13:24:24 +0000 9)   //
b779f3c1d src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2002-02-04 12:44:04 +0000 10)  // This library is distributed in the hope that it will be useful,
0fd69594a src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-06-22 13:24:24 +0000 11)  // but WITHOUT ANY WARRANTY; without even the implied warranty of
b779f3c1d src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2002-02-04 12:44:04 +0000 12)  // MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
b779f3c1d src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2002-02-04 12:44:04 +0000 13)  // Lesser General Public License for more details.
0fd69594a src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-06-22 13:24:24 +0000 14)  //
b779f3c1d src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2002-02-04 12:44:04 +0000 15)  // You should have received a copy of the GNU Lesser General Public
b779f3c1d src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2002-02-04 12:44:04 +0000 16)  // License along with this library; if not, write to the Free Software
b779f3c1d src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2002-02-04 12:44:04 +0000 17)  // Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
0fd69594a src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-06-22 13:24:24 +0000 18)  ////////////////////////////////////////////////////////////////////////////////
                                                                                                                     19)
0fd69594a src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-06-22 13:24:24 +0000 20)  package com.puppycrawl.tools.checkstyle;
                                                                                                                     21)
6c304950f src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-05 14:12:57 +0000 22)  import java.io.File;
13b7c6343 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 09:37:27 +0000 23)  import java.io.IOException;
a43191d49 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2017-05-26 14:11:30 +0000 24)  import java.io.PrintWriter;
a43191d49 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2017-05-26 14:11:30 +0000 25)  import java.io.StringWriter;
2e4762f17 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 10:19:43 +0000 26)  import java.io.UnsupportedEncodingException;
2e4762f17 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 10:19:43 +0000 27)  import java.nio.charset.Charset;
b16aef991 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Artem Dudkin        2017-10-18 14:19:42 +0000 28)  import java.nio.charset.StandardCharsets;
fbf3f95c2 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-09-21 02:52:06 +0000 29)  import java.util.ArrayList;
fbf3f95c2 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-09-21 02:52:06 +0000 30)  import java.util.HashSet;
f1afaf83f src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2007-12-15 08:14:40 +0000 31)  import java.util.List;
20483ae03 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2002-08-11 10:01:01 +0000 32)  import java.util.Locale;
fe9057366 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-04-08 01:35:17 +0000 33)  import java.util.Set;
1d614c3a7 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Ivan Sopov          2013-12-05 17:12:51 +0000 34)  import java.util.SortedSet;
fbf3f95c2 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-09-21 02:52:06 +0000 35)  import java.util.TreeSet;
                                                                                                                     36)
ee518dfe8 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-04-13 21:43:00 +0000 37)  import org.apache.commons.logging.Log;
ee518dfe8 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-04-13 21:43:00 +0000 38)  import org.apache.commons.logging.LogFactory;
                                                                                                                     39)
7dd1ab24d src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-05-26 21:52:10 +0000 40)  import com.puppycrawl.tools.checkstyle.api.AuditEvent;
7dd1ab24d src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-05-26 21:52:10 +0000 41)  import com.puppycrawl.tools.checkstyle.api.AuditListener;
6ffc8dd26 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-30 18:29:44 +0000 42)  import com.puppycrawl.tools.checkstyle.api.AutomaticBean;
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 43)  import com.puppycrawl.tools.checkstyle.api.BeforeExecutionFileFilter;
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 44)  import com.puppycrawl.tools.checkstyle.api.BeforeExecutionFileFilterSet;
085befb3a src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2002-11-30 16:58:59 +0000 45)  import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
6ffc8dd26 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-30 18:29:44 +0000 46)  import com.puppycrawl.tools.checkstyle.api.Configuration;
08d6efe49 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-12-10 19:13:35 +0000 47)  import com.puppycrawl.tools.checkstyle.api.Context;
ecbeaa6e1 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-05-16 20:53:12 +0000 48)  import com.puppycrawl.tools.checkstyle.api.ExternalResourceHolder;
abff1a248 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-19 20:21:46 +0000 49)  import com.puppycrawl.tools.checkstyle.api.FileSetCheck;
3cd664694 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2010-06-28 13:02:13 +0000 50)  import com.puppycrawl.tools.checkstyle.api.FileText;
c3baa3fa7 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 18:35:17 +0000 51)  import com.puppycrawl.tools.checkstyle.api.Filter;
1e7d8eef0 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-15 20:18:02 +0000 52)  import com.puppycrawl.tools.checkstyle.api.FilterSet;
672b27dd5 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2002-09-17 12:33:30 +0000 53)  import com.puppycrawl.tools.checkstyle.api.LocalizedMessage;
54a09706e src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-19 19:17:25 +0000 54)  import com.puppycrawl.tools.checkstyle.api.MessageDispatcher;
8c8fee743 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-11-09 05:30:14 +0000 55)  import com.puppycrawl.tools.checkstyle.api.RootModule;
085edafb3 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2003-03-23 08:29:12 +0000 56)  import com.puppycrawl.tools.checkstyle.api.SeverityLevel;
c1a79b112 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2004-04-12 10:54:27 +0000 57)  import com.puppycrawl.tools.checkstyle.api.SeverityLevelCounter;
cdf3e56ba src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Ilja Dubinin        2015-08-27 12:17:01 +0000 58)  import com.puppycrawl.tools.checkstyle.utils.CommonUtils;
                                                                                                                     59)
0fd69594a src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-06-22 13:24:24 +0000 60)  /**
c61745793 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-02-05 20:22:02 +0000 61)   * This class provides the functionality to check a set of files.
768256c32 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2003-06-27 11:04:38 +0000 62)   * @author Oliver Burn
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 63)   * @author <a href="mailto:stephane.bailliez@wanadoo.fr">Stephane Bailliez</a>
54a09706e src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-19 19:17:25 +0000 64)   * @author lkuehne
ecbeaa6e1 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-05-16 20:53:12 +0000 65)   * @author Andrei Selkin
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 66)   */
8c8fee743 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-11-09 05:30:14 +0000 67)  public class Checker extends AutomaticBean implements MessageDispatcher, RootModule {
                                                                                                                     68)
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 69)      /** Message to use when an exception occurs and should be printed as a violation. */
7caba87cc src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Luolc               2017-03-13 03:17:06 +0000 70)      public static final String EXCEPTION_MSG = "general.exception";
                                                                                                                     71)
5ca966795 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 17:02:55 +0000 72)      /** Logger for Checker. */
127f72994 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (crude               2017-10-20 17:46:57 +0000 73)      private final Log log;
                                                                                                                     74)
5ca966795 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 17:02:55 +0000 75)      /** Maintains error count. */
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 76)      private final SeverityLevelCounter counter = new SeverityLevelCounter(
13b7c6343 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 09:37:27 +0000 77)              SeverityLevel.ERROR);
                                                                                                                     78)
5ca966795 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 17:02:55 +0000 79)      /** Vector of listeners. */
fbf3f95c2 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-09-21 02:52:06 +0000 80)      private final List<AuditListener> listeners = new ArrayList<>();
                                                                                                                     81)
5ca966795 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 17:02:55 +0000 82)      /** Vector of fileset checks. */
fbf3f95c2 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-09-21 02:52:06 +0000 83)      private final List<FileSetCheck> fileSetChecks = new ArrayList<>();
                                                                                                                     84)
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 85)      /** The audit event before execution file filters. */
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 86)      private final BeforeExecutionFileFilterSet beforeExecutionFileFilters =
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 87)              new BeforeExecutionFileFilterSet();
                                                                                                                     88)
5ca966795 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 17:02:55 +0000 89)      /** The audit event filters. */
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 90)      private final FilterSet filters = new FilterSet();
                                                                                                                     91)
54ccca186 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-18 08:25:29 +0000 92)      /** Class loader to resolve classes with. **/
3bd699bd5 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Ruslan Diachenko    2015-08-12 05:19:21 +0000 93)      private ClassLoader classLoader = Thread.currentThread()
13b7c6343 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 09:37:27 +0000 94)              .getContextClassLoader();
                                                                                                                     95)
2b4a02d2c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-09-04 01:06:15 +0000 96)      /** The basedir to strip off in file names. */
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 97)      private String basedir;
                                                                                                                     98)
5ca966795 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 17:02:55 +0000 99)      /** Locale country to report messages . **/
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 100)     private String localeCountry = Locale.getDefault().getCountry();
5ca966795 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 17:02:55 +0000 101)     /** Locale language to report messages . **/
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 102)     private String localeLanguage = Locale.getDefault().getLanguage();
                                                                                                                     103)
5ca966795 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 17:02:55 +0000 104)     /** The factory for instantiating submodules. */
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 105)     private ModuleFactory moduleFactory;
                                                                                                                     106)
fe9057366 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-04-08 01:35:17 +0000 107)     /** The classloader used for loading Checkstyle module classes. */
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 108)     private ClassLoader moduleClassLoader;
                                                                                                                     109)
5ca966795 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 17:02:55 +0000 110)     /** The context of all child components. */
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 111)     private Context childContext;
                                                                                                                     112)
5ca966795 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 17:02:55 +0000 113)     /** The file extensions that are accepted. */
167dd96d8 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Rasmus Kaj          2016-03-17 13:39:55 +0000 114)     private String[] fileExtensions = CommonUtils.EMPTY_STRING_ARRAY;
                                                                                                                     115)
d216ec752 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2003-03-26 19:52:30 +0000 116)     /**
d216ec752 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2003-03-26 19:52:30 +0000 117)      * The severity level of any violations found by submodules.
d216ec752 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2003-03-26 19:52:30 +0000 118)      * The value of this property is passed to submodules via
d216ec752 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2003-03-26 19:52:30 +0000 119)      * contextualize().
d216ec752 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2003-03-26 19:52:30 +0000 120)      *
c899af31c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Ruslan Diachenko    2015-08-31 18:51:27 +0000 121)      * <p>Note: Since the Checker is merely a container for modules
d216ec752 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2003-03-26 19:52:30 +0000 122)      * it does not make sense to implement logging functionality
d216ec752 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2003-03-26 19:52:30 +0000 123)      * here. Consequently Checker does not extend AbstractViolationReporter,
d216ec752 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2003-03-26 19:52:30 +0000 124)      * leading to a bit of duplicated code for severity level setting.
d216ec752 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2003-03-26 19:52:30 +0000 125)      */
327c0bc84 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2018-01-04 01:30:24 +0000 126)     private SeverityLevel severity = SeverityLevel.ERROR;
                                                                                                                     127)
5ca966795 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 17:02:55 +0000 128)     /** Name of a charset. */
b16aef991 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Artem Dudkin        2017-10-18 14:19:42 +0000 129)     private String charset = System.getProperty("file.encoding", StandardCharsets.UTF_8.name());
                                                                                                                     130)
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 131)     /** Cache file. **/
327c0bc84 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2018-01-04 01:30:24 +0000 132)     private PropertyCacheFile cacheFile;
                                                                                                                     133)
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 134)     /** Controls whether exceptions should halt execution or not. */
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 135)     private boolean haltOnException = true;
                                                                                                                     136)
3c0608f33 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2002-11-15 18:18:52 +0000 137)     /**
1935bed57 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-11 12:18:59 +0000 138)      * Creates a new {@code Checker} instance.
6ffc8dd26 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-30 18:29:44 +0000 139)      * The instance needs to be contextualized and configured.
3c0608f33 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2002-11-15 18:18:52 +0000 140)      */
f7f377f50 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-08-09 02:28:36 +0000 141)     public Checker() {
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 142)         addListener(counter);
127f72994 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (crude               2017-10-20 17:46:57 +0000 143)         log = LogFactory.getLog(Checker.class);
3c0608f33 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2002-11-15 18:18:52 +0000 144)     }
                                                                                                                     145)
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 146)     /**
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 147)      * Sets cache file.
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 148)      * @param fileName the cache file.
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 149)      * @throws IOException if there are some problems with file loading.
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 150)      */
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 151)     public void setCacheFile(String fileName) throws IOException {
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 152)         final Configuration configuration = getConfiguration();
327c0bc84 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2018-01-04 01:30:24 +0000 153)         cacheFile = new PropertyCacheFile(configuration, fileName);
327c0bc84 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2018-01-04 01:30:24 +0000 154)         cacheFile.load();
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 155)     }
                                                                                                                     156)
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 157)     /**
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 158)      * Removes before execution file filter.
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 159)      * @param filter before execution file filter to remove.
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 160)      */
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 161)     public void removeBeforeExecutionFileFilter(BeforeExecutionFileFilter filter) {
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 162)         beforeExecutionFileFilters.removeBeforeExecutionFileFilter(filter);
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 163)     }
                                                                                                                     164)
778e84408 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oleg Sukhodolsky    2003-11-05 04:26:12 +0000 165)     /**
778e84408 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oleg Sukhodolsky    2003-11-05 04:26:12 +0000 166)      * Removes filter.
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 167)      * @param filter filter to remove.
778e84408 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oleg Sukhodolsky    2003-11-05 04:26:12 +0000 168)      */
0f58857d7 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-05-17 11:47:09 +0000 169)     public void removeFilter(Filter filter) {
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 170)         filters.removeFilter(filter);
778e84408 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oleg Sukhodolsky    2003-11-05 04:26:12 +0000 171)     }
                                                                                                                     172)
8c8fee743 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-11-09 05:30:14 +0000 173)     @Override
0f58857d7 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-05-17 11:47:09 +0000 174)     public void destroy() {
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 175)         listeners.clear();
8ca6e3a6f src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2017-11-18 01:46:16 +0000 176)         fileSetChecks.clear();
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 177)         beforeExecutionFileFilters.clear();
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 178)         filters.clear();
327c0bc84 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2018-01-04 01:30:24 +0000 179)         if (cacheFile != null) {
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 180)             try {
327c0bc84 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2018-01-04 01:30:24 +0000 181)                 cacheFile.persist();
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 182)             }
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 183)             catch (IOException ex) {
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 184)                 throw new IllegalStateException("Unable to persist cache file.", ex);
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 185)             }
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 186)         }
6c304950f src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-05 14:12:57 +0000 187)     }
                                                                                                                     188)
778e84408 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oleg Sukhodolsky    2003-11-05 04:26:12 +0000 189)     /**
778e84408 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oleg Sukhodolsky    2003-11-05 04:26:12 +0000 190)      * Removes a given listener.
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 191)      * @param listener a listener to remove
778e84408 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oleg Sukhodolsky    2003-11-05 04:26:12 +0000 192)      */
0f58857d7 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-05-17 11:47:09 +0000 193)     public void removeListener(AuditListener listener) {
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 194)         listeners.remove(listener);
778e84408 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oleg Sukhodolsky    2003-11-05 04:26:12 +0000 195)     }
                                                                                                                     196)
cf85a72f3 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 15:49:51 +0000 197)     /**
49a0ee817 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 19:58:35 +0000 198)      * Sets base directory.
2b4a02d2c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-09-04 01:06:15 +0000 199)      * @param basedir the base directory to strip off in file names
cf85a72f3 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 15:49:51 +0000 200)      */
0f58857d7 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-05-17 11:47:09 +0000 201)     public void setBasedir(String basedir) {
3a20dbe8e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-03-31 18:25:03 +0000 202)         this.basedir = basedir;
6ffc8dd26 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-30 18:29:44 +0000 203)     }
                                                                                                                     204)
8c8fee743 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-11-09 05:30:14 +0000 205)     @Override
5922d5a67 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Ruslan Diachenko    2015-08-31 05:06:24 +0000 206)     public int process(List<File> files) throws CheckstyleException {
327c0bc84 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2018-01-04 01:30:24 +0000 207)         if (cacheFile != null) {
327c0bc84 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2018-01-04 01:30:24 +0000 208)             cacheFile.putExternalResources(getExternalResourceLocations());
ecbeaa6e1 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-05-16 20:53:12 +0000 209)         }
                                                                                                                     210)
13b7c6343 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 09:37:27 +0000 211)         // Prepare to start
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 212)         fireAuditStarted();
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 213)         for (final FileSetCheck fsc : fileSetChecks) {
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 214)             fsc.beginProcessing(charset);
13b7c6343 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 09:37:27 +0000 215)         }
                                                                                                                     216)
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 217)         processFiles(files);
                                                                                                                     218)
13b7c6343 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 09:37:27 +0000 219)         // Finish up
d347f5575 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (ychulovskyy         2015-03-19 05:30:23 +0000 220)         // It may also log!!!
de022d243 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Mariia Mykhailova   2016-09-08 12:30:40 +0000 221)         fileSetChecks.forEach(FileSetCheck::finishProcessing);
                                                                                                                     222)
d347f5575 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (ychulovskyy         2015-03-19 05:30:23 +0000 223)         // It may also log!!!
de022d243 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Mariia Mykhailova   2016-09-08 12:30:40 +0000 224)         fileSetChecks.forEach(FileSetCheck::destroy);
                                                                                                                     225)
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 226)         final int errorCount = counter.getCount();
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 227)         fireAuditFinished();
54a09706e src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-19 19:17:25 +0000 228)         return errorCount;
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 229)     }
                                                                                                                     230)
ecbeaa6e1 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-05-16 20:53:12 +0000 231)     /**
ecbeaa6e1 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-05-16 20:53:12 +0000 232)      * Returns a set of external configuration resource locations which are used by all file set
ecbeaa6e1 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-05-16 20:53:12 +0000 233)      * checks and filters.
ecbeaa6e1 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-05-16 20:53:12 +0000 234)      * @return a set of external configuration resource locations which are used by all file set
ecbeaa6e1 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-05-16 20:53:12 +0000 235)      *         checks and filters.
ecbeaa6e1 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-05-16 20:53:12 +0000 236)      */
ecbeaa6e1 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-05-16 20:53:12 +0000 237)     private Set<String> getExternalResourceLocations() {
fbf3f95c2 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-09-21 02:52:06 +0000 238)         final Set<String> externalResources = new HashSet<>();
de022d243 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Mariia Mykhailova   2016-09-08 12:30:40 +0000 239)         fileSetChecks.stream().filter(check -> check instanceof ExternalResourceHolder)
de022d243 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Mariia Mykhailova   2016-09-08 12:30:40 +0000 240)             .forEach(check -> {
ecbeaa6e1 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-05-16 20:53:12 +0000 241)                 final Set<String> locations =
ecbeaa6e1 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-05-16 20:53:12 +0000 242)                     ((ExternalResourceHolder) check).getExternalResourceLocations();
ecbeaa6e1 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-05-16 20:53:12 +0000 243)                 externalResources.addAll(locations);
de022d243 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Mariia Mykhailova   2016-09-08 12:30:40 +0000 244)             });
de022d243 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Mariia Mykhailova   2016-09-08 12:30:40 +0000 245)         filters.getFilters().stream().filter(filter -> filter instanceof ExternalResourceHolder)
de022d243 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Mariia Mykhailova   2016-09-08 12:30:40 +0000 246)             .forEach(filter -> {
ecbeaa6e1 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-05-16 20:53:12 +0000 247)                 final Set<String> locations =
ecbeaa6e1 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-05-16 20:53:12 +0000 248)                     ((ExternalResourceHolder) filter).getExternalResourceLocations();
ecbeaa6e1 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-05-16 20:53:12 +0000 249)                 externalResources.addAll(locations);
de022d243 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Mariia Mykhailova   2016-09-08 12:30:40 +0000 250)             });
ecbeaa6e1 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-05-16 20:53:12 +0000 251)         return externalResources;
ecbeaa6e1 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-05-16 20:53:12 +0000 252)     }
                                                                                                                     253)
5ca966795 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 17:02:55 +0000 254)     /** Notify all listeners about the audit start. */
8ad9441bb src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Vladislav Lisetskiy 2016-02-20 20:25:24 +0000 255)     private void fireAuditStarted() {
ce196814d src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-10-16 23:35:09 +0000 256)         final AuditEvent event = new AuditEvent(this);
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 257)         for (final AuditListener listener : listeners) {
ce196814d src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-10-16 23:35:09 +0000 258)             listener.auditStarted(event);
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 259)         }
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 260)     }
                                                                                                                     261)
5ca966795 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 17:02:55 +0000 262)     /** Notify all listeners about the audit end. */
8ad9441bb src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Vladislav Lisetskiy 2016-02-20 20:25:24 +0000 263)     private void fireAuditFinished() {
ce196814d src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-10-16 23:35:09 +0000 264)         final AuditEvent event = new AuditEvent(this);
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 265)         for (final AuditListener listener : listeners) {
ce196814d src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-10-16 23:35:09 +0000 266)             listener.auditFinished(event);
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 267)         }
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 268)     }
                                                                                                                     269)
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 270)     /**
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 271)      * Processes a list of files with all FileSetChecks.
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 272)      * @param files a list of files to process.
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 273)      * @throws CheckstyleException if error condition within Checkstyle occurs.
77acd41cf src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-16 19:22:01 +0000 274)      * @noinspection ProhibitedExceptionThrown
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 275)      */
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 276)     private void processFiles(List<File> files) throws CheckstyleException {
f1e80e4ec src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-08-08 04:38:41 +0000 277)         for (final File file : files) {
f020066f8 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Roman Ivanov        2015-11-01 13:52:32 +0000 278)             try {
f1e80e4ec src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-08-08 04:38:41 +0000 279)                 final String fileName = file.getAbsolutePath();
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 280)                 final long timestamp = file.lastModified();
327c0bc84 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2018-01-04 01:30:24 +0000 281)                 if (cacheFile != null && cacheFile.isInCache(fileName, timestamp)
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 282)                         || !CommonUtils.matchesFileExtension(file, fileExtensions)
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 283)                         || !acceptFileStarted(fileName)) {
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 284)                     continue;
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 285)                 }
327c0bc84 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2018-01-04 01:30:24 +0000 286)                 if (cacheFile != null) {
327c0bc84 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2018-01-04 01:30:24 +0000 287)                     cacheFile.put(fileName, timestamp);
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 288)                 }
13b7c6343 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 09:37:27 +0000 289)                 fireFileStarted(fileName);
77acd41cf src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-16 19:22:01 +0000 290)                 final SortedSet<LocalizedMessage> fileMessages = processFile(file);
13b7c6343 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 09:37:27 +0000 291)                 fireErrors(fileName, fileMessages);
13b7c6343 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 09:37:27 +0000 292)                 fireFileFinished(fileName);
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 293)             }
25a37e504 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-09-14 20:58:34 +0000 294)             // -@cs[IllegalCatch] There is no other way to deliver filename that was under
25a37e504 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-09-14 20:58:34 +0000 295)             // processing. See https://github.com/checkstyle/checkstyle/issues/2285
f020066f8 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Roman Ivanov        2015-11-01 13:52:32 +0000 296)             catch (Exception ex) {
77acd41cf src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-16 19:22:01 +0000 297)                 // We need to catch all exceptions to put a reason failure (file name) in exception
f020066f8 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Roman Ivanov        2015-11-01 13:52:32 +0000 298)                 throw new CheckstyleException("Exception was thrown while processing "
f020066f8 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Roman Ivanov        2015-11-01 13:52:32 +0000 299)                         + file.getPath(), ex);
f020066f8 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Roman Ivanov        2015-11-01 13:52:32 +0000 300)             }
77acd41cf src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-16 19:22:01 +0000 301)             catch (Error error) {
77acd41cf src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-16 19:22:01 +0000 302)                 // We need to catch all errors to put a reason failure (file name) in error
77acd41cf src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-16 19:22:01 +0000 303)                 throw new Error("Error was thrown while processing " + file.getPath(), error);
77acd41cf src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-16 19:22:01 +0000 304)             }
13b7c6343 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 09:37:27 +0000 305)         }
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 306)     }
                                                                                                                     307)
77acd41cf src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-16 19:22:01 +0000 308)     /**
77acd41cf src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-16 19:22:01 +0000 309)      * Processes a file with all FileSetChecks.
77acd41cf src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-16 19:22:01 +0000 310)      * @param file a file to process.
77acd41cf src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-16 19:22:01 +0000 311)      * @return a sorted set of messages to be logged.
77acd41cf src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-16 19:22:01 +0000 312)      * @throws CheckstyleException if error condition within Checkstyle occurs.
ec2834e43 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Roman Ivanov        2016-12-09 22:01:23 +0000 313)      * @noinspection ProhibitedExceptionThrown
77acd41cf src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-16 19:22:01 +0000 314)      */
77acd41cf src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-16 19:22:01 +0000 315)     private SortedSet<LocalizedMessage> processFile(File file) throws CheckstyleException {
fbf3f95c2 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-09-21 02:52:06 +0000 316)         final SortedSet<LocalizedMessage> fileMessages = new TreeSet<>();
13b7c6343 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 09:37:27 +0000 317)         try {
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 318)             final FileText theText = new FileText(file.getAbsoluteFile(), charset);
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 319)             for (final FileSetCheck fsc : fileSetChecks) {
f1e80e4ec src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-08-08 04:38:41 +0000 320)                 fileMessages.addAll(fsc.process(file, theText));
13b7c6343 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 09:37:27 +0000 321)             }
13b7c6343 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 09:37:27 +0000 322)         }
13b7c6343 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 09:37:27 +0000 323)         catch (final IOException ioe) {
127f72994 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (crude               2017-10-20 17:46:57 +0000 324)             log.debug("IOException occurred.", ioe);
13b7c6343 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 09:37:27 +0000 325)             fileMessages.add(new LocalizedMessage(0,
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 326)                     Definitions.CHECKSTYLE_BUNDLE, EXCEPTION_MSG,
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 327)                     new String[] {ioe.getMessage()}, null, getClass(), null));
13b7c6343 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 09:37:27 +0000 328)         }
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 329)         // -@cs[IllegalCatch] There is no other way to obey haltOnException field
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 330)         catch (Exception ex) {
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 331)             if (haltOnException) {
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 332)                 throw ex;
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 333)             }
                                                                                                                     334)
127f72994 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (crude               2017-10-20 17:46:57 +0000 335)             log.debug("Exception occurred.", ex);
                                                                                                                     336)
a43191d49 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2017-05-26 14:11:30 +0000 337)             final StringWriter sw = new StringWriter();
a43191d49 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2017-05-26 14:11:30 +0000 338)             final PrintWriter pw = new PrintWriter(sw, true);
                                                                                                                     339)
a43191d49 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2017-05-26 14:11:30 +0000 340)             ex.printStackTrace(pw);
                                                                                                                     341)
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 342)             fileMessages.add(new LocalizedMessage(0,
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 343)                     Definitions.CHECKSTYLE_BUNDLE, EXCEPTION_MSG,
a43191d49 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2017-05-26 14:11:30 +0000 344)                     new String[] {sw.getBuffer().toString()},
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 345)                     null, getClass(), null));
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 346)         }
77acd41cf src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-16 19:22:01 +0000 347)         return fileMessages;
77acd41cf src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-16 19:22:01 +0000 348)     }
                                                                                                                     349)
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 350)     /**
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 351)      * Check if all before execution file filters accept starting the file.
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 352)      *
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 353)      * @param fileName
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 354)      *            the file to be audited
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 355)      * @return {@code true} if the file is accepted.
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 356)      */
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 357)     private boolean acceptFileStarted(String fileName) {
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 358)         final String stripped = CommonUtils.relativizeAndNormalizePath(basedir, fileName);
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 359)         return beforeExecutionFileFilters.accept(stripped);
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 360)     }
                                                                                                                     361)
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 362)     /**
51dae59b8 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2003-07-14 12:31:52 +0000 363)      * Notify all listeners about the beginning of a file audit.
06b377b34 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2004-12-07 11:49:26 +0000 364)      *
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 365)      * @param fileName
06b377b34 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2004-12-07 11:49:26 +0000 366)      *            the file to be audited
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 367)      */
7aa061665 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2014-12-15 06:33:24 +0000 368)     @Override
0f58857d7 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-05-17 11:47:09 +0000 369)     public void fireFileStarted(String fileName) {
cdf3e56ba src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Ilja Dubinin        2015-08-27 12:17:01 +0000 370)         final String stripped = CommonUtils.relativizeAndNormalizePath(basedir, fileName);
ce196814d src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-10-16 23:35:09 +0000 371)         final AuditEvent event = new AuditEvent(this, stripped);
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 372)         for (final AuditListener listener : listeners) {
ce196814d src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-10-16 23:35:09 +0000 373)             listener.fileStarted(event);
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 374)         }
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 375)     }
                                                                                                                     376)
0fd69594a src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-06-22 13:24:24 +0000 377)     /**
efa16e17b src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-20 03:21:51 +0000 378)      * Notify all listeners about the errors in a file.
06b377b34 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2004-12-07 11:49:26 +0000 379)      *
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 380)      * @param fileName the audited file
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 381)      * @param errors the audit errors from the file
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 382)      */
7aa061665 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2014-12-15 06:33:24 +0000 383)     @Override
0f58857d7 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-05-17 11:47:09 +0000 384)     public void fireErrors(String fileName, SortedSet<LocalizedMessage> errors) {
cdf3e56ba src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Ilja Dubinin        2015-08-27 12:17:01 +0000 385)         final String stripped = CommonUtils.relativizeAndNormalizePath(basedir, fileName);
56cc11416 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-11-10 19:59:54 +0000 386)         boolean hasNonFilteredViolations = false;
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 387)         for (final LocalizedMessage element : errors) {
ce196814d src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-10-16 23:35:09 +0000 388)             final AuditEvent event = new AuditEvent(this, stripped, element);
ce196814d src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-10-16 23:35:09 +0000 389)             if (filters.accept(event)) {
56cc11416 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-11-10 19:59:54 +0000 390)                 hasNonFilteredViolations = true;
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 391)                 for (final AuditListener listener : listeners) {
ce196814d src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-10-16 23:35:09 +0000 392)                     listener.addError(event);
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 393)                 }
c3baa3fa7 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 18:35:17 +0000 394)             }
0fd69594a src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-06-22 13:24:24 +0000 395)         }
327c0bc84 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2018-01-04 01:30:24 +0000 396)         if (hasNonFilteredViolations && cacheFile != null) {
327c0bc84 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2018-01-04 01:30:24 +0000 397)             cacheFile.remove(fileName);
56cc11416 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-11-10 19:59:54 +0000 398)         }
0fd69594a src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-06-22 13:24:24 +0000 399)     }
                                                                                                                     400)
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 401)     /**
51dae59b8 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2003-07-14 12:31:52 +0000 402)      * Notify all listeners about the end of a file audit.
06b377b34 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2004-12-07 11:49:26 +0000 403)      *
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 404)      * @param fileName
06b377b34 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2004-12-07 11:49:26 +0000 405)      *            the audited file
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 406)      */
7aa061665 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2014-12-15 06:33:24 +0000 407)     @Override
0f58857d7 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-05-17 11:47:09 +0000 408)     public void fireFileFinished(String fileName) {
cdf3e56ba src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Ilja Dubinin        2015-08-27 12:17:01 +0000 409)         final String stripped = CommonUtils.relativizeAndNormalizePath(basedir, fileName);
ce196814d src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-10-16 23:35:09 +0000 410)         final AuditEvent event = new AuditEvent(this, stripped);
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 411)         for (final AuditListener listener : listeners) {
ce196814d src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-10-16 23:35:09 +0000 412)             listener.fileFinished(event);
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 413)         }
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 414)     }
                                                                                                                     415)
f1afaf83f src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2007-12-15 08:14:40 +0000 416)     @Override
35c607f16 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2017-12-13 02:52:11 +0000 417)     protected void finishLocalSetup() throws CheckstyleException {
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 418)         final Locale locale = new Locale(localeLanguage, localeCountry);
6ffc8dd26 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-30 18:29:44 +0000 419)         LocalizedMessage.setLocale(locale);
                                                                                                                     420)
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 421)         if (moduleFactory == null) {
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 422)             if (moduleClassLoader == null) {
fe9057366 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-04-08 01:35:17 +0000 423)                 throw new CheckstyleException(
fe9057366 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-04-08 01:35:17 +0000 424)                         "if no custom moduleFactory is set, "
fe9057366 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-04-08 01:35:17 +0000 425)                                 + "moduleClassLoader must be specified");
fe9057366 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-04-08 01:35:17 +0000 426)             }
                                                                                                                     427)
fe9057366 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-04-08 01:35:17 +0000 428)             final Set<String> packageNames = PackageNamesLoader
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 429)                     .getPackageNames(moduleClassLoader);
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 430)             moduleFactory = new PackageObjectFactory(packageNames,
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 431)                     moduleClassLoader);
88e89a138 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-12-16 06:26:46 +0000 432)         }
                                                                                                                     433)
16ba5b35f src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2002-12-05 18:54:28 +0000 434)         final DefaultContext context = new DefaultContext();
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 435)         context.add("charset", charset);
3bd699bd5 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Ruslan Diachenko    2015-08-12 05:19:21 +0000 436)         context.add("classLoader", classLoader);
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 437)         context.add("moduleFactory", moduleFactory);
327c0bc84 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2018-01-04 01:30:24 +0000 438)         context.add("severity", severity.getName());
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 439)         context.add("basedir", basedir);
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 440)         childContext = context;
08d6efe49 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-12-10 19:13:35 +0000 441)     }
                                                                                                                     442)
370ce0101 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (vasilyeva           2017-07-14 22:13:49 +0000 443)     /**
370ce0101 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (vasilyeva           2017-07-14 22:13:49 +0000 444)      * {@inheritDoc} Creates child module.
370ce0101 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (vasilyeva           2017-07-14 22:13:49 +0000 445)      * @noinspection ChainOfInstanceofChecks
370ce0101 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (vasilyeva           2017-07-14 22:13:49 +0000 446)      */
f1afaf83f src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2007-12-15 08:14:40 +0000 447)     @Override
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 448)     protected void setupChild(Configuration childConf)
6273f2072 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Zuy Alexey          2016-04-26 00:05:30 +0000 449)             throws CheckstyleException {
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 450)         final String name = childConf.getName();
d740f2e1c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Ruslan Diachenko    2015-08-31 05:02:37 +0000 451)         final Object child;
                                                                                                                     452)
6ffc8dd26 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-30 18:29:44 +0000 453)         try {
d740f2e1c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Ruslan Diachenko    2015-08-31 05:02:37 +0000 454)             child = moduleFactory.createModule(name);
                                                                                                                     455)
a4222b86e src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 23:00:39 +0000 456)             if (child instanceof AutomaticBean) {
a4222b86e src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 23:00:39 +0000 457)                 final AutomaticBean bean = (AutomaticBean) child;
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 458)                 bean.contextualize(childContext);
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 459)                 bean.configure(childConf);
a4222b86e src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 23:00:39 +0000 460)             }
6ffc8dd26 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-30 18:29:44 +0000 461)         }
d740f2e1c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Ruslan Diachenko    2015-08-31 05:02:37 +0000 462)         catch (final CheckstyleException ex) {
13b7c6343 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 09:37:27 +0000 463)             throw new CheckstyleException("cannot initialize module " + name
13b7c6343 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 09:37:27 +0000 464)                     + " - " + ex.getMessage(), ex);
6ffc8dd26 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-30 18:29:44 +0000 465)         }
c3baa3fa7 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 18:35:17 +0000 466)         if (child instanceof FileSetCheck) {
c3baa3fa7 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 18:35:17 +0000 467)             final FileSetCheck fsc = (FileSetCheck) child;
864cf936c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Roman Ivanov        2015-07-22 22:38:55 +0000 468)             fsc.init();
6ffc8dd26 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-30 18:29:44 +0000 469)             addFileSetCheck(fsc);
2a71cac7e src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-12-26 17:21:44 +0000 470)         }
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 471)         else if (child instanceof BeforeExecutionFileFilter) {
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 472)             final BeforeExecutionFileFilter filter = (BeforeExecutionFileFilter) child;
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 473)             addBeforeExecutionFileFilter(filter);
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 474)         }
f55fcd546 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-14 10:58:07 +0000 475)         else if (child instanceof Filter) {
f55fcd546 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-14 10:58:07 +0000 476)             final Filter filter = (Filter) child;
c3baa3fa7 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 18:35:17 +0000 477)             addFilter(filter);
c3baa3fa7 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 18:35:17 +0000 478)         }
a4222b86e src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 23:00:39 +0000 479)         else if (child instanceof AuditListener) {
a4222b86e src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 23:00:39 +0000 480)             final AuditListener listener = (AuditListener) child;
a4222b86e src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 23:00:39 +0000 481)             addListener(listener);
a4222b86e src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 23:00:39 +0000 482)         }
c3baa3fa7 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 18:35:17 +0000 483)         else {
10330437d src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2003-01-28 20:50:29 +0000 484)             throw new CheckstyleException(name
c3baa3fa7 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 18:35:17 +0000 485)                     + " is not allowed as a child in Checker");
c3baa3fa7 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 18:35:17 +0000 486)         }
6ffc8dd26 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-30 18:29:44 +0000 487)     }
                                                                                                                     488)
abff1a248 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-19 20:21:46 +0000 489)     /**
6568a9b88 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-20 05:56:06 +0000 490)      * Adds a FileSetCheck to the list of FileSetChecks
6568a9b88 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-20 05:56:06 +0000 491)      * that is executed in process().
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 492)      * @param fileSetCheck the additional FileSetCheck
abff1a248 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-19 20:21:46 +0000 493)      */
0f58857d7 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-05-17 11:47:09 +0000 494)     public void addFileSetCheck(FileSetCheck fileSetCheck) {
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 495)         fileSetCheck.setMessageDispatcher(this);
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 496)         fileSetChecks.add(fileSetCheck);
abff1a248 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-19 20:21:46 +0000 497)     }
                                                                                                                     498)
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 499)     /**
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 500)      * Adds a before execution file filter to the end of the event chain.
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 501)      * @param filter the additional filter
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 502)      */
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 503)     public void addBeforeExecutionFileFilter(BeforeExecutionFileFilter filter) {
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 504)         beforeExecutionFileFilters.addBeforeExecutionFileFilter(filter);
fbaabe83c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-10-22 22:53:10 +0000 505)     }
                                                                                                                     506)
c3baa3fa7 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 18:35:17 +0000 507)     /**
c3baa3fa7 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 18:35:17 +0000 508)      * Adds a filter to the end of the audit event filter chain.
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 509)      * @param filter the additional filter
c3baa3fa7 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 18:35:17 +0000 510)      */
0f58857d7 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-05-17 11:47:09 +0000 511)     public void addFilter(Filter filter) {
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 512)         filters.addFilter(filter);
c3baa3fa7 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Rick Giles          2003-07-11 18:35:17 +0000 513)     }
                                                                                                                     514)
8c8fee743 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-11-09 05:30:14 +0000 515)     @Override
0f58857d7 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-05-17 11:47:09 +0000 516)     public final void addListener(AuditListener listener) {
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 517)         listeners.add(listener);
0e3fe5643 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-08-30 16:13:24 +0000 518)     }
                                                                                                                     519)
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 520)     /**
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 521)      * Sets the file extensions that identify the files that pass the
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 522)      * filter of this FileSetCheck.
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 523)      * @param extensions the set of file extensions. A missing
a1128cd74 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Ruslan Diachenko    2015-08-31 17:43:28 +0000 524)      *     initial '.' character of an extension is automatically added.
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 525)      */
0f58857d7 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-05-17 11:47:09 +0000 526)     public final void setFileExtensions(String... extensions) {
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 527)         if (extensions == null) {
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 528)             fileExtensions = null;
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 529)         }
39b343a32 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-05-27 13:42:49 +0000 530)         else {
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 531)             fileExtensions = new String[extensions.length];
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 532)             for (int i = 0; i < extensions.length; i++) {
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 533)                 final String extension = extensions[i];
cdf3e56ba src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Ilja Dubinin        2015-08-27 12:17:01 +0000 534)                 if (CommonUtils.startsWithChar(extension, '.')) {
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 535)                     fileExtensions[i] = extension;
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 536)                 }
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 537)                 else {
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 538)                     fileExtensions[i] = "." + extension;
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 539)                 }
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 540)             }
39b343a32 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-05-27 13:42:49 +0000 541)         }
204c07329 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-25 09:30:21 +0000 542)     }
                                                                                                                     543)
88e89a138 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-12-16 06:26:46 +0000 544)     /**
88e89a138 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-12-16 06:26:46 +0000 545)      * Sets the factory for creating submodules.
88e89a138 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-12-16 06:26:46 +0000 546)      *
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 547)      * @param moduleFactory the factory for creating FileSetChecks
88e89a138 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-12-16 06:26:46 +0000 548)      */
0f58857d7 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-05-17 11:47:09 +0000 549)     public void setModuleFactory(ModuleFactory moduleFactory) {
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 550)         this.moduleFactory = moduleFactory;
88e89a138 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-12-16 06:26:46 +0000 551)     }
                                                                                                                     552)
cf85a72f3 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 15:49:51 +0000 553)     /**
49a0ee817 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 19:58:35 +0000 554)      * Sets locale country.
cf85a72f3 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 15:49:51 +0000 555)      * @param localeCountry the country to report messages
cf85a72f3 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 15:49:51 +0000 556)      */
0f58857d7 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-05-17 11:47:09 +0000 557)     public void setLocaleCountry(String localeCountry) {
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 558)         this.localeCountry = localeCountry;
6ffc8dd26 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-30 18:29:44 +0000 559)     }
                                                                                                                     560)
cf85a72f3 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 15:49:51 +0000 561)     /**
49a0ee817 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 19:58:35 +0000 562)      * Sets locale language.
cf85a72f3 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 15:49:51 +0000 563)      * @param localeLanguage the language to report messages
cf85a72f3 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-31 15:49:51 +0000 564)      */
0f58857d7 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-05-17 11:47:09 +0000 565)     public void setLocaleLanguage(String localeLanguage) {
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 566)         this.localeLanguage = localeLanguage;
6ffc8dd26 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2002-11-30 18:29:44 +0000 567)     }
                                                                                                                     568)
d216ec752 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2003-03-26 19:52:30 +0000 569)     /**
d216ec752 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2003-03-26 19:52:30 +0000 570)      * Sets the severity level.  The string should be one of the names
1935bed57 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Baratali Izmailov   2015-08-11 12:18:59 +0000 571)      * defined in the {@code SeverityLevel} class.
d216ec752 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2003-03-26 19:52:30 +0000 572)      *
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 573)      * @param severity  The new severity level
d216ec752 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2003-03-26 19:52:30 +0000 574)      * @see SeverityLevel
d216ec752 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2003-03-26 19:52:30 +0000 575)      */
0f58857d7 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-05-17 11:47:09 +0000 576)     public final void setSeverity(String severity) {
327c0bc84 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2018-01-04 01:30:24 +0000 577)         this.severity = SeverityLevel.getInstance(severity);
d216ec752 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Lars Kühne          2003-03-26 19:52:30 +0000 578)     }
                                                                                                                     579)
e1a27939a src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Roman Ivanov        2015-05-15 17:59:13 +0000 580)     /**
2b4a02d2c src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-09-04 01:06:15 +0000 581)      * Sets the classloader that is used to contextualize fileset checks.
e1a27939a src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Roman Ivanov        2015-05-15 17:59:13 +0000 582)      * Some Check implementations will use that classloader to improve the
e1a27939a src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Roman Ivanov        2015-05-15 17:59:13 +0000 583)      * quality of their reports, e.g. to load a class and then analyze it via
e1a27939a src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Roman Ivanov        2015-05-15 17:59:13 +0000 584)      * reflection.
3bd699bd5 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Ruslan Diachenko    2015-08-12 05:19:21 +0000 585)      * @param classLoader the new classloader
e1a27939a src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Roman Ivanov        2015-05-15 17:59:13 +0000 586)      */
3bd699bd5 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Ruslan Diachenko    2015-08-12 05:19:21 +0000 587)     public final void setClassLoader(ClassLoader classLoader) {
3bd699bd5 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Ruslan Diachenko    2015-08-12 05:19:21 +0000 588)         this.classLoader = classLoader;
e1a27939a src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Roman Ivanov        2015-05-15 17:59:13 +0000 589)     }
                                                                                                                     590)
8c8fee743 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-11-09 05:30:14 +0000 591)     @Override
0f58857d7 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Michal Kordas       2015-05-17 11:47:09 +0000 592)     public final void setModuleClassLoader(ClassLoader moduleClassLoader) {
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 593)         this.moduleClassLoader = moduleClassLoader;
fe9057366 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-04-08 01:35:17 +0000 594)     }
                                                                                                                     595)
2e4762f17 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 10:19:43 +0000 596)     /**
2e4762f17 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 10:19:43 +0000 597)      * Sets a named charset.
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 598)      * @param charset the name of a charset
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 599)      * @throws UnsupportedEncodingException if charset is unsupported.
2e4762f17 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 10:19:43 +0000 600)      */
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 601)     public void setCharset(String charset)
871b20e88 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-05-07 16:41:13 +0000 602)             throws UnsupportedEncodingException {
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 603)         if (!Charset.isSupported(charset)) {
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 604)             final String message = "unsupported charset: '" + charset + "'";
2e4762f17 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 10:19:43 +0000 605)             throw new UnsupportedEncodingException(message);
2e4762f17 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 10:19:43 +0000 606)         }
b8ca6a585 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (alexkravin          2015-01-19 14:38:32 +0000 607)         this.charset = charset;
2e4762f17 src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2008-11-09 10:19:43 +0000 608)     }
                                                                                                                     609)
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 610)     /**
ec2834e43 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Roman Ivanov        2016-12-09 22:01:23 +0000 611)      * Sets the field haltOnException.
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 612)      * @param haltOnException the new value.
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 613)      */
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 614)     public void setHaltOnException(boolean haltOnException) {
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 615)         this.haltOnException = haltOnException;
b61daf7f4 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2016-12-07 23:21:03 +0000 616)     }
                                                                                                                     617)
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 618)     /**
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 619)      * Clears the cache.
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 620)      */
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 621)     public void clearCache() {
327c0bc84 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2018-01-04 01:30:24 +0000 622)         if (cacheFile != null) {
327c0bc84 src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (rnveach             2018-01-04 01:30:24 +0000 623)             cacheFile.reset();
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 624)         }
d46c2cf0e src/main/java/com/puppycrawl/tools/checkstyle/Checker.java  (Andrei Selkin       2016-02-09 17:50:02 +0000 625)     }
                                                                                                                     626)
0fd69594a src/checkstyle/com/puppycrawl/tools/checkstyle/Checker.java (Oliver Burn         2001-06-22 13:24:24 +0000 627) }
