package com.intellij.psi.impl.source.tree;

import com.intellij.psi.PsiElement;
import com.intellij.psi.PsiTypeElement;
import com.intellij.psi.TokenType;
import com.intellij.psi.impl.source.Constants;
import com.intellij.psi.impl.source.xml.dtd.DTDElementType;
import com.intellij.psi.tree.IElementType;
import com.intellij.psi.tree.TokenSet;
import com.intellij.psi.xml.XmlElementType;

public interface ElementType extends
                             TokenType,
                             DTDElementType,
                             JavaElementType,
                             JavaDocElementType,
                             JspElementType,
                             XmlElementType,
                             AspectElementType {
  IElementType PLAIN_TEXT_FILE = new IElementType("PLAIN_TEXT_FILE");
  IElementType PLAIN_TEXT = new IElementType("PLAIN_TEXT");
  IElementType NEW_LINE_INDENT = new IElementType("NEW_LINE_INDENT");
  IElementType CODE_FRAGMENT = new IElementType("CODE_FRAGMENT");
  IElementType DUMMY_HOLDER = new IElementType("DUMMY_HOLDER");
  IElementType GRAMMAR_CHAMELEON = new IElementType("GRAMMAR_CHAMELEON");

  TokenSet WHITE_SPACE_BIT_SET = TokenSet.create(new IElementType[]{WHITE_SPACE, JSP_DIRECTIVE_WHITE_SPACE, JSP_ACTION_WHITE_SPACE});

  TokenSet COMMENT_BIT_SET = TokenSet.create(new IElementType[]{END_OF_LINE_COMMENT, C_STYLE_COMMENT, DOC_COMMENT, JSP_COMMENT,
                                                                XML_COMMENT});

  TokenSet WHITE_SPACE_OR_COMMENT_BIT_SET = TokenSet.orSet(WHITE_SPACE_BIT_SET, COMMENT_BIT_SET);

  TokenSet KEYWORD_BIT_SET = TokenSet.create(new IElementType[]{
    ABSTRACT_KEYWORD, ASSERT_KEYWORD, BOOLEAN_KEYWORD, BREAK_KEYWORD, BYTE_KEYWORD, CASE_KEYWORD,
    CATCH_KEYWORD, CHAR_KEYWORD, CLASS_KEYWORD, CONST_KEYWORD, CONTINUE_KEYWORD,
    DEFAULT_KEYWORD, DO_KEYWORD, DOUBLE_KEYWORD, ELSE_KEYWORD, EXTENDS_KEYWORD,
    FINAL_KEYWORD, FINALLY_KEYWORD, FLOAT_KEYWORD, FOR_KEYWORD, GOTO_KEYWORD,
    IF_KEYWORD, IMPLEMENTS_KEYWORD, IMPORT_KEYWORD, INSTANCEOF_KEYWORD, INT_KEYWORD,
    INTERFACE_KEYWORD, LONG_KEYWORD, NATIVE_KEYWORD, NEW_KEYWORD, PACKAGE_KEYWORD,
    PRIVATE_KEYWORD, PUBLIC_KEYWORD, SHORT_KEYWORD, SUPER_KEYWORD, SWITCH_KEYWORD, STRICTFP_KEYWORD,
    SYNCHRONIZED_KEYWORD, THIS_KEYWORD, THROW_KEYWORD, PROTECTED_KEYWORD, TRANSIENT_KEYWORD,
    RETURN_KEYWORD, VOID_KEYWORD, STATIC_KEYWORD, WHILE_KEYWORD, TRY_KEYWORD, VOLATILE_KEYWORD,
    THROWS_KEYWORD, ENUM_KEYWORD
  });

  TokenSet MODIFIER_BIT_SET = TokenSet.create(new IElementType[]{
    PUBLIC_KEYWORD, PROTECTED_KEYWORD, PRIVATE_KEYWORD, STATIC_KEYWORD,
    ABSTRACT_KEYWORD, FINAL_KEYWORD, NATIVE_KEYWORD, SYNCHRONIZED_KEYWORD,
    STRICTFP_KEYWORD, TRANSIENT_KEYWORD, VOLATILE_KEYWORD
  });

  TokenSet PRIMITIVE_TYPE_BIT_SET = TokenSet.create(new IElementType[]{
    BOOLEAN_KEYWORD, BYTE_KEYWORD, SHORT_KEYWORD, INT_KEYWORD,
    LONG_KEYWORD, CHAR_KEYWORD, FLOAT_KEYWORD, DOUBLE_KEYWORD,
    VOID_KEYWORD
  });

  TokenSet EXPRESSION_BIT_SET = TokenSet.create(new IElementType[]{
    REFERENCE_EXPRESSION, LITERAL_EXPRESSION, THIS_EXPRESSION, SUPER_EXPRESSION, PARENTH_EXPRESSION,
    METHOD_CALL_EXPRESSION, TYPE_CAST_EXPRESSION, PREFIX_EXPRESSION, POSTFIX_EXPRESSION,
    BINARY_EXPRESSION, CONDITIONAL_EXPRESSION, ASSIGNMENT_EXPRESSION, NEW_EXPRESSION,
    ARRAY_ACCESS_EXPRESSION, ARRAY_INITIALIZER_EXPRESSION, INSTANCE_OF_EXPRESSION, CLASS_OBJECT_ACCESS_EXPRESSION,
    EMPTY_EXPRESSION
  });

  TokenSet ANNOTATION_MEMBER_VALUE_BIT_SET = TokenSet.orSet(EXPRESSION_BIT_SET, TokenSet.create(new IElementType[]{
    ANNOTATION, ANNOTATION_ARRAY_INITIALIZER
  }));

  TokenSet ARRAY_DIMENSION_BIT_SET = TokenSet.create(new IElementType[]{
    REFERENCE_EXPRESSION, LITERAL_EXPRESSION, THIS_EXPRESSION, SUPER_EXPRESSION, PARENTH_EXPRESSION,
    METHOD_CALL_EXPRESSION, TYPE_CAST_EXPRESSION, PREFIX_EXPRESSION, POSTFIX_EXPRESSION,
    BINARY_EXPRESSION, CONDITIONAL_EXPRESSION, ASSIGNMENT_EXPRESSION, NEW_EXPRESSION,
    ARRAY_ACCESS_EXPRESSION, INSTANCE_OF_EXPRESSION, CLASS_OBJECT_ACCESS_EXPRESSION,
    EMPTY_EXPRESSION
  });

  TokenSet STATEMENT_BIT_SET = TokenSet.create(new IElementType[]{
    EMPTY_STATEMENT, BLOCK_STATEMENT, EXPRESSION_STATEMENT, EXPRESSION_LIST_STATEMENT,
    DECLARATION_STATEMENT, IF_STATEMENT, WHILE_STATEMENT, FOR_STATEMENT, FOREACH_STATEMENT,
    DO_WHILE_STATEMENT, SWITCH_STATEMENT, SWITCH_LABEL_STATEMENT, BREAK_STATEMENT,
    CONTINUE_STATEMENT, RETURN_STATEMENT, THROW_STATEMENT, SYNCHRONIZED_STATEMENT,
    TRY_STATEMENT, LABELED_STATEMENT, ASSERT_STATEMENT
  });
  TokenSet TYPES_BIT_SET = TokenSet.create(new IElementType[]{TYPE});
  Constants.PsiElementArrayConstructor PSI_TYPE_ELEMENT_ARRAY_CONSTRUCTOR = new Constants.PsiElementArrayConstructor() {
    public PsiElement[] newPsiElementArray(int length) {
      return length > 0 ? new PsiTypeElement[length] : PsiTypeElement.EMPTY_ARRAY;
    }
  };
  TokenSet IMPORT_STATEMENT_BIT_SET = TokenSet.create(new IElementType[]{IMPORT_STATEMENT});
  TokenSet IMPORT_STATIC_STATEMENT_BIT_SET = TokenSet.create(new IElementType[]{IMPORT_STATIC_STATEMENT});
  TokenSet IMPORT_STATEMENT_BASE_BIT_SET = TokenSet.create(new IElementType[]{IMPORT_STATEMENT, IMPORT_STATIC_STATEMENT});
  TokenSet CLASS_KEYWORD_BIT_SET = TokenSet.create(new IElementType[]{CLASS_KEYWORD, INTERFACE_KEYWORD, ENUM_KEYWORD});
  TokenSet MEMBER_BIT_SET = TokenSet.create(new IElementType[]{CLASS, FIELD, CLASS_INITIALIZER, METHOD});
}
