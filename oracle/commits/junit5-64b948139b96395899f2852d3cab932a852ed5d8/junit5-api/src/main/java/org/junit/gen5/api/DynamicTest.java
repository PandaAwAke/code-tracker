/*
 * Copyright 2015-2016 the original author or authors.
 *
 * All rights reserved. This program and the accompanying materials are
 * made available under the terms of the Eclipse Public License v1.0 which
 * accompanies this distribution and is available at
 *
 * http://www.eclipse.org/legal/epl-v10.html
 */

package org.junit.gen5.api;

import static org.junit.gen5.commons.meta.API.Usage.Experimental;

import java.util.Iterator;
import java.util.Spliterator;
import java.util.Spliterators;
import java.util.function.Consumer;
import java.util.function.Function;
import java.util.stream.Stream;
import java.util.stream.StreamSupport;

import org.junit.gen5.commons.meta.API;

/**
 * A {@code DynamicTest} is a test case generated at runtime.
 *
 * <p>It is composed of a {@linkplain #getDisplayName display name} and an
 * {@link #getExecutable Executable}.
 *
 * <p>Instances of {@code DynamicTest} must be generated by factory methods
 * annotated with {@link TestFactory @TestFactory}.
 *
 * <p>Note that dynamic tests are quite different from standard {@link Test @Test}
 * cases since callbacks such as {@link BeforeEach @BeforeEach} and
 * {@link AfterEach @AfterEach} methods are not executed for dynamic tests.
 *
 * @since 5.0
 * @see Test
 * @see TestFactory
 * @see Executable
 */
@API(Experimental)
public class DynamicTest {

	private final String displayName;
	private final Executable executable;

	public DynamicTest(String displayName, Executable executable) {
		this.displayName = displayName;
		this.executable = executable;
	}

	public String getDisplayName() {
		return this.displayName;
	}

	public Executable getExecutable() {
		return this.executable;
	}

	public static <T extends Object> Stream<DynamicTest> streamFrom(Iterator<T> generator,
			Function<T, String> displayNameSupplier, Consumer<T> assertion) {

		Stream<T> targetStream = StreamSupport.stream(
			Spliterators.spliteratorUnknownSize(generator, Spliterator.ORDERED), false);

		return targetStream.map(element -> {
			String displayName = displayNameSupplier.apply(element);
			Executable testExecutable = () -> assertion.accept(element);
			return new DynamicTest(displayName, testExecutable);
		});
	}

}
