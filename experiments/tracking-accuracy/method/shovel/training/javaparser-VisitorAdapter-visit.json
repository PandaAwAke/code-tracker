{
  "origin": "codeshovel",
  "repositoryName": "javaparser",
  "repositoryPath": "H:\\Projects\\javaparser\\javaparser/.git",
  "startCommitName": "97555053af3025556efe1a168fd7943dac28a2a6",
  "sourceFileName": "VoidVisitorAdapter.java",
  "functionName": "visit",
  "functionId": "visit___n-MethodDeclaration(modifiers-final)__arg-A(modifiers-final)",
  "sourceFilePath": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
  "functionStartLine": 409,
  "functionEndLine": 419,
  "numCommitsSeen": 89,
  "timeTaken": 1825,
  "changeHistory": [
    "13dacb72ff79db384dd5a93b769d36957911ebc7",
    "27a1a23d96cf8a1d4b34cdd28f10730d517673e2",
    "255d26470311d9624b12bac2301d589fa2eefb99",
    "6084184a80dcf7651411157cc0f40fa4b7e750eb",
    "f70eef166e4afd92471079a75ba5828049fca500",
    "a8f6c6d62fcbdc3506f19f11a7b89307cbf4c515",
    "d7828ee5f27be2f10dda026372898126aeae24b7",
    "e394062ae2f12c47b357c59884113862c82a21fb",
    "69c6a76c1b3b7936f35e64f61702a91b2a7b0a57",
    "008b82d149685d6702a060fbecafc8fc2e10b459",
    "02b3c5e03c44a9373c3a9d323c3425bdffade688",
    "9f1113b029cf7fcb6f468a85a7eae0e894415a4d",
    "515a9392928c14a60dc9dfa42a98198a4d877534",
    "95245a501059ef998be5052adb5930d744533731",
    "ea6d17cb087d5b7b0b0a8a2ad4dad35fce4ae144",
    "bb5ff94cff01665ddf58e3ca9a1369492340fe4b",
    "ef5f06ebff5e0beeb05f611a5f107452afb51457",
    "55af70e70d0124b8319f3e1d1809fafbebc68e7d",
    "df6c84c0a13f505da7fd0f64626fb5d18fd49619",
    "c992b2206b0882195e8cc68ae9d55c43ec015111",
    "0bf897c19251e2d4ada7611e47176fbbef1750ad",
    "40dc8d37c07dc624780d215bd1ff3e00878fe9c5",
    "d3db3f06220a1d0091a5cda602f13dcdc8db3040",
    "43e6f7bfbcd77b61232cc9f3e166795e47bad04b",
    "2d4decafdf373c4d1cabd9c6f8a97707c72069ff"
  ],
  "changeHistoryShort": {
    "13dacb72ff79db384dd5a93b769d36957911ebc7": "Ybodychange",
    "27a1a23d96cf8a1d4b34cdd28f10730d517673e2": "Ybodychange",
    "255d26470311d9624b12bac2301d589fa2eefb99": "Ybodychange",
    "6084184a80dcf7651411157cc0f40fa4b7e750eb": "Ybodychange",
    "f70eef166e4afd92471079a75ba5828049fca500": "Ybodychange",
    "a8f6c6d62fcbdc3506f19f11a7b89307cbf4c515": "Ybodychange",
    "d7828ee5f27be2f10dda026372898126aeae24b7": "Ybodychange",
    "e394062ae2f12c47b357c59884113862c82a21fb": "Ybodychange",
    "69c6a76c1b3b7936f35e64f61702a91b2a7b0a57": "Ybodychange",
    "008b82d149685d6702a060fbecafc8fc2e10b459": "Ybodychange",
    "02b3c5e03c44a9373c3a9d323c3425bdffade688": "Ybodychange",
    "9f1113b029cf7fcb6f468a85a7eae0e894415a4d": "Ybodychange",
    "515a9392928c14a60dc9dfa42a98198a4d877534": "Ybodychange",
    "95245a501059ef998be5052adb5930d744533731": "Ybodychange",
    "ea6d17cb087d5b7b0b0a8a2ad4dad35fce4ae144": "Ybodychange",
    "bb5ff94cff01665ddf58e3ca9a1369492340fe4b": "Ybodychange",
    "ef5f06ebff5e0beeb05f611a5f107452afb51457": "Ybodychange",
    "55af70e70d0124b8319f3e1d1809fafbebc68e7d": "Ybodychange",
    "df6c84c0a13f505da7fd0f64626fb5d18fd49619": "Yfilerename",
    "c992b2206b0882195e8cc68ae9d55c43ec015111": "Yfilerename",
    "0bf897c19251e2d4ada7611e47176fbbef1750ad": "Yfilerename",
    "40dc8d37c07dc624780d215bd1ff3e00878fe9c5": "Ymultichange(Ybodychange,Yparametermetachange)",
    "d3db3f06220a1d0091a5cda602f13dcdc8db3040": "Ybodychange",
    "43e6f7bfbcd77b61232cc9f3e166795e47bad04b": "Yfilerename",
    "2d4decafdf373c4d1cabd9c6f8a97707c72069ff": "Yintroduced"
  },
  "changeHistoryDetails": {
    "13dacb72ff79db384dd5a93b769d36957911ebc7": {
      "type": "Ybodychange",
      "commitMessage": "Run core generators\n",
      "commitDate": "2017-11-04, 8:42 p.m.",
      "commitName": "13dacb72ff79db384dd5a93b769d36957911ebc7",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2017-10-17, 1:57 p.m.",
      "commitNameOld": "27a1a23d96cf8a1d4b34cdd28f10730d517673e2",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 18.28,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "    public void visit(final MethodDeclaration n, final A arg) {\n        n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n        n.getType().accept(this, arg);\n        n.getName().accept(this, arg);\n        n.getParameters().forEach(p -\u003e p.accept(this, arg));\n        n.getReceiverParameter().ifPresent(l -\u003e l.accept(this, arg));\n        n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n        n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n        n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n        n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n    }",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 409,
      "functionName": "visit",
      "diff": "@@ -1,11 +1,11 @@\n     public void visit(final MethodDeclaration n, final A arg) {\n         n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n-        n.getReceiverParameter().ifPresent(l -\u003e l.accept(this, arg));\n         n.getType().accept(this, arg);\n         n.getName().accept(this, arg);\n         n.getParameters().forEach(p -\u003e p.accept(this, arg));\n+        n.getReceiverParameter().ifPresent(l -\u003e l.accept(this, arg));\n         n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n         n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n         n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n         n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "27a1a23d96cf8a1d4b34cdd28f10730d517673e2": {
      "type": "Ybodychange",
      "commitMessage": "Put receiver parameter only in method declarations\n",
      "commitDate": "2017-10-17, 1:57 p.m.",
      "commitName": "27a1a23d96cf8a1d4b34cdd28f10730d517673e2",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2017-10-16, 6:54 p.m.",
      "commitNameOld": "255d26470311d9624b12bac2301d589fa2eefb99",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 0.79,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    public void visit(final MethodDeclaration n, final A arg) {\n        n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n        n.getReceiverParameter().ifPresent(l -\u003e l.accept(this, arg));\n        n.getType().accept(this, arg);\n        n.getName().accept(this, arg);\n        n.getParameters().forEach(p -\u003e p.accept(this, arg));\n        n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n        n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n        n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n        n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n    }",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 408,
      "functionName": "visit",
      "diff": "@@ -1,11 +1,11 @@\n     public void visit(final MethodDeclaration n, final A arg) {\n         n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n+        n.getReceiverParameter().ifPresent(l -\u003e l.accept(this, arg));\n         n.getType().accept(this, arg);\n         n.getName().accept(this, arg);\n         n.getParameters().forEach(p -\u003e p.accept(this, arg));\n-        n.getReceiverParameter().ifPresent(l -\u003e l.accept(this, arg));\n         n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n         n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n         n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n         n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "255d26470311d9624b12bac2301d589fa2eefb99": {
      "type": "Ybodychange",
      "commitMessage": "Regenerate code\n",
      "commitDate": "2017-10-16, 6:54 p.m.",
      "commitName": "255d26470311d9624b12bac2301d589fa2eefb99",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2017-08-15, 3:58 p.m.",
      "commitNameOld": "c6e5c0162a5c693e08b7e112bf74e3514a585238",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 62.12,
      "commitsBetweenForRepo": 181,
      "commitsBetweenForFile": 1,
      "actualSource": "    public void visit(final MethodDeclaration n, final A arg) {\n        n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n        n.getType().accept(this, arg);\n        n.getName().accept(this, arg);\n        n.getParameters().forEach(p -\u003e p.accept(this, arg));\n        n.getReceiverParameter().ifPresent(l -\u003e l.accept(this, arg));\n        n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n        n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n        n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n        n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n    }",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 409,
      "functionName": "visit",
      "diff": "@@ -1,10 +1,11 @@\n     public void visit(final MethodDeclaration n, final A arg) {\n         n.getBody().ifPresent(l -\u003e l.accept(this, arg));\n         n.getType().accept(this, arg);\n         n.getName().accept(this, arg);\n         n.getParameters().forEach(p -\u003e p.accept(this, arg));\n+        n.getReceiverParameter().ifPresent(l -\u003e l.accept(this, arg));\n         n.getThrownExceptions().forEach(p -\u003e p.accept(this, arg));\n         n.getTypeParameters().forEach(p -\u003e p.accept(this, arg));\n         n.getAnnotations().forEach(p -\u003e p.accept(this, arg));\n         n.getComment().ifPresent(l -\u003e l.accept(this, arg));\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6084184a80dcf7651411157cc0f40fa4b7e750eb": {
      "type": "Ybodychange",
      "commitMessage": "Struggle with CallableDeclaration merge\n",
      "commitDate": "2017-02-07, 3:41 p.m.",
      "commitName": "6084184a80dcf7651411157cc0f40fa4b7e750eb",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2017-01-27, 3:57 p.m.",
      "commitNameOld": "b2ec99c5db4346ca336247d1396461d825a3bd15",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 10.99,
      "commitsBetweenForRepo": 67,
      "commitsBetweenForFile": 1,
      "actualSource": "    public void visit(final MethodDeclaration n, final A arg) {\n        n.getBody().ifPresent( l -\u003e l.accept(this, arg));\n        n.getType().accept(this, arg);\n        n.getName().accept(this, arg);\n        n.getParameters().forEach( p -\u003e p.accept(this, arg));\n        n.getThrownExceptions().forEach( p -\u003e p.accept(this, arg));\n        n.getTypeParameters().forEach( p -\u003e p.accept(this, arg));\n        n.getAnnotations().forEach( p -\u003e p.accept(this, arg));\n        n.getComment().ifPresent( l -\u003e l.accept(this, arg));\n    }",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 363,
      "functionName": "visit",
      "diff": "@@ -1,10 +1,10 @@\n     public void visit(final MethodDeclaration n, final A arg) {\n         n.getBody().ifPresent( l -\u003e l.accept(this, arg));\n+        n.getType().accept(this, arg);\n         n.getName().accept(this, arg);\n         n.getParameters().forEach( p -\u003e p.accept(this, arg));\n         n.getThrownExceptions().forEach( p -\u003e p.accept(this, arg));\n-        n.getType().accept(this, arg);\n         n.getTypeParameters().forEach( p -\u003e p.accept(this, arg));\n         n.getAnnotations().forEach( p -\u003e p.accept(this, arg));\n         n.getComment().ifPresent( l -\u003e l.accept(this, arg));\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f70eef166e4afd92471079a75ba5828049fca500": {
      "type": "Ybodychange",
      "commitMessage": "Generate VoidVisitorAdapter\n",
      "commitDate": "2017-01-27, 3:43 p.m.",
      "commitName": "f70eef166e4afd92471079a75ba5828049fca500",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2017-01-21, 6:23 p.m.",
      "commitNameOld": "764aa68aee62304b40b7d09903b492e240d637b2",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 5.89,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "    public void visit(final MethodDeclaration n, final A arg) {\n        n.getBody().ifPresent( l -\u003e l.accept(this, arg));\n        n.getName().accept(this, arg);\n        n.getParameters().forEach( p -\u003e p.accept(this, arg));\n        n.getThrownExceptions().forEach( p -\u003e p.accept(this, arg));\n        n.getType().accept(this, arg);\n        n.getTypeParameters().forEach( p -\u003e p.accept(this, arg));\n        n.getAnnotations().forEach( p -\u003e p.accept(this, arg));\n        n.getComment().ifPresent( l -\u003e l.accept(this, arg));\n    }",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 365,
      "functionName": "visit",
      "diff": "@@ -1,24 +1,10 @@\n     public void visit(final MethodDeclaration n, final A arg) {\n-        visitComment(n.getComment(), arg);\n-        visitAnnotations(n, arg);\n-        if (n.getTypeParameters() !\u003d null) {\n-            for (final TypeParameter t : n.getTypeParameters()) {\n-                t.accept(this, arg);\n-            }\n-        }\n-        n.getType().accept(this, arg);\n+        n.getBody().ifPresent( l -\u003e l.accept(this, arg));\n         n.getName().accept(this, arg);\n-        if (n.getParameters() !\u003d null) {\n-            for (final Parameter p : n.getParameters()) {\n-                p.accept(this, arg);\n-            }\n-        }\n-        if (n.getThrownExceptions() !\u003d null) {\n-            for (final ReferenceType name : n.getThrownExceptions()) {\n-                name.accept(this, arg);\n-            }\n-        }\n-        if (n.getBody().isPresent()) {\n-            n.getBody().get().accept(this, arg);\n-        }\n+        n.getParameters().forEach( p -\u003e p.accept(this, arg));\n+        n.getThrownExceptions().forEach( p -\u003e p.accept(this, arg));\n+        n.getType().accept(this, arg);\n+        n.getTypeParameters().forEach( p -\u003e p.accept(this, arg));\n+        n.getAnnotations().forEach( p -\u003e p.accept(this, arg));\n+        n.getComment().ifPresent( l -\u003e l.accept(this, arg));\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a8f6c6d62fcbdc3506f19f11a7b89307cbf4c515": {
      "type": "Ybodychange",
      "commitMessage": "Get rid of infuriating useless \u003c?\u003e on Type\n",
      "commitDate": "2016-12-15, 4:58 a.m.",
      "commitName": "a8f6c6d62fcbdc3506f19f11a7b89307cbf4c515",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2016-12-10, 8:09 a.m.",
      "commitNameOld": "0b43f836abee5fcdb15adbcff4619f76780b74ac",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 4.87,
      "commitsBetweenForRepo": 22,
      "commitsBetweenForFile": 1,
      "actualSource": "    public void visit(final MethodDeclaration n, final A arg) {\n        visitComment(n.getComment(), arg);\n        visitAnnotations(n, arg);\n        if (n.getTypeParameters() !\u003d null) {\n            for (final TypeParameter t : n.getTypeParameters()) {\n                t.accept(this, arg);\n            }\n        }\n        n.getType().accept(this, arg);\n        n.getName().accept(this, arg);\n        if (n.getParameters() !\u003d null) {\n            for (final Parameter p : n.getParameters()) {\n                p.accept(this, arg);\n            }\n        }\n        if (n.getThrownExceptions() !\u003d null) {\n            for (final ReferenceType name : n.getThrownExceptions()) {\n                name.accept(this, arg);\n            }\n        }\n        if (n.getBody().isPresent()) {\n            n.getBody().get().accept(this, arg);\n        }\n    }",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 465,
      "functionName": "visit",
      "diff": "@@ -1,24 +1,24 @@\n     public void visit(final MethodDeclaration n, final A arg) {\n         visitComment(n.getComment(), arg);\n         visitAnnotations(n, arg);\n         if (n.getTypeParameters() !\u003d null) {\n             for (final TypeParameter t : n.getTypeParameters()) {\n                 t.accept(this, arg);\n             }\n         }\n         n.getType().accept(this, arg);\n         n.getName().accept(this, arg);\n         if (n.getParameters() !\u003d null) {\n             for (final Parameter p : n.getParameters()) {\n                 p.accept(this, arg);\n             }\n         }\n         if (n.getThrownExceptions() !\u003d null) {\n-            for (final ReferenceType\u003c?\u003e name : n.getThrownExceptions()) {\n+            for (final ReferenceType name : n.getThrownExceptions()) {\n                 name.accept(this, arg);\n             }\n         }\n         if (n.getBody().isPresent()) {\n             n.getBody().get().accept(this, arg);\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d7828ee5f27be2f10dda026372898126aeae24b7": {
      "type": "Ybodychange",
      "commitMessage": "Well on my way to remove bracket info everywhere\n",
      "commitDate": "2016-12-06, 5:19 p.m.",
      "commitName": "d7828ee5f27be2f10dda026372898126aeae24b7",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2016-11-30, 4:53 p.m.",
      "commitNameOld": "694464c8e552a3960707dbd58965866989e02a2b",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 6.02,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "    public void visit(final MethodDeclaration n, final A arg) {\n        visitComment(n.getComment(), arg);\n        visitAnnotations(n, arg);\n        if (n.getTypeParameters() !\u003d null) {\n            for (final TypeParameter t : n.getTypeParameters()) {\n                t.accept(this, arg);\n            }\n        }\n        n.getType().accept(this, arg);\n        n.getName().accept(this, arg);\n        if (n.getParameters() !\u003d null) {\n            for (final Parameter p : n.getParameters()) {\n                p.accept(this, arg);\n            }\n        }\n        if (n.getThrownExceptions() !\u003d null) {\n            for (final ReferenceType\u003c?\u003e name : n.getThrownExceptions()) {\n                name.accept(this, arg);\n            }\n        }\n        if (n.getBody().isPresent()) {\n            n.getBody().get().accept(this, arg);\n        }\n    }",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 471,
      "functionName": "visit",
      "diff": "@@ -1,24 +1,24 @@\n     public void visit(final MethodDeclaration n, final A arg) {\n         visitComment(n.getComment(), arg);\n         visitAnnotations(n, arg);\n         if (n.getTypeParameters() !\u003d null) {\n             for (final TypeParameter t : n.getTypeParameters()) {\n                 t.accept(this, arg);\n             }\n         }\n-        n.getElementType().accept(this, arg);\n+        n.getType().accept(this, arg);\n         n.getName().accept(this, arg);\n         if (n.getParameters() !\u003d null) {\n             for (final Parameter p : n.getParameters()) {\n                 p.accept(this, arg);\n             }\n         }\n         if (n.getThrownExceptions() !\u003d null) {\n             for (final ReferenceType\u003c?\u003e name : n.getThrownExceptions()) {\n                 name.accept(this, arg);\n             }\n         }\n         if (n.getBody().isPresent()) {\n             n.getBody().get().accept(this, arg);\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e394062ae2f12c47b357c59884113862c82a21fb": {
      "type": "Ybodychange",
      "commitMessage": "Feedback from github\n",
      "commitDate": "2016-11-28, 5:29 p.m.",
      "commitName": "e394062ae2f12c47b357c59884113862c82a21fb",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2016-11-28, 3:09 p.m.",
      "commitNameOld": "69c6a76c1b3b7936f35e64f61702a91b2a7b0a57",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "    public void visit(final MethodDeclaration n, final A arg) {\n        visitComment(n.getComment(), arg);\n        visitAnnotations(n, arg);\n        if (n.getTypeParameters() !\u003d null) {\n            for (final TypeParameter t : n.getTypeParameters()) {\n                t.accept(this, arg);\n            }\n        }\n        n.getElementType().accept(this, arg);\n        n.getName().accept(this, arg);\n        if (n.getParameters() !\u003d null) {\n            for (final Parameter p : n.getParameters()) {\n                p.accept(this, arg);\n            }\n        }\n        if (n.getThrownExceptions() !\u003d null) {\n            for (final ReferenceType\u003c?\u003e name : n.getThrownExceptions()) {\n                name.accept(this, arg);\n            }\n        }\n        if (n.getBody().isPresent()) {\n            n.getBody().get().accept(this, arg);\n        }\n    }",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 575,
      "functionName": "visit",
      "diff": "@@ -1,24 +1,24 @@\n     public void visit(final MethodDeclaration n, final A arg) {\n         visitComment(n.getComment(), arg);\n         visitAnnotations(n, arg);\n         if (n.getTypeParameters() !\u003d null) {\n             for (final TypeParameter t : n.getTypeParameters()) {\n                 t.accept(this, arg);\n             }\n         }\n         n.getElementType().accept(this, arg);\n         n.getName().accept(this, arg);\n         if (n.getParameters() !\u003d null) {\n             for (final Parameter p : n.getParameters()) {\n                 p.accept(this, arg);\n             }\n         }\n-        if (n.getThrownTypes() !\u003d null) {\n-            for (final ReferenceType\u003c?\u003e name : n.getThrownTypes()) {\n+        if (n.getThrownExceptions() !\u003d null) {\n+            for (final ReferenceType\u003c?\u003e name : n.getThrownExceptions()) {\n                 name.accept(this, arg);\n             }\n         }\n         if (n.getBody().isPresent()) {\n             n.getBody().get().accept(this, arg);\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "69c6a76c1b3b7936f35e64f61702a91b2a7b0a57": {
      "type": "Ybodychange",
      "commitMessage": "Make a first attempt at better naming\n",
      "commitDate": "2016-11-28, 3:09 p.m.",
      "commitName": "69c6a76c1b3b7936f35e64f61702a91b2a7b0a57",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2016-11-10, 3:59 p.m.",
      "commitNameOld": "008b82d149685d6702a060fbecafc8fc2e10b459",
      "commitAuthorOld": "Cruz Maximilien",
      "daysBetweenCommits": 17.97,
      "commitsBetweenForRepo": 72,
      "commitsBetweenForFile": 1,
      "actualSource": "    public void visit(final MethodDeclaration n, final A arg) {\n        visitComment(n.getComment(), arg);\n        visitAnnotations(n, arg);\n        if (n.getTypeParameters() !\u003d null) {\n            for (final TypeParameter t : n.getTypeParameters()) {\n                t.accept(this, arg);\n            }\n        }\n        n.getElementType().accept(this, arg);\n        n.getName().accept(this, arg);\n        if (n.getParameters() !\u003d null) {\n            for (final Parameter p : n.getParameters()) {\n                p.accept(this, arg);\n            }\n        }\n        if (n.getThrownTypes() !\u003d null) {\n            for (final ReferenceType\u003c?\u003e name : n.getThrownTypes()) {\n                name.accept(this, arg);\n            }\n        }\n        if (n.getBody().isPresent()) {\n            n.getBody().get().accept(this, arg);\n        }\n    }",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 575,
      "functionName": "visit",
      "diff": "@@ -1,24 +1,24 @@\n     public void visit(final MethodDeclaration n, final A arg) {\n         visitComment(n.getComment(), arg);\n         visitAnnotations(n, arg);\n         if (n.getTypeParameters() !\u003d null) {\n             for (final TypeParameter t : n.getTypeParameters()) {\n                 t.accept(this, arg);\n             }\n         }\n         n.getElementType().accept(this, arg);\n         n.getName().accept(this, arg);\n         if (n.getParameters() !\u003d null) {\n             for (final Parameter p : n.getParameters()) {\n                 p.accept(this, arg);\n             }\n         }\n-        if (n.getThrows() !\u003d null) {\n-            for (final ReferenceType\u003c?\u003e name : n.getThrows()) {\n+        if (n.getThrownTypes() !\u003d null) {\n+            for (final ReferenceType\u003c?\u003e name : n.getThrownTypes()) {\n                 name.accept(this, arg);\n             }\n         }\n         if (n.getBody().isPresent()) {\n             n.getBody().get().accept(this, arg);\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "008b82d149685d6702a060fbecafc8fc2e10b459": {
      "type": "Ybodychange",
      "commitMessage": "#516 some optionals (#536)\n\n* #516 some optionals",
      "commitDate": "2016-11-10, 3:59 p.m.",
      "commitName": "008b82d149685d6702a060fbecafc8fc2e10b459",
      "commitAuthor": "Cruz Maximilien",
      "commitDateOld": "2016-11-10, 4:33 a.m.",
      "commitNameOld": "02b3c5e03c44a9373c3a9d323c3425bdffade688",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 0.48,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "    public void visit(final MethodDeclaration n, final A arg) {\n        visitComment(n.getComment(), arg);\n        visitAnnotations(n, arg);\n        if (n.getTypeParameters() !\u003d null) {\n            for (final TypeParameter t : n.getTypeParameters()) {\n                t.accept(this, arg);\n            }\n        }\n        n.getElementType().accept(this, arg);\n        n.getName().accept(this, arg);\n        if (n.getParameters() !\u003d null) {\n            for (final Parameter p : n.getParameters()) {\n                p.accept(this, arg);\n            }\n        }\n        if (n.getThrows() !\u003d null) {\n            for (final ReferenceType\u003c?\u003e name : n.getThrows()) {\n                name.accept(this, arg);\n            }\n        }\n        if (n.getBody().isPresent()) {\n            n.getBody().get().accept(this, arg);\n        }\n    }",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 575,
      "functionName": "visit",
      "diff": "@@ -1,24 +1,24 @@\n-\t@Override public void visit(final MethodDeclaration n, final A arg) {\n-\t\tvisitComment(n.getComment(), arg);\n-\t\tvisitAnnotations(n, arg);\n-\t\tif (n.getTypeParameters() !\u003d null) {\n-\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n-\t\t\t\tt.accept(this, arg);\n-\t\t\t}\n-\t\t}\n-\t\tn.getElementType().accept(this, arg);\n-\t\tn.getName().accept(this, arg);\n-\t\tif (n.getParameters() !\u003d null) {\n-\t\t\tfor (final Parameter p : n.getParameters()) {\n-\t\t\t\tp.accept(this, arg);\n-\t\t\t}\n-\t\t}\n-\t\tif (n.getThrows() !\u003d null) {\n-\t\t\tfor (final ReferenceType name : n.getThrows()) {\n-\t\t\t\tname.accept(this, arg);\n-\t\t\t}\n-\t\t}\n-\t\tif (n.getBody() !\u003d null) {\n-\t\t\tn.getBody().accept(this, arg);\n-\t\t}\n-\t}\n\\ No newline at end of file\n+    public void visit(final MethodDeclaration n, final A arg) {\n+        visitComment(n.getComment(), arg);\n+        visitAnnotations(n, arg);\n+        if (n.getTypeParameters() !\u003d null) {\n+            for (final TypeParameter t : n.getTypeParameters()) {\n+                t.accept(this, arg);\n+            }\n+        }\n+        n.getElementType().accept(this, arg);\n+        n.getName().accept(this, arg);\n+        if (n.getParameters() !\u003d null) {\n+            for (final Parameter p : n.getParameters()) {\n+                p.accept(this, arg);\n+            }\n+        }\n+        if (n.getThrows() !\u003d null) {\n+            for (final ReferenceType\u003c?\u003e name : n.getThrows()) {\n+                name.accept(this, arg);\n+            }\n+        }\n+        if (n.getBody().isPresent()) {\n+            n.getBody().get().accept(this, arg);\n+        }\n+    }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "02b3c5e03c44a9373c3a9d323c3425bdffade688": {
      "type": "Ybodychange",
      "commitMessage": "Fix naming (#549)\n\nFixes #358 and #403.",
      "commitDate": "2016-11-10, 4:33 a.m.",
      "commitName": "02b3c5e03c44a9373c3a9d323c3425bdffade688",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2016-10-26, 12:57 p.m.",
      "commitNameOld": "9f1113b029cf7fcb6f468a85a7eae0e894415a4d",
      "commitAuthorOld": "matozoid",
      "daysBetweenCommits": 14.69,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "\t@Override public void visit(final MethodDeclaration n, final A arg) {\n\t\tvisitComment(n.getComment(), arg);\n\t\tvisitAnnotations(n, arg);\n\t\tif (n.getTypeParameters() !\u003d null) {\n\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n\t\t\t\tt.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tn.getElementType().accept(this, arg);\n\t\tn.getName().accept(this, arg);\n\t\tif (n.getParameters() !\u003d null) {\n\t\t\tfor (final Parameter p : n.getParameters()) {\n\t\t\t\tp.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getThrows() !\u003d null) {\n\t\t\tfor (final ReferenceType name : n.getThrows()) {\n\t\t\t\tname.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getBody() !\u003d null) {\n\t\t\tn.getBody().accept(this, arg);\n\t\t}\n\t}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 446,
      "functionName": "visit",
      "diff": "@@ -1,24 +1,24 @@\n \t@Override public void visit(final MethodDeclaration n, final A arg) {\n \t\tvisitComment(n.getComment(), arg);\n \t\tvisitAnnotations(n, arg);\n \t\tif (n.getTypeParameters() !\u003d null) {\n \t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n \t\t\t\tt.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tn.getElementType().accept(this, arg);\n-\t\tn.getNameExpr().accept(this, arg);\n+\t\tn.getName().accept(this, arg);\n \t\tif (n.getParameters() !\u003d null) {\n \t\t\tfor (final Parameter p : n.getParameters()) {\n \t\t\t\tp.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getThrows() !\u003d null) {\n \t\t\tfor (final ReferenceType name : n.getThrows()) {\n \t\t\t\tname.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getBody() !\u003d null) {\n \t\t\tn.getBody().accept(this, arg);\n \t\t}\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9f1113b029cf7fcb6f468a85a7eae0e894415a4d": {
      "type": "Ybodychange",
      "commitMessage": "Roll back Optional usage, awaiting #516\n",
      "commitDate": "2016-10-26, 12:57 p.m.",
      "commitName": "9f1113b029cf7fcb6f468a85a7eae0e894415a4d",
      "commitAuthor": "matozoid",
      "commitDateOld": "2016-10-16, 3:56 p.m.",
      "commitNameOld": "515a9392928c14a60dc9dfa42a98198a4d877534",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 9.88,
      "commitsBetweenForRepo": 9,
      "commitsBetweenForFile": 1,
      "actualSource": "\t@Override public void visit(final MethodDeclaration n, final A arg) {\n\t\tvisitComment(n.getComment(), arg);\n\t\tvisitAnnotations(n, arg);\n\t\tif (n.getTypeParameters() !\u003d null) {\n\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n\t\t\t\tt.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tn.getElementType().accept(this, arg);\n\t\tn.getNameExpr().accept(this, arg);\n\t\tif (n.getParameters() !\u003d null) {\n\t\t\tfor (final Parameter p : n.getParameters()) {\n\t\t\t\tp.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getThrows() !\u003d null) {\n\t\t\tfor (final ReferenceType name : n.getThrows()) {\n\t\t\t\tname.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getBody() !\u003d null) {\n\t\t\tn.getBody().accept(this, arg);\n\t\t}\n\t}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 482,
      "functionName": "visit",
      "diff": "@@ -1,22 +1,24 @@\n \t@Override public void visit(final MethodDeclaration n, final A arg) {\n \t\tvisitComment(n.getComment(), arg);\n \t\tvisitAnnotations(n, arg);\n \t\tif (n.getTypeParameters() !\u003d null) {\n \t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n \t\t\t\tt.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tn.getElementType().accept(this, arg);\n \t\tn.getNameExpr().accept(this, arg);\n \t\tif (n.getParameters() !\u003d null) {\n \t\t\tfor (final Parameter p : n.getParameters()) {\n \t\t\t\tp.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getThrows() !\u003d null) {\n \t\t\tfor (final ReferenceType name : n.getThrows()) {\n \t\t\t\tname.accept(this, arg);\n \t\t\t}\n \t\t}\n-        n.getBody().ifPresent(b -\u003e b.accept(this, arg));\n+\t\tif (n.getBody() !\u003d null) {\n+\t\t\tn.getBody().accept(this, arg);\n+\t\t}\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "515a9392928c14a60dc9dfa42a98198a4d877534": {
      "type": "Ybodychange",
      "commitMessage": "Issue 421 parenting of collections (#501)\n\n* Migrate from List to NodeList\r\n* Disallow usage of null in the AST\r\n* Use Optional where fields are optional (previously nullable)\r\n",
      "commitDate": "2016-10-16, 3:56 p.m.",
      "commitName": "515a9392928c14a60dc9dfa42a98198a4d877534",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2016-10-08, 1:45 p.m.",
      "commitNameOld": "731c46d3bd61cc1e3e4733570dd80ab00cd63c87",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 8.09,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "\t@Override public void visit(final MethodDeclaration n, final A arg) {\n\t\tvisitComment(n.getComment(), arg);\n\t\tvisitAnnotations(n, arg);\n\t\tif (n.getTypeParameters() !\u003d null) {\n\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n\t\t\t\tt.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tn.getElementType().accept(this, arg);\n\t\tn.getNameExpr().accept(this, arg);\n\t\tif (n.getParameters() !\u003d null) {\n\t\t\tfor (final Parameter p : n.getParameters()) {\n\t\t\t\tp.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getThrows() !\u003d null) {\n\t\t\tfor (final ReferenceType name : n.getThrows()) {\n\t\t\t\tname.accept(this, arg);\n\t\t\t}\n\t\t}\n        n.getBody().ifPresent(b -\u003e b.accept(this, arg));\n\t}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 400,
      "functionName": "visit",
      "diff": "@@ -1,24 +1,22 @@\n \t@Override public void visit(final MethodDeclaration n, final A arg) {\n \t\tvisitComment(n.getComment(), arg);\n \t\tvisitAnnotations(n, arg);\n \t\tif (n.getTypeParameters() !\u003d null) {\n \t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n \t\t\t\tt.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tn.getElementType().accept(this, arg);\n \t\tn.getNameExpr().accept(this, arg);\n \t\tif (n.getParameters() !\u003d null) {\n \t\t\tfor (final Parameter p : n.getParameters()) {\n \t\t\t\tp.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getThrows() !\u003d null) {\n \t\t\tfor (final ReferenceType name : n.getThrows()) {\n \t\t\t\tname.accept(this, arg);\n \t\t\t}\n \t\t}\n-\t\tif (n.getBody() !\u003d null) {\n-\t\t\tn.getBody().accept(this, arg);\n-\t\t}\n+        n.getBody().ifPresent(b -\u003e b.accept(this, arg));\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "95245a501059ef998be5052adb5930d744533731": {
      "type": "Ybodychange",
      "commitMessage": "Issue 237 arraytype (#459)\n\n* Change from \"type.arrayinfo\" to \"ArrayType(info, ArrayType(info, type))\r\n* Make ReferenceType just a base class for the actual reference types: ArrayType and ClassOrInterfaceType\r\n* Make TypeParameter a ReferenceType as suggested by ptitjes\r\n* Add ArrayBracketPair class\r\n* Add getElementType and remove getType where required\r\n* Use EOL constant for end of line\r\n",
      "commitDate": "2016-09-30, 7:57 a.m.",
      "commitName": "95245a501059ef998be5052adb5930d744533731",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2016-09-04, 3:35 p.m.",
      "commitNameOld": "a9080cf8b1b3d6b3bdf1f3a6e68b044ffc035153",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 25.68,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "\t@Override public void visit(final MethodDeclaration n, final A arg) {\n\t\tvisitComment(n.getComment(), arg);\n\t\tvisitAnnotations(n, arg);\n\t\tif (n.getTypeParameters() !\u003d null) {\n\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n\t\t\t\tt.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tn.getElementType().accept(this, arg);\n\t\tn.getNameExpr().accept(this, arg);\n\t\tif (n.getParameters() !\u003d null) {\n\t\t\tfor (final Parameter p : n.getParameters()) {\n\t\t\t\tp.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getThrows() !\u003d null) {\n\t\t\tfor (final ReferenceType name : n.getThrows()) {\n\t\t\t\tname.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getBody() !\u003d null) {\n\t\t\tn.getBody().accept(this, arg);\n\t\t}\n\t}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 486,
      "functionName": "visit",
      "diff": "@@ -1,24 +1,24 @@\n \t@Override public void visit(final MethodDeclaration n, final A arg) {\n \t\tvisitComment(n.getComment(), arg);\n \t\tvisitAnnotations(n, arg);\n \t\tif (n.getTypeParameters() !\u003d null) {\n \t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n \t\t\t\tt.accept(this, arg);\n \t\t\t}\n \t\t}\n-\t\tn.getType().accept(this, arg);\n+\t\tn.getElementType().accept(this, arg);\n \t\tn.getNameExpr().accept(this, arg);\n \t\tif (n.getParameters() !\u003d null) {\n \t\t\tfor (final Parameter p : n.getParameters()) {\n \t\t\t\tp.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getThrows() !\u003d null) {\n \t\t\tfor (final ReferenceType name : n.getThrows()) {\n \t\t\t\tname.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getBody() !\u003d null) {\n \t\t\tn.getBody().accept(this, arg);\n \t\t}\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ea6d17cb087d5b7b0b0a8a2ad4dad35fce4ae144": {
      "type": "Ybodychange",
      "commitMessage": "Visitor improvements (#444)\n\n* Visit comments everywhere\r\n* Implement lambda portion of the visitors",
      "commitDate": "2016-09-04, 2:44 p.m.",
      "commitName": "ea6d17cb087d5b7b0b0a8a2ad4dad35fce4ae144",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2016-09-04, 2:17 p.m.",
      "commitNameOld": "bb5ff94cff01665ddf58e3ca9a1369492340fe4b",
      "commitAuthorOld": "Danny van Bruggen",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "\t@Override public void visit(final MethodDeclaration n, final A arg) {\n\t\tvisitComment(n.getComment(), arg);\n\t\tvisitAnnotations(n, arg);\n\t\tif (n.getTypeParameters() !\u003d null) {\n\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n\t\t\t\tt.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tn.getType().accept(this, arg);\n\t\tn.getNameExpr().accept(this, arg);\n\t\tif (n.getParameters() !\u003d null) {\n\t\t\tfor (final Parameter p : n.getParameters()) {\n\t\t\t\tp.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getThrows() !\u003d null) {\n\t\t\tfor (final ReferenceType name : n.getThrows()) {\n\t\t\t\tname.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getBody() !\u003d null) {\n\t\t\tn.getBody().accept(this, arg);\n\t\t}\n\t}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 526,
      "functionName": "visit",
      "diff": "@@ -1,27 +1,24 @@\n \t@Override public void visit(final MethodDeclaration n, final A arg) {\n \t\tvisitComment(n.getComment(), arg);\n-\t\tif (n.getJavaDoc() !\u003d null) {\n-\t\t\tn.getJavaDoc().accept(this, arg);\n-\t\t}\n \t\tvisitAnnotations(n, arg);\n \t\tif (n.getTypeParameters() !\u003d null) {\n \t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n \t\t\t\tt.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tn.getType().accept(this, arg);\n \t\tn.getNameExpr().accept(this, arg);\n \t\tif (n.getParameters() !\u003d null) {\n \t\t\tfor (final Parameter p : n.getParameters()) {\n \t\t\t\tp.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getThrows() !\u003d null) {\n \t\t\tfor (final ReferenceType name : n.getThrows()) {\n \t\t\t\tname.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getBody() !\u003d null) {\n \t\t\tn.getBody().accept(this, arg);\n \t\t}\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bb5ff94cff01665ddf58e3ca9a1369492340fe4b": {
      "type": "Ybodychange",
      "commitMessage": "Issue 430 clean up annotation handling (#440)\n\n* Add missing scenario line\r\n* Give PrimitiveType a \"complete constructor\" with all fields\r\n* Finish fixing annotations in CloneVisitor\r\n* Move wiki samples out of the main junit dir\r\n* Fix DumpVisitor\r\n* Fix annotations for EqualsVisitor\r\n* Fix annotations for GenericVisitorAdapter\r\n* Fix annotations for ModifierVisitorAdapter\r\n* Let PackageDeclaration use the NodeWithAnnotations interface too\r\n* Visit annotations everywhere\r\n* Visit array index annotations everywhere",
      "commitDate": "2016-09-04, 2:17 p.m.",
      "commitName": "bb5ff94cff01665ddf58e3ca9a1369492340fe4b",
      "commitAuthor": "Danny van Bruggen",
      "commitDateOld": "2016-08-19, 3:39 p.m.",
      "commitNameOld": "9985c47e3b2a6ce9b434e787a2a035e2a7aadb4a",
      "commitAuthorOld": "matozoid",
      "daysBetweenCommits": 15.94,
      "commitsBetweenForRepo": 33,
      "commitsBetweenForFile": 1,
      "actualSource": "\t@Override public void visit(final MethodDeclaration n, final A arg) {\n\t\tvisitComment(n.getComment(), arg);\n\t\tif (n.getJavaDoc() !\u003d null) {\n\t\t\tn.getJavaDoc().accept(this, arg);\n\t\t}\n\t\tvisitAnnotations(n, arg);\n\t\tif (n.getTypeParameters() !\u003d null) {\n\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n\t\t\t\tt.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tn.getType().accept(this, arg);\n\t\tn.getNameExpr().accept(this, arg);\n\t\tif (n.getParameters() !\u003d null) {\n\t\t\tfor (final Parameter p : n.getParameters()) {\n\t\t\t\tp.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getThrows() !\u003d null) {\n\t\t\tfor (final ReferenceType name : n.getThrows()) {\n\t\t\t\tname.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getBody() !\u003d null) {\n\t\t\tn.getBody().accept(this, arg);\n\t\t}\n\t}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 559,
      "functionName": "visit",
      "diff": "@@ -1,31 +1,27 @@\n \t@Override public void visit(final MethodDeclaration n, final A arg) {\n \t\tvisitComment(n.getComment(), arg);\n \t\tif (n.getJavaDoc() !\u003d null) {\n \t\t\tn.getJavaDoc().accept(this, arg);\n \t\t}\n-\t\tif (n.getAnnotations() !\u003d null) {\n-\t\t\tfor (final AnnotationExpr a : n.getAnnotations()) {\n-\t\t\t\ta.accept(this, arg);\n-\t\t\t}\n-\t\t}\n+\t\tvisitAnnotations(n, arg);\n \t\tif (n.getTypeParameters() !\u003d null) {\n \t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n \t\t\t\tt.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tn.getType().accept(this, arg);\n \t\tn.getNameExpr().accept(this, arg);\n \t\tif (n.getParameters() !\u003d null) {\n \t\t\tfor (final Parameter p : n.getParameters()) {\n \t\t\t\tp.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getThrows() !\u003d null) {\n \t\t\tfor (final ReferenceType name : n.getThrows()) {\n \t\t\t\tname.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getBody() !\u003d null) {\n \t\t\tn.getBody().accept(this, arg);\n \t\t}\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ef5f06ebff5e0beeb05f611a5f107452afb51457": {
      "type": "Ybodychange",
      "commitMessage": "Visit child NameExprs\n",
      "commitDate": "2016-04-13, 3:17 a.m.",
      "commitName": "ef5f06ebff5e0beeb05f611a5f107452afb51457",
      "commitAuthor": "James Clause",
      "commitDateOld": "2016-04-07, 12:53 p.m.",
      "commitNameOld": "be7603e190dfbbb7e4985b5d0ff560fc979dbdc6",
      "commitAuthorOld": "JaviRpo",
      "daysBetweenCommits": 5.6,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "\t@Override public void visit(final MethodDeclaration n, final A arg) {\n\t\tvisitComment(n.getComment(), arg);\n\t\tif (n.getJavaDoc() !\u003d null) {\n\t\t\tn.getJavaDoc().accept(this, arg);\n\t\t}\n\t\tif (n.getAnnotations() !\u003d null) {\n\t\t\tfor (final AnnotationExpr a : n.getAnnotations()) {\n\t\t\t\ta.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getTypeParameters() !\u003d null) {\n\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n\t\t\t\tt.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tn.getType().accept(this, arg);\n\t\tn.getNameExpr().accept(this, arg);\n\t\tif (n.getParameters() !\u003d null) {\n\t\t\tfor (final Parameter p : n.getParameters()) {\n\t\t\t\tp.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getThrows() !\u003d null) {\n\t\t\tfor (final ReferenceType name : n.getThrows()) {\n\t\t\t\tname.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getBody() !\u003d null) {\n\t\t\tn.getBody().accept(this, arg);\n\t\t}\n\t}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 536,
      "functionName": "visit",
      "diff": "@@ -1,30 +1,31 @@\n \t@Override public void visit(final MethodDeclaration n, final A arg) {\n \t\tvisitComment(n.getComment(), arg);\n \t\tif (n.getJavaDoc() !\u003d null) {\n \t\t\tn.getJavaDoc().accept(this, arg);\n \t\t}\n \t\tif (n.getAnnotations() !\u003d null) {\n \t\t\tfor (final AnnotationExpr a : n.getAnnotations()) {\n \t\t\t\ta.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getTypeParameters() !\u003d null) {\n \t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n \t\t\t\tt.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tn.getType().accept(this, arg);\n+\t\tn.getNameExpr().accept(this, arg);\n \t\tif (n.getParameters() !\u003d null) {\n \t\t\tfor (final Parameter p : n.getParameters()) {\n \t\t\t\tp.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getThrows() !\u003d null) {\n \t\t\tfor (final ReferenceType name : n.getThrows()) {\n \t\t\t\tname.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getBody() !\u003d null) {\n \t\t\tn.getBody().accept(this, arg);\n \t\t}\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "55af70e70d0124b8319f3e1d1809fafbebc68e7d": {
      "type": "Ybodychange",
      "commitMessage": "adapt all the codebase to the change of type of MethodDeclaration.throws\n",
      "commitDate": "2015-11-30, 4:04 a.m.",
      "commitName": "55af70e70d0124b8319f3e1d1809fafbebc68e7d",
      "commitAuthor": "Federico Tomassetti",
      "commitDateOld": "2015-11-30, 3:09 a.m.",
      "commitNameOld": "97a48fb7ea63b76ec41420a91c5b697ffeb82504",
      "commitAuthorOld": "Federico Tomassetti",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "\t@Override public void visit(final MethodDeclaration n, final A arg) {\n\t\tvisitComment(n.getComment(), arg);\n\t\tif (n.getJavaDoc() !\u003d null) {\n\t\t\tn.getJavaDoc().accept(this, arg);\n\t\t}\n\t\tif (n.getAnnotations() !\u003d null) {\n\t\t\tfor (final AnnotationExpr a : n.getAnnotations()) {\n\t\t\t\ta.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getTypeParameters() !\u003d null) {\n\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n\t\t\t\tt.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tn.getType().accept(this, arg);\n\t\tif (n.getParameters() !\u003d null) {\n\t\t\tfor (final Parameter p : n.getParameters()) {\n\t\t\t\tp.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getThrows() !\u003d null) {\n\t\t\tfor (final ReferenceType name : n.getThrows()) {\n\t\t\t\tname.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getBody() !\u003d null) {\n\t\t\tn.getBody().accept(this, arg);\n\t\t}\n\t}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 540,
      "functionName": "visit",
      "diff": "@@ -1,30 +1,30 @@\n \t@Override public void visit(final MethodDeclaration n, final A arg) {\n \t\tvisitComment(n.getComment(), arg);\n \t\tif (n.getJavaDoc() !\u003d null) {\n \t\t\tn.getJavaDoc().accept(this, arg);\n \t\t}\n \t\tif (n.getAnnotations() !\u003d null) {\n \t\t\tfor (final AnnotationExpr a : n.getAnnotations()) {\n \t\t\t\ta.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getTypeParameters() !\u003d null) {\n \t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n \t\t\t\tt.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tn.getType().accept(this, arg);\n \t\tif (n.getParameters() !\u003d null) {\n \t\t\tfor (final Parameter p : n.getParameters()) {\n \t\t\t\tp.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getThrows() !\u003d null) {\n-\t\t\tfor (final NameExpr name : n.getThrows()) {\n+\t\t\tfor (final ReferenceType name : n.getThrows()) {\n \t\t\t\tname.accept(this, arg);\n \t\t\t}\n \t\t}\n \t\tif (n.getBody() !\u003d null) {\n \t\t\tn.getBody().accept(this, arg);\n \t\t}\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "df6c84c0a13f505da7fd0f64626fb5d18fd49619": {
      "type": "Yfilerename",
      "commitMessage": "#74 Change package name and maven co-ordinates\n",
      "commitDate": "2014-12-10, 9:37 a.m.",
      "commitName": "df6c84c0a13f505da7fd0f64626fb5d18fd49619",
      "commitAuthor": "Nicholas Smith",
      "commitDateOld": "2014-11-28, 9:49 a.m.",
      "commitNameOld": "7cb02747c0e6d0a701b5cdb7ecd22c05e00f6da4",
      "commitAuthorOld": "Nicholas Smith",
      "daysBetweenCommits": 11.99,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\t@Override public void visit(final MethodDeclaration n, final A arg) {\n\t\tvisitComment(n.getComment(), arg);\n\t\tif (n.getJavaDoc() !\u003d null) {\n\t\t\tn.getJavaDoc().accept(this, arg);\n\t\t}\n\t\tif (n.getAnnotations() !\u003d null) {\n\t\t\tfor (final AnnotationExpr a : n.getAnnotations()) {\n\t\t\t\ta.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getTypeParameters() !\u003d null) {\n\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n\t\t\t\tt.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tn.getType().accept(this, arg);\n\t\tif (n.getParameters() !\u003d null) {\n\t\t\tfor (final Parameter p : n.getParameters()) {\n\t\t\t\tp.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getThrows() !\u003d null) {\n\t\t\tfor (final NameExpr name : n.getThrows()) {\n\t\t\t\tname.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getBody() !\u003d null) {\n\t\t\tn.getBody().accept(this, arg);\n\t\t}\n\t}",
      "path": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 543,
      "functionName": "visit",
      "diff": "",
      "extendedDetails": {
        "oldPath": "javaparser-core/src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
        "newPath": "javaparser-core/src/main/java/com/github/javaparser/ast/visitor/VoidVisitorAdapter.java"
      }
    },
    "c992b2206b0882195e8cc68ae9d55c43ec015111": {
      "type": "Yfilerename",
      "commitMessage": "#71 use ratified module names\n",
      "commitDate": "2014-11-26, 9:29 a.m.",
      "commitName": "c992b2206b0882195e8cc68ae9d55c43ec015111",
      "commitAuthor": "Nicholas Smith",
      "commitDateOld": "2014-11-26, 6:35 a.m.",
      "commitNameOld": "614a666fc0f7649c7053d22d9da1ae7864d0bf80",
      "commitAuthorOld": "Nicholas Smith",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\t@Override public void visit(final MethodDeclaration n, final A arg) {\n\t\tvisitComment(n.getComment(), arg);\n\t\tif (n.getJavaDoc() !\u003d null) {\n\t\t\tn.getJavaDoc().accept(this, arg);\n\t\t}\n\t\tif (n.getAnnotations() !\u003d null) {\n\t\t\tfor (final AnnotationExpr a : n.getAnnotations()) {\n\t\t\t\ta.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getTypeParameters() !\u003d null) {\n\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n\t\t\t\tt.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tn.getType().accept(this, arg);\n\t\tif (n.getParameters() !\u003d null) {\n\t\t\tfor (final Parameter p : n.getParameters()) {\n\t\t\t\tp.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getThrows() !\u003d null) {\n\t\t\tfor (final NameExpr name : n.getThrows()) {\n\t\t\t\tname.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getBody() !\u003d null) {\n\t\t\tn.getBody().accept(this, arg);\n\t\t}\n\t}",
      "path": "javaparser-core/src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 543,
      "functionName": "visit",
      "diff": "",
      "extendedDetails": {
        "oldPath": "japa/src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
        "newPath": "javaparser-core/src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java"
      }
    },
    "0bf897c19251e2d4ada7611e47176fbbef1750ad": {
      "type": "Yfilerename",
      "commitMessage": "Revised prototype #71\n",
      "commitDate": "2014-10-01, 5:31 a.m.",
      "commitName": "0bf897c19251e2d4ada7611e47176fbbef1750ad",
      "commitAuthor": "Nicholas Smith",
      "commitDateOld": "2014-09-24, 8:23 a.m.",
      "commitNameOld": "13430511004f1deead30b60a4fbd3c538081d5e9",
      "commitAuthorOld": "Nicholas Smith",
      "daysBetweenCommits": 6.88,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\t@Override public void visit(final MethodDeclaration n, final A arg) {\n\t\tvisitComment(n.getComment(), arg);\n\t\tif (n.getJavaDoc() !\u003d null) {\n\t\t\tn.getJavaDoc().accept(this, arg);\n\t\t}\n\t\tif (n.getAnnotations() !\u003d null) {\n\t\t\tfor (final AnnotationExpr a : n.getAnnotations()) {\n\t\t\t\ta.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getTypeParameters() !\u003d null) {\n\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n\t\t\t\tt.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tn.getType().accept(this, arg);\n\t\tif (n.getParameters() !\u003d null) {\n\t\t\tfor (final Parameter p : n.getParameters()) {\n\t\t\t\tp.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getThrows() !\u003d null) {\n\t\t\tfor (final NameExpr name : n.getThrows()) {\n\t\t\t\tname.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getBody() !\u003d null) {\n\t\t\tn.getBody().accept(this, arg);\n\t\t}\n\t}",
      "path": "japa/src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 543,
      "functionName": "visit",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
        "newPath": "japa/src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java"
      }
    },
    "40dc8d37c07dc624780d215bd1ff3e00878fe9c5": {
      "type": "Ymultichange(Ybodychange,Yparametermetachange)",
      "commitMessage": "* Remove lots of non-utf8 characters from source\n* Add Reader support to JavaParser\n",
      "commitDate": "2011-10-31, 4:55 p.m.",
      "commitName": "40dc8d37c07dc624780d215bd1ff3e00878fe9c5",
      "commitAuthor": "matozoid",
      "subchanges": [
        {
          "type": "Ybodychange",
          "commitMessage": "* Remove lots of non-utf8 characters from source\n* Add Reader support to JavaParser\n",
          "commitDate": "2011-10-31, 4:55 p.m.",
          "commitName": "40dc8d37c07dc624780d215bd1ff3e00878fe9c5",
          "commitAuthor": "matozoid",
          "commitDateOld": "2011-10-30, 2:55 p.m.",
          "commitNameOld": "5202f0f5f664b45b792d4910882cec2580e9045c",
          "commitAuthorOld": "matozoid",
          "daysBetweenCommits": 1.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "\t@Override public void visit(final MethodDeclaration n, final A arg) {\n\t\tvisitComment(n.getComment(), arg);\n\t\tif (n.getJavaDoc() !\u003d null) {\n\t\t\tn.getJavaDoc().accept(this, arg);\n\t\t}\n\t\tif (n.getAnnotations() !\u003d null) {\n\t\t\tfor (final AnnotationExpr a : n.getAnnotations()) {\n\t\t\t\ta.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getTypeParameters() !\u003d null) {\n\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n\t\t\t\tt.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tn.getType().accept(this, arg);\n\t\tif (n.getParameters() !\u003d null) {\n\t\t\tfor (final Parameter p : n.getParameters()) {\n\t\t\t\tp.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getThrows() !\u003d null) {\n\t\t\tfor (final NameExpr name : n.getThrows()) {\n\t\t\t\tname.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getBody() !\u003d null) {\n\t\t\tn.getBody().accept(this, arg);\n\t\t}\n\t}",
          "path": "src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
          "functionStartLine": 575,
          "functionName": "visit",
          "diff": "@@ -1,30 +1,30 @@\n-    @Override public void visit(MethodDeclaration n, A arg) {\n-    \tvisitComment(n.getComment(), arg);\n-        if (n.getJavaDoc() !\u003d null) {\n-            n.getJavaDoc().accept(this, arg);\n-        }\n-        if (n.getAnnotations() !\u003d null) {\n-            for (AnnotationExpr a : n.getAnnotations()) {\n-                a.accept(this, arg);\n-            }\n-        }\n-        if (n.getTypeParameters() !\u003d null) {\n-            for (TypeParameter t : n.getTypeParameters()) {\n-                t.accept(this, arg);\n-            }\n-        }\n-        n.getType().accept(this, arg);\n-        if (n.getParameters() !\u003d null) {\n-            for (Parameter p : n.getParameters()) {\n-                p.accept(this, arg);\n-            }\n-        }\n-        if (n.getThrows() !\u003d null) {\n-            for (NameExpr name : n.getThrows()) {\n-                name.accept(this, arg);\n-            }\n-        }\n-        if (n.getBody() !\u003d null) {\n-            n.getBody().accept(this, arg);\n-        }\n-    }\n\\ No newline at end of file\n+\t@Override public void visit(final MethodDeclaration n, final A arg) {\n+\t\tvisitComment(n.getComment(), arg);\n+\t\tif (n.getJavaDoc() !\u003d null) {\n+\t\t\tn.getJavaDoc().accept(this, arg);\n+\t\t}\n+\t\tif (n.getAnnotations() !\u003d null) {\n+\t\t\tfor (final AnnotationExpr a : n.getAnnotations()) {\n+\t\t\t\ta.accept(this, arg);\n+\t\t\t}\n+\t\t}\n+\t\tif (n.getTypeParameters() !\u003d null) {\n+\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n+\t\t\t\tt.accept(this, arg);\n+\t\t\t}\n+\t\t}\n+\t\tn.getType().accept(this, arg);\n+\t\tif (n.getParameters() !\u003d null) {\n+\t\t\tfor (final Parameter p : n.getParameters()) {\n+\t\t\t\tp.accept(this, arg);\n+\t\t\t}\n+\t\t}\n+\t\tif (n.getThrows() !\u003d null) {\n+\t\t\tfor (final NameExpr name : n.getThrows()) {\n+\t\t\t\tname.accept(this, arg);\n+\t\t\t}\n+\t\t}\n+\t\tif (n.getBody() !\u003d null) {\n+\t\t\tn.getBody().accept(this, arg);\n+\t\t}\n+\t}\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "* Remove lots of non-utf8 characters from source\n* Add Reader support to JavaParser\n",
          "commitDate": "2011-10-31, 4:55 p.m.",
          "commitName": "40dc8d37c07dc624780d215bd1ff3e00878fe9c5",
          "commitAuthor": "matozoid",
          "commitDateOld": "2011-10-30, 2:55 p.m.",
          "commitNameOld": "5202f0f5f664b45b792d4910882cec2580e9045c",
          "commitAuthorOld": "matozoid",
          "daysBetweenCommits": 1.08,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "\t@Override public void visit(final MethodDeclaration n, final A arg) {\n\t\tvisitComment(n.getComment(), arg);\n\t\tif (n.getJavaDoc() !\u003d null) {\n\t\t\tn.getJavaDoc().accept(this, arg);\n\t\t}\n\t\tif (n.getAnnotations() !\u003d null) {\n\t\t\tfor (final AnnotationExpr a : n.getAnnotations()) {\n\t\t\t\ta.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getTypeParameters() !\u003d null) {\n\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n\t\t\t\tt.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tn.getType().accept(this, arg);\n\t\tif (n.getParameters() !\u003d null) {\n\t\t\tfor (final Parameter p : n.getParameters()) {\n\t\t\t\tp.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getThrows() !\u003d null) {\n\t\t\tfor (final NameExpr name : n.getThrows()) {\n\t\t\t\tname.accept(this, arg);\n\t\t\t}\n\t\t}\n\t\tif (n.getBody() !\u003d null) {\n\t\t\tn.getBody().accept(this, arg);\n\t\t}\n\t}",
          "path": "src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
          "functionStartLine": 575,
          "functionName": "visit",
          "diff": "@@ -1,30 +1,30 @@\n-    @Override public void visit(MethodDeclaration n, A arg) {\n-    \tvisitComment(n.getComment(), arg);\n-        if (n.getJavaDoc() !\u003d null) {\n-            n.getJavaDoc().accept(this, arg);\n-        }\n-        if (n.getAnnotations() !\u003d null) {\n-            for (AnnotationExpr a : n.getAnnotations()) {\n-                a.accept(this, arg);\n-            }\n-        }\n-        if (n.getTypeParameters() !\u003d null) {\n-            for (TypeParameter t : n.getTypeParameters()) {\n-                t.accept(this, arg);\n-            }\n-        }\n-        n.getType().accept(this, arg);\n-        if (n.getParameters() !\u003d null) {\n-            for (Parameter p : n.getParameters()) {\n-                p.accept(this, arg);\n-            }\n-        }\n-        if (n.getThrows() !\u003d null) {\n-            for (NameExpr name : n.getThrows()) {\n-                name.accept(this, arg);\n-            }\n-        }\n-        if (n.getBody() !\u003d null) {\n-            n.getBody().accept(this, arg);\n-        }\n-    }\n\\ No newline at end of file\n+\t@Override public void visit(final MethodDeclaration n, final A arg) {\n+\t\tvisitComment(n.getComment(), arg);\n+\t\tif (n.getJavaDoc() !\u003d null) {\n+\t\t\tn.getJavaDoc().accept(this, arg);\n+\t\t}\n+\t\tif (n.getAnnotations() !\u003d null) {\n+\t\t\tfor (final AnnotationExpr a : n.getAnnotations()) {\n+\t\t\t\ta.accept(this, arg);\n+\t\t\t}\n+\t\t}\n+\t\tif (n.getTypeParameters() !\u003d null) {\n+\t\t\tfor (final TypeParameter t : n.getTypeParameters()) {\n+\t\t\t\tt.accept(this, arg);\n+\t\t\t}\n+\t\t}\n+\t\tn.getType().accept(this, arg);\n+\t\tif (n.getParameters() !\u003d null) {\n+\t\t\tfor (final Parameter p : n.getParameters()) {\n+\t\t\t\tp.accept(this, arg);\n+\t\t\t}\n+\t\t}\n+\t\tif (n.getThrows() !\u003d null) {\n+\t\t\tfor (final NameExpr name : n.getThrows()) {\n+\t\t\t\tname.accept(this, arg);\n+\t\t\t}\n+\t\t}\n+\t\tif (n.getBody() !\u003d null) {\n+\t\t\tn.getBody().accept(this, arg);\n+\t\t}\n+\t}\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[n-MethodDeclaration, arg-A]",
            "newValue": "[n-MethodDeclaration(modifiers-final), arg-A(modifiers-final)]"
          }
        }
      ]
    },
    "d3db3f06220a1d0091a5cda602f13dcdc8db3040": {
      "type": "Ybodychange",
      "commitMessage": "* http://code.google.com/p/javaparser/issues/detail?id\u003d9#c23: Here are the corresponding changes for using Shelby\u0027s solution with the VoidVisitorAdapter. Alternatively, users can extend \u0026 override every public visit() method of the VoidVisitorAdapter class to also accept() the node\u0027s comment.\n",
      "commitDate": "2011-10-30, 1:32 p.m.",
      "commitName": "d3db3f06220a1d0091a5cda602f13dcdc8db3040",
      "commitAuthor": "matozoid",
      "commitDateOld": "2011-10-30, 9:40 a.m.",
      "commitNameOld": "43e6f7bfbcd77b61232cc9f3e166795e47bad04b",
      "commitAuthorOld": "matozoid",
      "daysBetweenCommits": 0.16,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "    public void visit(MethodDeclaration n, A arg) {\n    \tvisitComment(n.getComment(), arg);\n        if (n.getJavaDoc() !\u003d null) {\n            n.getJavaDoc().accept(this, arg);\n        }\n        if (n.getAnnotations() !\u003d null) {\n            for (AnnotationExpr a : n.getAnnotations()) {\n                a.accept(this, arg);\n            }\n        }\n        if (n.getTypeParameters() !\u003d null) {\n            for (TypeParameter t : n.getTypeParameters()) {\n                t.accept(this, arg);\n            }\n        }\n        n.getType().accept(this, arg);\n        if (n.getParameters() !\u003d null) {\n            for (Parameter p : n.getParameters()) {\n                p.accept(this, arg);\n            }\n        }\n        if (n.getThrows() !\u003d null) {\n            for (NameExpr name : n.getThrows()) {\n                name.accept(this, arg);\n            }\n        }\n        if (n.getBody() !\u003d null) {\n            n.getBody().accept(this, arg);\n        }\n    }",
      "path": "src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 575,
      "functionName": "visit",
      "diff": "@@ -1,29 +1,30 @@\n     public void visit(MethodDeclaration n, A arg) {\n+    \tvisitComment(n.getComment(), arg);\n         if (n.getJavaDoc() !\u003d null) {\n             n.getJavaDoc().accept(this, arg);\n         }\n         if (n.getAnnotations() !\u003d null) {\n             for (AnnotationExpr a : n.getAnnotations()) {\n                 a.accept(this, arg);\n             }\n         }\n         if (n.getTypeParameters() !\u003d null) {\n             for (TypeParameter t : n.getTypeParameters()) {\n                 t.accept(this, arg);\n             }\n         }\n         n.getType().accept(this, arg);\n         if (n.getParameters() !\u003d null) {\n             for (Parameter p : n.getParameters()) {\n                 p.accept(this, arg);\n             }\n         }\n         if (n.getThrows() !\u003d null) {\n             for (NameExpr name : n.getThrows()) {\n                 name.accept(this, arg);\n             }\n         }\n         if (n.getBody() !\u003d null) {\n             n.getBody().accept(this, arg);\n         }\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "43e6f7bfbcd77b61232cc9f3e166795e47bad04b": {
      "type": "Yfilerename",
      "commitMessage": "* Add latest code from \"mavenized\" branch.\n",
      "commitDate": "2011-10-30, 9:40 a.m.",
      "commitName": "43e6f7bfbcd77b61232cc9f3e166795e47bad04b",
      "commitAuthor": "matozoid",
      "commitDateOld": "2011-10-30, 9:37 a.m.",
      "commitNameOld": "5e5a850b946252906db421cafec7b1e3e03ba3fa",
      "commitAuthorOld": "matozoid",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    public void visit(MethodDeclaration n, A arg) {\n        if (n.getJavaDoc() !\u003d null) {\n            n.getJavaDoc().accept(this, arg);\n        }\n        if (n.getAnnotations() !\u003d null) {\n            for (AnnotationExpr a : n.getAnnotations()) {\n                a.accept(this, arg);\n            }\n        }\n        if (n.getTypeParameters() !\u003d null) {\n            for (TypeParameter t : n.getTypeParameters()) {\n                t.accept(this, arg);\n            }\n        }\n        n.getType().accept(this, arg);\n        if (n.getParameters() !\u003d null) {\n            for (Parameter p : n.getParameters()) {\n                p.accept(this, arg);\n            }\n        }\n        if (n.getThrows() !\u003d null) {\n            for (NameExpr name : n.getThrows()) {\n                name.accept(this, arg);\n            }\n        }\n        if (n.getBody() !\u003d null) {\n            n.getBody().accept(this, arg);\n        }\n    }",
      "path": "src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 524,
      "functionName": "visit",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/japa/parser/ast/visitor/VoidVisitorAdapter.java",
        "newPath": "src/main/java/japa/parser/ast/visitor/VoidVisitorAdapter.java"
      }
    },
    "2d4decafdf373c4d1cabd9c6f8a97707c72069ff": {
      "type": "Yintroduced",
      "commitMessage": "* Version 1.0.6\n",
      "commitDate": "2011-10-30, 9:35 a.m.",
      "commitName": "2d4decafdf373c4d1cabd9c6f8a97707c72069ff",
      "commitAuthor": "matozoid",
      "diff": "@@ -0,0 +1,29 @@\n+    public void visit(MethodDeclaration n, A arg) {\n+        if (n.getJavaDoc() !\u003d null) {\n+            n.getJavaDoc().accept(this, arg);\n+        }\n+        if (n.getAnnotations() !\u003d null) {\n+            for (AnnotationExpr a : n.getAnnotations()) {\n+                a.accept(this, arg);\n+            }\n+        }\n+        if (n.getTypeParameters() !\u003d null) {\n+            for (TypeParameter t : n.getTypeParameters()) {\n+                t.accept(this, arg);\n+            }\n+        }\n+        n.getType().accept(this, arg);\n+        if (n.getParameters() !\u003d null) {\n+            for (Parameter p : n.getParameters()) {\n+                p.accept(this, arg);\n+            }\n+        }\n+        if (n.getThrows() !\u003d null) {\n+            for (NameExpr name : n.getThrows()) {\n+                name.accept(this, arg);\n+            }\n+        }\n+        if (n.getBody() !\u003d null) {\n+            n.getBody().accept(this, arg);\n+        }\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public void visit(MethodDeclaration n, A arg) {\n        if (n.getJavaDoc() !\u003d null) {\n            n.getJavaDoc().accept(this, arg);\n        }\n        if (n.getAnnotations() !\u003d null) {\n            for (AnnotationExpr a : n.getAnnotations()) {\n                a.accept(this, arg);\n            }\n        }\n        if (n.getTypeParameters() !\u003d null) {\n            for (TypeParameter t : n.getTypeParameters()) {\n                t.accept(this, arg);\n            }\n        }\n        n.getType().accept(this, arg);\n        if (n.getParameters() !\u003d null) {\n            for (Parameter p : n.getParameters()) {\n                p.accept(this, arg);\n            }\n        }\n        if (n.getThrows() !\u003d null) {\n            for (NameExpr name : n.getThrows()) {\n                name.accept(this, arg);\n            }\n        }\n        if (n.getBody() !\u003d null) {\n            n.getBody().accept(this, arg);\n        }\n    }",
      "path": "src/japa/parser/ast/visitor/VoidVisitorAdapter.java",
      "functionStartLine": 524,
      "functionName": "visit"
    }
  }
}