{
  "origin": "codeshovel",
  "repositoryName": "commons-lang",
  "repositoryPath": "H:\\Projects\\apache\\commons-lang/.git",
  "startCommitName": "a36c903d4f1065bc59f5e6d2bb0f9d92a5e71d83",
  "sourceFileName": "RandomStringUtils.java",
  "functionName": "random",
  "functionId": "random___count-int__start-int__end-int__letters-boolean(modifiers-final)__numbers-boolean(modifiers-final)__chars-char[](modifiers-final)__random-Random(modifiers-final)",
  "sourceFilePath": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
  "functionStartLine": 348,
  "functionEndLine": 425,
  "numCommitsSeen": 95,
  "timeTaken": 2281,
  "changeHistory": [
    "88654b79c92386b7c411f064cc373e7698a49449",
    "c82b1f062af2a1a376e514020707597f6ed1f82d",
    "30c85ad05363767deeefee577063c2c432b971d4",
    "f643b4fa939e89348618ddffae20a804f4461363",
    "695342cb1cef42f30fd1a8496f181c92b21ae82d",
    "15b80753a6e8f481ea5029bc278e362994cb7bee",
    "5292526e476ffbb19c6613a98464054236c86ace",
    "5bd622dab027ef37001a630a7c825c5b8c19d1db",
    "4a65cb8da23d6667ac6f91775309b4da9b315d95",
    "27bcbcc728434ffb2c45e81c0e75e6a3d6da3441",
    "371e866442f46131cc38a9a5018e1703f52f9b60",
    "fc5c081e22a61bb5a6810af302be3f22f7966df4",
    "debc02c6d9b94c717b4182ae4dd7a97d47293a52",
    "b01434196523fc67daa5d9379c4465b68961fd53",
    "c79adcc3f0b99cb838155909a989fbd7bd71e600",
    "43db5237ab2a2dbc3a79daed10499bb4dbf92a4e",
    "e81e45f27fb6b3b4d82baa473e90e49d0317b77a",
    "8f45918465c1c992d55fe08f2d7e49689b722b38",
    "3ac32dd142df1d1e0a5a36f224dcc73b1fa066e5",
    "d9bc18e804bf754b8cc11c4ce61a5dc1b9cda242",
    "6627f7ad8fb08d6c23b83d6c9f0a6830e9e7085a"
  ],
  "changeHistoryShort": {
    "88654b79c92386b7c411f064cc373e7698a49449": "Ybodychange",
    "c82b1f062af2a1a376e514020707597f6ed1f82d": "Ybodychange",
    "30c85ad05363767deeefee577063c2c432b971d4": "Ybodychange",
    "f643b4fa939e89348618ddffae20a804f4461363": "Ybodychange",
    "695342cb1cef42f30fd1a8496f181c92b21ae82d": "Ybodychange",
    "15b80753a6e8f481ea5029bc278e362994cb7bee": "Ybodychange",
    "5292526e476ffbb19c6613a98464054236c86ace": "Ybodychange",
    "5bd622dab027ef37001a630a7c825c5b8c19d1db": "Yparametermetachange",
    "4a65cb8da23d6667ac6f91775309b4da9b315d95": "Ybodychange",
    "27bcbcc728434ffb2c45e81c0e75e6a3d6da3441": "Ybodychange",
    "371e866442f46131cc38a9a5018e1703f52f9b60": "Ybodychange",
    "fc5c081e22a61bb5a6810af302be3f22f7966df4": "Yfilerename",
    "debc02c6d9b94c717b4182ae4dd7a97d47293a52": "Yfilerename",
    "b01434196523fc67daa5d9379c4465b68961fd53": "Ybodychange",
    "c79adcc3f0b99cb838155909a989fbd7bd71e600": "Ybodychange",
    "43db5237ab2a2dbc3a79daed10499bb4dbf92a4e": "Ymultichange(Yparameterchange,Ybodychange)",
    "e81e45f27fb6b3b4d82baa473e90e49d0317b77a": "Ybodychange",
    "8f45918465c1c992d55fe08f2d7e49689b722b38": "Ybodychange",
    "3ac32dd142df1d1e0a5a36f224dcc73b1fa066e5": "Ybodychange",
    "d9bc18e804bf754b8cc11c4ce61a5dc1b9cda242": "Ymultichange(Yparameterchange,Ybodychange)",
    "6627f7ad8fb08d6c23b83d6c9f0a6830e9e7085a": "Yintroduced"
  },
  "changeHistoryDetails": {
    "88654b79c92386b7c411f064cc373e7698a49449": {
      "type": "Ybodychange",
      "commitMessage": "Use final.",
      "commitDate": "2017-10-20, 3:02 p.m.",
      "commitName": "88654b79c92386b7c411f064cc373e7698a49449",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "2017-07-28, 12:26 p.m.",
      "commitNameOld": "daeed97201c060563c9509e7d63b23094cb31664",
      "commitAuthorOld": "pascalschumacher",
      "daysBetweenCommits": 84.11,
      "commitsBetweenForRepo": 52,
      "commitsBetweenForFile": 1,
      "actualSource": "    public static String random(int count, int start, int end, final boolean letters, final boolean numbers,\n                                final char[] chars, final Random random) {\n        if (count \u003d\u003d 0) {\n            return StringUtils.EMPTY;\n        } else if (count \u003c 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n            if (chars !\u003d null) {\n                end \u003d chars.length;\n            } else {\n                if (!letters \u0026\u0026 !numbers) {\n                    end \u003d Character.MAX_CODE_POINT;\n                } else {\n                    end \u003d \u0027z\u0027 + 1;\n                    start \u003d \u0027 \u0027;\n                }\n            }\n        } else {\n            if (end \u003c\u003d start) {\n                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n            }\n        }\n\n        final int zero_digit_ascii \u003d 48;\n        final int first_letter_ascii \u003d 65;\n\n        if (chars \u003d\u003d null \u0026\u0026 (numbers \u0026\u0026 end \u003c\u003d zero_digit_ascii\n                || letters \u0026\u0026 end \u003c\u003d first_letter_ascii)) {\n            throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zero_digit_ascii + \") for generating digits \" +\n                    \"or greater then (\" + first_letter_ascii + \") for generating letters.\");\n        }\n\n        final StringBuilder builder \u003d new StringBuilder(count);\n        final int gap \u003d end - start;\n\n        while (count-- !\u003d 0) {\n            int codePoint;\n            if (chars \u003d\u003d null) {\n                codePoint \u003d random.nextInt(gap) + start;\n\n                switch (Character.getType(codePoint)) {\n                case Character.UNASSIGNED:\n                case Character.PRIVATE_USE:\n                case Character.SURROGATE:\n                    count++;\n                    continue;\n                }\n\n            } else {\n                codePoint \u003d chars[random.nextInt(gap) + start];\n            }\n\n            final int numberOfChars \u003d Character.charCount(codePoint);\n            if (count \u003d\u003d 0 \u0026\u0026 numberOfChars \u003e 1) {\n                count++;\n                continue;\n            }\n\n            if (letters \u0026\u0026 Character.isLetter(codePoint)\n                    || numbers \u0026\u0026 Character.isDigit(codePoint)\n                    || !letters \u0026\u0026 !numbers) {\n                builder.appendCodePoint(codePoint);\n\n                if (numberOfChars \u003d\u003d 2) {\n                    count--;\n                }\n\n            } else {\n                count++;\n            }\n        }\n        return builder.toString();\n    }",
      "path": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
      "functionStartLine": 348,
      "functionName": "random",
      "diff": "@@ -1,78 +1,78 @@\n     public static String random(int count, int start, int end, final boolean letters, final boolean numbers,\n                                 final char[] chars, final Random random) {\n         if (count \u003d\u003d 0) {\n             return StringUtils.EMPTY;\n         } else if (count \u003c 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n         if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"The chars array must not be empty\");\n         }\n \n         if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n             if (chars !\u003d null) {\n                 end \u003d chars.length;\n             } else {\n                 if (!letters \u0026\u0026 !numbers) {\n                     end \u003d Character.MAX_CODE_POINT;\n                 } else {\n                     end \u003d \u0027z\u0027 + 1;\n                     start \u003d \u0027 \u0027;\n                 }\n             }\n         } else {\n             if (end \u003c\u003d start) {\n                 throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n             }\n         }\n \n         final int zero_digit_ascii \u003d 48;\n         final int first_letter_ascii \u003d 65;\n \n         if (chars \u003d\u003d null \u0026\u0026 (numbers \u0026\u0026 end \u003c\u003d zero_digit_ascii\n                 || letters \u0026\u0026 end \u003c\u003d first_letter_ascii)) {\n             throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zero_digit_ascii + \") for generating digits \" +\n                     \"or greater then (\" + first_letter_ascii + \") for generating letters.\");\n         }\n \n-        StringBuilder builder \u003d new StringBuilder(count);\n+        final StringBuilder builder \u003d new StringBuilder(count);\n         final int gap \u003d end - start;\n \n         while (count-- !\u003d 0) {\n             int codePoint;\n             if (chars \u003d\u003d null) {\n                 codePoint \u003d random.nextInt(gap) + start;\n \n                 switch (Character.getType(codePoint)) {\n                 case Character.UNASSIGNED:\n                 case Character.PRIVATE_USE:\n                 case Character.SURROGATE:\n                     count++;\n                     continue;\n                 }\n \n             } else {\n                 codePoint \u003d chars[random.nextInt(gap) + start];\n             }\n \n             final int numberOfChars \u003d Character.charCount(codePoint);\n             if (count \u003d\u003d 0 \u0026\u0026 numberOfChars \u003e 1) {\n                 count++;\n                 continue;\n             }\n \n             if (letters \u0026\u0026 Character.isLetter(codePoint)\n                     || numbers \u0026\u0026 Character.isDigit(codePoint)\n                     || !letters \u0026\u0026 !numbers) {\n                 builder.appendCodePoint(codePoint);\n \n                 if (numberOfChars \u003d\u003d 2) {\n                     count--;\n                 }\n \n             } else {\n                 count++;\n             }\n         }\n         return builder.toString();\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c82b1f062af2a1a376e514020707597f6ed1f82d": {
      "type": "Ybodychange",
      "commitMessage": "PMD: Nested if statements can be combined\n",
      "commitDate": "2017-04-17, 7:02 a.m.",
      "commitName": "c82b1f062af2a1a376e514020707597f6ed1f82d",
      "commitAuthor": "Benedikt Ritter",
      "commitDateOld": "2017-02-16, 1:59 p.m.",
      "commitNameOld": "30c85ad05363767deeefee577063c2c432b971d4",
      "commitAuthorOld": "Sebb",
      "daysBetweenCommits": 59.67,
      "commitsBetweenForRepo": 79,
      "commitsBetweenForFile": 1,
      "actualSource": "    public static String random(int count, int start, int end, final boolean letters, final boolean numbers,\n                                final char[] chars, final Random random) {\n        if (count \u003d\u003d 0) {\n            return StringUtils.EMPTY;\n        } else if (count \u003c 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n            if (chars !\u003d null) {\n                end \u003d chars.length;\n            } else {\n                if (!letters \u0026\u0026 !numbers) {\n                    end \u003d Character.MAX_CODE_POINT;\n                } else {\n                    end \u003d \u0027z\u0027 + 1;\n                    start \u003d \u0027 \u0027;                \n                }\n            }\n        } else {\n            if (end \u003c\u003d start) {\n                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n            }\n        }\n\n        final int zero_digit_ascii \u003d 48;\n        final int first_letter_ascii \u003d 65;\n\n        if (chars \u003d\u003d null \u0026\u0026 (numbers \u0026\u0026 end \u003c\u003d zero_digit_ascii\n                || letters \u0026\u0026 end \u003c\u003d first_letter_ascii)) {\n            throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zero_digit_ascii + \") for generating digits \" +\n                    \"or greater then (\" + first_letter_ascii + \") for generating letters.\");\n        }\n\n        StringBuilder builder \u003d new StringBuilder(count);\n        final int gap \u003d end - start;\n\n        while (count-- !\u003d 0) {\n            int codePoint;\n            if (chars \u003d\u003d null) {\n                codePoint \u003d random.nextInt(gap) + start;\n                \n                switch (Character.getType(codePoint)) {\n                case Character.UNASSIGNED:\n                case Character.PRIVATE_USE:\n                case Character.SURROGATE:\n                    count++;\n                    continue;\n                }\n                \n            } else {\n                codePoint \u003d chars[random.nextInt(gap) + start];\n            }\n            \n            final int numberOfChars \u003d Character.charCount(codePoint);\n            if (count \u003d\u003d 0 \u0026\u0026 numberOfChars \u003e 1) {\n                count++;\n                continue;\n            }\n            \n            if (letters \u0026\u0026 Character.isLetter(codePoint)\n                    || numbers \u0026\u0026 Character.isDigit(codePoint)\n                    || !letters \u0026\u0026 !numbers) {               \n                builder.appendCodePoint(codePoint);\n                \n                if (numberOfChars \u003d\u003d 2) {\n                    count--;\n                }\n                \n            } else {\n                count++;\n            }\n        }\n        return builder.toString();\n    }",
      "path": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
      "functionStartLine": 344,
      "functionName": "random",
      "diff": "@@ -1,80 +1,78 @@\n     public static String random(int count, int start, int end, final boolean letters, final boolean numbers,\n                                 final char[] chars, final Random random) {\n         if (count \u003d\u003d 0) {\n             return StringUtils.EMPTY;\n         } else if (count \u003c 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n         if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"The chars array must not be empty\");\n         }\n \n         if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n             if (chars !\u003d null) {\n                 end \u003d chars.length;\n             } else {\n                 if (!letters \u0026\u0026 !numbers) {\n                     end \u003d Character.MAX_CODE_POINT;\n                 } else {\n                     end \u003d \u0027z\u0027 + 1;\n                     start \u003d \u0027 \u0027;                \n                 }\n             }\n         } else {\n             if (end \u003c\u003d start) {\n                 throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n             }\n         }\n \n         final int zero_digit_ascii \u003d 48;\n         final int first_letter_ascii \u003d 65;\n \n-        if (chars \u003d\u003d null) {\n-            if (numbers \u0026\u0026 end \u003c\u003d zero_digit_ascii\n-                    || letters \u0026\u0026 end \u003c\u003d first_letter_ascii) {\n-                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zero_digit_ascii + \") for generating digits \" +\n-                        \"or greater then (\" + first_letter_ascii + \") for generating letters.\");\n-            }\n+        if (chars \u003d\u003d null \u0026\u0026 (numbers \u0026\u0026 end \u003c\u003d zero_digit_ascii\n+                || letters \u0026\u0026 end \u003c\u003d first_letter_ascii)) {\n+            throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zero_digit_ascii + \") for generating digits \" +\n+                    \"or greater then (\" + first_letter_ascii + \") for generating letters.\");\n         }\n \n         StringBuilder builder \u003d new StringBuilder(count);\n         final int gap \u003d end - start;\n \n         while (count-- !\u003d 0) {\n             int codePoint;\n             if (chars \u003d\u003d null) {\n                 codePoint \u003d random.nextInt(gap) + start;\n                 \n                 switch (Character.getType(codePoint)) {\n                 case Character.UNASSIGNED:\n                 case Character.PRIVATE_USE:\n                 case Character.SURROGATE:\n                     count++;\n                     continue;\n                 }\n                 \n             } else {\n                 codePoint \u003d chars[random.nextInt(gap) + start];\n             }\n             \n             final int numberOfChars \u003d Character.charCount(codePoint);\n             if (count \u003d\u003d 0 \u0026\u0026 numberOfChars \u003e 1) {\n                 count++;\n                 continue;\n             }\n             \n             if (letters \u0026\u0026 Character.isLetter(codePoint)\n                     || numbers \u0026\u0026 Character.isDigit(codePoint)\n                     || !letters \u0026\u0026 !numbers) {               \n                 builder.appendCodePoint(codePoint);\n                 \n                 if (numberOfChars \u003d\u003d 2) {\n                     count--;\n                 }\n                 \n             } else {\n                 count++;\n             }\n         }\n         return builder.toString();\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "30c85ad05363767deeefee577063c2c432b971d4": {
      "type": "Ybodychange",
      "commitMessage": "Use StringBuilders instead of StringBuffers\n\n(A couple of instances were overlooked)\nThis fixes #236",
      "commitDate": "2017-02-16, 1:59 p.m.",
      "commitName": "30c85ad05363767deeefee577063c2c432b971d4",
      "commitAuthor": "Sebb",
      "commitDateOld": "2016-12-14, 3:46 p.m.",
      "commitNameOld": "cdfb2aa1e1ae3029e5d73cb3b5ca90c7df222c8a",
      "commitAuthorOld": "duncan",
      "daysBetweenCommits": 63.93,
      "commitsBetweenForRepo": 31,
      "commitsBetweenForFile": 1,
      "actualSource": "    public static String random(int count, int start, int end, final boolean letters, final boolean numbers,\n                                final char[] chars, final Random random) {\n        if (count \u003d\u003d 0) {\n            return StringUtils.EMPTY;\n        } else if (count \u003c 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n            if (chars !\u003d null) {\n                end \u003d chars.length;\n            } else {\n                if (!letters \u0026\u0026 !numbers) {\n                    end \u003d Character.MAX_CODE_POINT;\n                } else {\n                    end \u003d \u0027z\u0027 + 1;\n                    start \u003d \u0027 \u0027;                \n                }\n            }\n        } else {\n            if (end \u003c\u003d start) {\n                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n            }\n        }\n\n        final int zero_digit_ascii \u003d 48;\n        final int first_letter_ascii \u003d 65;\n\n        if (chars \u003d\u003d null) {\n            if (numbers \u0026\u0026 end \u003c\u003d zero_digit_ascii\n                    || letters \u0026\u0026 end \u003c\u003d first_letter_ascii) {\n                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zero_digit_ascii + \") for generating digits \" +\n                        \"or greater then (\" + first_letter_ascii + \") for generating letters.\");\n            }\n        }\n\n        StringBuilder builder \u003d new StringBuilder(count);\n        final int gap \u003d end - start;\n\n        while (count-- !\u003d 0) {\n            int codePoint;\n            if (chars \u003d\u003d null) {\n                codePoint \u003d random.nextInt(gap) + start;\n                \n                switch (Character.getType(codePoint)) {\n                case Character.UNASSIGNED:\n                case Character.PRIVATE_USE:\n                case Character.SURROGATE:\n                    count++;\n                    continue;\n                }\n                \n            } else {\n                codePoint \u003d chars[random.nextInt(gap) + start];\n            }\n            \n            final int numberOfChars \u003d Character.charCount(codePoint);\n            if (count \u003d\u003d 0 \u0026\u0026 numberOfChars \u003e 1) {\n                count++;\n                continue;\n            }\n            \n            if (letters \u0026\u0026 Character.isLetter(codePoint)\n                    || numbers \u0026\u0026 Character.isDigit(codePoint)\n                    || !letters \u0026\u0026 !numbers) {               \n                builder.appendCodePoint(codePoint);\n                \n                if (numberOfChars \u003d\u003d 2) {\n                    count--;\n                }\n                \n            } else {\n                count++;\n            }\n        }\n        return builder.toString();\n    }",
      "path": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
      "functionStartLine": 344,
      "functionName": "random",
      "diff": "@@ -1,80 +1,80 @@\n     public static String random(int count, int start, int end, final boolean letters, final boolean numbers,\n                                 final char[] chars, final Random random) {\n         if (count \u003d\u003d 0) {\n             return StringUtils.EMPTY;\n         } else if (count \u003c 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n         if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"The chars array must not be empty\");\n         }\n \n         if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n             if (chars !\u003d null) {\n                 end \u003d chars.length;\n             } else {\n                 if (!letters \u0026\u0026 !numbers) {\n                     end \u003d Character.MAX_CODE_POINT;\n                 } else {\n                     end \u003d \u0027z\u0027 + 1;\n                     start \u003d \u0027 \u0027;                \n                 }\n             }\n         } else {\n             if (end \u003c\u003d start) {\n                 throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n             }\n         }\n \n         final int zero_digit_ascii \u003d 48;\n         final int first_letter_ascii \u003d 65;\n \n         if (chars \u003d\u003d null) {\n             if (numbers \u0026\u0026 end \u003c\u003d zero_digit_ascii\n                     || letters \u0026\u0026 end \u003c\u003d first_letter_ascii) {\n                 throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zero_digit_ascii + \") for generating digits \" +\n                         \"or greater then (\" + first_letter_ascii + \") for generating letters.\");\n             }\n         }\n \n-        StringBuffer buffer \u003d new StringBuffer(count);\n+        StringBuilder builder \u003d new StringBuilder(count);\n         final int gap \u003d end - start;\n \n         while (count-- !\u003d 0) {\n             int codePoint;\n             if (chars \u003d\u003d null) {\n                 codePoint \u003d random.nextInt(gap) + start;\n                 \n                 switch (Character.getType(codePoint)) {\n                 case Character.UNASSIGNED:\n                 case Character.PRIVATE_USE:\n                 case Character.SURROGATE:\n                     count++;\n                     continue;\n                 }\n                 \n             } else {\n                 codePoint \u003d chars[random.nextInt(gap) + start];\n             }\n             \n             final int numberOfChars \u003d Character.charCount(codePoint);\n             if (count \u003d\u003d 0 \u0026\u0026 numberOfChars \u003e 1) {\n                 count++;\n                 continue;\n             }\n             \n             if (letters \u0026\u0026 Character.isLetter(codePoint)\n                     || numbers \u0026\u0026 Character.isDigit(codePoint)\n                     || !letters \u0026\u0026 !numbers) {               \n-                buffer.appendCodePoint(codePoint);\n+                builder.appendCodePoint(codePoint);\n                 \n                 if (numberOfChars \u003d\u003d 2) {\n                     count--;\n                 }\n                 \n             } else {\n                 count++;\n             }\n         }\n-        return buffer.toString();\n+        return builder.toString();\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f643b4fa939e89348618ddffae20a804f4461363": {
      "type": "Ybodychange",
      "commitMessage": "Fix for LANG-1286: RandomStringUtils random method can overflow...",
      "commitDate": "2016-12-14, 1:27 a.m.",
      "commitName": "f643b4fa939e89348618ddffae20a804f4461363",
      "commitAuthor": "duncan",
      "commitDateOld": "2016-11-18, 10:51 a.m.",
      "commitNameOld": "695342cb1cef42f30fd1a8496f181c92b21ae82d",
      "commitAuthorOld": "Ivan Morozov",
      "daysBetweenCommits": 25.61,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "actualSource": "    public static String random(int count, int start, int end, final boolean letters, final boolean numbers,\n                                final char[] chars, final Random random) {\n        if (count \u003d\u003d 0) {\n            return StringUtils.EMPTY;\n        } else if (count \u003c 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n            if (chars !\u003d null) {\n                end \u003d chars.length;\n            } else {\n                if (!letters \u0026\u0026 !numbers) {\n                    end \u003d Character.MAX_CODE_POINT;\n                } else {\n                    end \u003d \u0027z\u0027 + 1;\n                    start \u003d \u0027 \u0027;                \n                }\n            }\n        } else {\n            if (end \u003c\u003d start) {\n                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n            }\n        }\n\n        final int zero_digit_ascii \u003d 48;\n        final int first_letter_ascii \u003d 65;\n\n        if (chars \u003d\u003d null) {\n            if (numbers \u0026\u0026 end \u003c\u003d zero_digit_ascii\n                    || letters \u0026\u0026 end \u003c\u003d first_letter_ascii) {\n                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zero_digit_ascii + \") for generating digits \" +\n                        \"or greater then (\" + first_letter_ascii + \") for generating letters.\");\n            }\n        }\n\n        StringBuffer buffer \u003d new StringBuffer(count);\n        final int gap \u003d end - start;\n\n        while (count-- !\u003d 0) {\n            int codePoint;\n            if (chars \u003d\u003d null) {\n                codePoint \u003d random.nextInt(gap) + start;\n                \n                switch (Character.getType(codePoint)) {\n                case Character.UNASSIGNED:\n                case Character.PRIVATE_USE:\n                case Character.SURROGATE:\n                    count++;\n                    continue;\n                }\n                \n            } else {\n                codePoint \u003d chars[random.nextInt(gap) + start];\n            }\n            \n            final int numberOfChars \u003d Character.charCount(codePoint);\n            if (count \u003d\u003d 0 \u0026\u0026 numberOfChars \u003e 1) {\n                count++;\n                continue;\n            }\n            \n            if (letters \u0026\u0026 Character.isLetter(codePoint)\n                    || numbers \u0026\u0026 Character.isDigit(codePoint)\n                    || !letters \u0026\u0026 !numbers) {               \n                buffer.appendCodePoint(codePoint);\n                \n                if (numberOfChars \u003d\u003d 2) {\n                    count--;\n                }\n                \n            } else {\n                count++;\n            }\n        }\n        return buffer.toString();\n    }",
      "path": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
      "functionStartLine": 343,
      "functionName": "random",
      "diff": "@@ -1,82 +1,80 @@\n     public static String random(int count, int start, int end, final boolean letters, final boolean numbers,\n                                 final char[] chars, final Random random) {\n         if (count \u003d\u003d 0) {\n             return StringUtils.EMPTY;\n         } else if (count \u003c 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n         if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"The chars array must not be empty\");\n         }\n \n         if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n             if (chars !\u003d null) {\n                 end \u003d chars.length;\n             } else {\n                 if (!letters \u0026\u0026 !numbers) {\n-                    end \u003d Integer.MAX_VALUE;\n+                    end \u003d Character.MAX_CODE_POINT;\n                 } else {\n                     end \u003d \u0027z\u0027 + 1;\n                     start \u003d \u0027 \u0027;                \n                 }\n             }\n         } else {\n             if (end \u003c\u003d start) {\n                 throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n             }\n         }\n \n         final int zero_digit_ascii \u003d 48;\n         final int first_letter_ascii \u003d 65;\n \n         if (chars \u003d\u003d null) {\n             if (numbers \u0026\u0026 end \u003c\u003d zero_digit_ascii\n                     || letters \u0026\u0026 end \u003c\u003d first_letter_ascii) {\n                 throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zero_digit_ascii + \") for generating digits \" +\n                         \"or greater then (\" + first_letter_ascii + \") for generating letters.\");\n             }\n         }\n \n-        final char[] buffer \u003d new char[count];\n+        StringBuffer buffer \u003d new StringBuffer(count);\n         final int gap \u003d end - start;\n \n         while (count-- !\u003d 0) {\n-            char ch;\n+            int codePoint;\n             if (chars \u003d\u003d null) {\n-                ch \u003d (char) (random.nextInt(gap) + start);\n-            } else {\n-                ch \u003d chars[random.nextInt(gap) + start];\n-            }\n-            if (letters \u0026\u0026 Character.isLetter(ch)\n-                    || numbers \u0026\u0026 Character.isDigit(ch)\n-                    || !letters \u0026\u0026 !numbers) {\n-                if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n-                    if(count \u003d\u003d 0) {\n-                        count++;\n-                    } else {\n-                        // low surrogate, insert high surrogate after putting it in\n-                        buffer[count] \u003d ch;\n-                        count--;\n-                        buffer[count] \u003d (char) (55296 + random.nextInt(128));\n-                    }\n-                } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n-                    if(count \u003d\u003d 0) {\n-                        count++;\n-                    } else {\n-                        // high surrogate, insert low surrogate before putting it in\n-                        buffer[count] \u003d (char) (56320 + random.nextInt(128));\n-                        count--;\n-                        buffer[count] \u003d ch;\n-                    }\n-                } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n-                    // private high surrogate, no effing clue, so skip it\n+                codePoint \u003d random.nextInt(gap) + start;\n+                \n+                switch (Character.getType(codePoint)) {\n+                case Character.UNASSIGNED:\n+                case Character.PRIVATE_USE:\n+                case Character.SURROGATE:\n                     count++;\n-                } else {\n-                    buffer[count] \u003d ch;\n+                    continue;\n                 }\n+                \n+            } else {\n+                codePoint \u003d chars[random.nextInt(gap) + start];\n+            }\n+            \n+            final int numberOfChars \u003d Character.charCount(codePoint);\n+            if (count \u003d\u003d 0 \u0026\u0026 numberOfChars \u003e 1) {\n+                count++;\n+                continue;\n+            }\n+            \n+            if (letters \u0026\u0026 Character.isLetter(codePoint)\n+                    || numbers \u0026\u0026 Character.isDigit(codePoint)\n+                    || !letters \u0026\u0026 !numbers) {               \n+                buffer.appendCodePoint(codePoint);\n+                \n+                if (numberOfChars \u003d\u003d 2) {\n+                    count--;\n+                }\n+                \n             } else {\n                 count++;\n             }\n         }\n-        return new String(buffer);\n+        return buffer.toString();\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "695342cb1cef42f30fd1a8496f181c92b21ae82d": {
      "type": "Ybodychange",
      "commitMessage": "LANG-1287: RandomStringUtils#random can enter infinite loop if end parameter is to small (closes #211)\n\n1.) Fixed possible infinite loop that can be caused by generating either digits or letters by calling with a to low end param.\n\n2.) Added (inclusive) and (exclusive) terms to javadoc of random method\n",
      "commitDate": "2016-11-18, 10:51 a.m.",
      "commitName": "695342cb1cef42f30fd1a8496f181c92b21ae82d",
      "commitAuthor": "Ivan Morozov",
      "commitDateOld": "2016-08-21, 9:50 a.m.",
      "commitNameOld": "a06c99b9c094d66f0d33bd69e15fe01ba52a8b05",
      "commitAuthorOld": "pascalschumacher",
      "daysBetweenCommits": 89.08,
      "commitsBetweenForRepo": 177,
      "commitsBetweenForFile": 1,
      "actualSource": "    public static String random(int count, int start, int end, final boolean letters, final boolean numbers,\n                                final char[] chars, final Random random) {\n        if (count \u003d\u003d 0) {\n            return StringUtils.EMPTY;\n        } else if (count \u003c 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n            if (chars !\u003d null) {\n                end \u003d chars.length;\n            } else {\n                if (!letters \u0026\u0026 !numbers) {\n                    end \u003d Integer.MAX_VALUE;\n                } else {\n                    end \u003d \u0027z\u0027 + 1;\n                    start \u003d \u0027 \u0027;                \n                }\n            }\n        } else {\n            if (end \u003c\u003d start) {\n                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n            }\n        }\n\n        final int zero_digit_ascii \u003d 48;\n        final int first_letter_ascii \u003d 65;\n\n        if (chars \u003d\u003d null) {\n            if (numbers \u0026\u0026 end \u003c\u003d zero_digit_ascii\n                    || letters \u0026\u0026 end \u003c\u003d first_letter_ascii) {\n                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zero_digit_ascii + \") for generating digits \" +\n                        \"or greater then (\" + first_letter_ascii + \") for generating letters.\");\n            }\n        }\n\n        final char[] buffer \u003d new char[count];\n        final int gap \u003d end - start;\n\n        while (count-- !\u003d 0) {\n            char ch;\n            if (chars \u003d\u003d null) {\n                ch \u003d (char) (random.nextInt(gap) + start);\n            } else {\n                ch \u003d chars[random.nextInt(gap) + start];\n            }\n            if (letters \u0026\u0026 Character.isLetter(ch)\n                    || numbers \u0026\u0026 Character.isDigit(ch)\n                    || !letters \u0026\u0026 !numbers) {\n                if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] \u003d ch;\n                        count--;\n                        buffer[count] \u003d (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] \u003d (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] \u003d ch;\n                    }\n                } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n                    // private high surrogate, no effing clue, so skip it\n                    count++;\n                } else {\n                    buffer[count] \u003d ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
      "path": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
      "functionStartLine": 343,
      "functionName": "random",
      "diff": "@@ -1,71 +1,82 @@\n     public static String random(int count, int start, int end, final boolean letters, final boolean numbers,\n                                 final char[] chars, final Random random) {\n         if (count \u003d\u003d 0) {\n             return StringUtils.EMPTY;\n         } else if (count \u003c 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n         if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"The chars array must not be empty\");\n         }\n \n         if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n             if (chars !\u003d null) {\n                 end \u003d chars.length;\n             } else {\n                 if (!letters \u0026\u0026 !numbers) {\n                     end \u003d Integer.MAX_VALUE;\n                 } else {\n                     end \u003d \u0027z\u0027 + 1;\n                     start \u003d \u0027 \u0027;                \n                 }\n             }\n         } else {\n             if (end \u003c\u003d start) {\n                 throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n             }\n         }\n \n+        final int zero_digit_ascii \u003d 48;\n+        final int first_letter_ascii \u003d 65;\n+\n+        if (chars \u003d\u003d null) {\n+            if (numbers \u0026\u0026 end \u003c\u003d zero_digit_ascii\n+                    || letters \u0026\u0026 end \u003c\u003d first_letter_ascii) {\n+                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater then (\" + zero_digit_ascii + \") for generating digits \" +\n+                        \"or greater then (\" + first_letter_ascii + \") for generating letters.\");\n+            }\n+        }\n+\n         final char[] buffer \u003d new char[count];\n         final int gap \u003d end - start;\n \n         while (count-- !\u003d 0) {\n             char ch;\n             if (chars \u003d\u003d null) {\n                 ch \u003d (char) (random.nextInt(gap) + start);\n             } else {\n                 ch \u003d chars[random.nextInt(gap) + start];\n             }\n             if (letters \u0026\u0026 Character.isLetter(ch)\n                     || numbers \u0026\u0026 Character.isDigit(ch)\n                     || !letters \u0026\u0026 !numbers) {\n                 if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n                     if(count \u003d\u003d 0) {\n                         count++;\n                     } else {\n                         // low surrogate, insert high surrogate after putting it in\n                         buffer[count] \u003d ch;\n                         count--;\n                         buffer[count] \u003d (char) (55296 + random.nextInt(128));\n                     }\n                 } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n                     if(count \u003d\u003d 0) {\n                         count++;\n                     } else {\n                         // high surrogate, insert low surrogate before putting it in\n                         buffer[count] \u003d (char) (56320 + random.nextInt(128));\n                         count--;\n                         buffer[count] \u003d ch;\n                     }\n                 } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n                     // private high surrogate, no effing clue, so skip it\n                     count++;\n                 } else {\n                     buffer[count] \u003d ch;\n                 }\n             } else {\n                 count++;\n             }\n         }\n         return new String(buffer);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "15b80753a6e8f481ea5029bc278e362994cb7bee": {
      "type": "Ybodychange",
      "commitMessage": "Reuse",
      "commitDate": "2016-04-13, 4:57 p.m.",
      "commitName": "15b80753a6e8f481ea5029bc278e362994cb7bee",
      "commitAuthor": "ggregory",
      "commitDateOld": "2015-05-05, 3:12 p.m.",
      "commitNameOld": "740c0f95fbd99cb7c07bcf7c54bc077c3ab27bd1",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 344.07,
      "commitsBetweenForRepo": 148,
      "commitsBetweenForFile": 1,
      "actualSource": "    public static String random(int count, int start, int end, final boolean letters, final boolean numbers,\n                                final char[] chars, final Random random) {\n        if (count \u003d\u003d 0) {\n            return StringUtils.EMPTY;\n        } else if (count \u003c 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n            if (chars !\u003d null) {\n                end \u003d chars.length;\n            } else {\n                if (!letters \u0026\u0026 !numbers) {\n                    end \u003d Integer.MAX_VALUE;\n                } else {\n                    end \u003d \u0027z\u0027 + 1;\n                    start \u003d \u0027 \u0027;                \n                }\n            }\n        } else {\n            if (end \u003c\u003d start) {\n                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n            }\n        }\n\n        final char[] buffer \u003d new char[count];\n        final int gap \u003d end - start;\n\n        while (count-- !\u003d 0) {\n            char ch;\n            if (chars \u003d\u003d null) {\n                ch \u003d (char) (random.nextInt(gap) + start);\n            } else {\n                ch \u003d chars[random.nextInt(gap) + start];\n            }\n            if (letters \u0026\u0026 Character.isLetter(ch)\n                    || numbers \u0026\u0026 Character.isDigit(ch)\n                    || !letters \u0026\u0026 !numbers) {\n                if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] \u003d ch;\n                        count--;\n                        buffer[count] \u003d (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] \u003d (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] \u003d ch;\n                    }\n                } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n                    // private high surrogate, no effing clue, so skip it\n                    count++;\n                } else {\n                    buffer[count] \u003d ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
      "path": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
      "functionStartLine": 222,
      "functionName": "random",
      "diff": "@@ -1,71 +1,71 @@\n     public static String random(int count, int start, int end, final boolean letters, final boolean numbers,\n                                 final char[] chars, final Random random) {\n         if (count \u003d\u003d 0) {\n-            return \"\";\n+            return StringUtils.EMPTY;\n         } else if (count \u003c 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n         if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"The chars array must not be empty\");\n         }\n \n         if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n             if (chars !\u003d null) {\n                 end \u003d chars.length;\n             } else {\n                 if (!letters \u0026\u0026 !numbers) {\n                     end \u003d Integer.MAX_VALUE;\n                 } else {\n                     end \u003d \u0027z\u0027 + 1;\n                     start \u003d \u0027 \u0027;                \n                 }\n             }\n         } else {\n             if (end \u003c\u003d start) {\n                 throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n             }\n         }\n \n         final char[] buffer \u003d new char[count];\n         final int gap \u003d end - start;\n \n         while (count-- !\u003d 0) {\n             char ch;\n             if (chars \u003d\u003d null) {\n                 ch \u003d (char) (random.nextInt(gap) + start);\n             } else {\n                 ch \u003d chars[random.nextInt(gap) + start];\n             }\n             if (letters \u0026\u0026 Character.isLetter(ch)\n                     || numbers \u0026\u0026 Character.isDigit(ch)\n                     || !letters \u0026\u0026 !numbers) {\n                 if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n                     if(count \u003d\u003d 0) {\n                         count++;\n                     } else {\n                         // low surrogate, insert high surrogate after putting it in\n                         buffer[count] \u003d ch;\n                         count--;\n                         buffer[count] \u003d (char) (55296 + random.nextInt(128));\n                     }\n                 } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n                     if(count \u003d\u003d 0) {\n                         count++;\n                     } else {\n                         // high surrogate, insert low surrogate before putting it in\n                         buffer[count] \u003d (char) (56320 + random.nextInt(128));\n                         count--;\n                         buffer[count] \u003d ch;\n                     }\n                 } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n                     // private high surrogate, no effing clue, so skip it\n                     count++;\n                 } else {\n                     buffer[count] \u003d ch;\n                 }\n             } else {\n                 count++;\n             }\n         }\n         return new String(buffer);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5292526e476ffbb19c6613a98464054236c86ace": {
      "type": "Ybodychange",
      "commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1436770 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2013-01-22, 2:09 a.m.",
      "commitName": "5292526e476ffbb19c6613a98464054236c86ace",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "2013-01-22, 2:07 a.m.",
      "commitNameOld": "5bd622dab027ef37001a630a7c825c5b8c19d1db",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    public static String random(int count, int start, int end, final boolean letters, final boolean numbers,\n                                final char[] chars, final Random random) {\n        if (count \u003d\u003d 0) {\n            return \"\";\n        } else if (count \u003c 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n            if (chars !\u003d null) {\n                end \u003d chars.length;\n            } else {\n                if (!letters \u0026\u0026 !numbers) {\n                    end \u003d Integer.MAX_VALUE;\n                } else {\n                    end \u003d \u0027z\u0027 + 1;\n                    start \u003d \u0027 \u0027;                \n                }\n            }\n        } else {\n            if (end \u003c\u003d start) {\n                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n            }\n        }\n\n        final char[] buffer \u003d new char[count];\n        final int gap \u003d end - start;\n\n        while (count-- !\u003d 0) {\n            char ch;\n            if (chars \u003d\u003d null) {\n                ch \u003d (char) (random.nextInt(gap) + start);\n            } else {\n                ch \u003d chars[random.nextInt(gap) + start];\n            }\n            if (letters \u0026\u0026 Character.isLetter(ch)\n                    || numbers \u0026\u0026 Character.isDigit(ch)\n                    || !letters \u0026\u0026 !numbers) {\n                if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] \u003d ch;\n                        count--;\n                        buffer[count] \u003d (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] \u003d (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] \u003d ch;\n                    }\n                } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n                    // private high surrogate, no effing clue, so skip it\n                    count++;\n                } else {\n                    buffer[count] \u003d ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
      "path": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
      "functionStartLine": 223,
      "functionName": "random",
      "diff": "@@ -1,71 +1,71 @@\n     public static String random(int count, int start, int end, final boolean letters, final boolean numbers,\n                                 final char[] chars, final Random random) {\n         if (count \u003d\u003d 0) {\n             return \"\";\n         } else if (count \u003c 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n         if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"The chars array must not be empty\");\n         }\n \n         if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n             if (chars !\u003d null) {\n                 end \u003d chars.length;\n             } else {\n                 if (!letters \u0026\u0026 !numbers) {\n                     end \u003d Integer.MAX_VALUE;\n                 } else {\n                     end \u003d \u0027z\u0027 + 1;\n                     start \u003d \u0027 \u0027;                \n                 }\n             }\n         } else {\n             if (end \u003c\u003d start) {\n                 throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n             }\n         }\n \n-        char[] buffer \u003d new char[count];\n-        int gap \u003d end - start;\n+        final char[] buffer \u003d new char[count];\n+        final int gap \u003d end - start;\n \n         while (count-- !\u003d 0) {\n             char ch;\n             if (chars \u003d\u003d null) {\n                 ch \u003d (char) (random.nextInt(gap) + start);\n             } else {\n                 ch \u003d chars[random.nextInt(gap) + start];\n             }\n             if (letters \u0026\u0026 Character.isLetter(ch)\n                     || numbers \u0026\u0026 Character.isDigit(ch)\n                     || !letters \u0026\u0026 !numbers) {\n                 if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n                     if(count \u003d\u003d 0) {\n                         count++;\n                     } else {\n                         // low surrogate, insert high surrogate after putting it in\n                         buffer[count] \u003d ch;\n                         count--;\n                         buffer[count] \u003d (char) (55296 + random.nextInt(128));\n                     }\n                 } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n                     if(count \u003d\u003d 0) {\n                         count++;\n                     } else {\n                         // high surrogate, insert low surrogate before putting it in\n                         buffer[count] \u003d (char) (56320 + random.nextInt(128));\n                         count--;\n                         buffer[count] \u003d ch;\n                     }\n                 } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n                     // private high surrogate, no effing clue, so skip it\n                     count++;\n                 } else {\n                     buffer[count] \u003d ch;\n                 }\n             } else {\n                 count++;\n             }\n         }\n         return new String(buffer);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5bd622dab027ef37001a630a7c825c5b8c19d1db": {
      "type": "Yparametermetachange",
      "commitMessage": "Add final modifier to method parameters.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1436768 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2013-01-22, 2:07 a.m.",
      "commitName": "5bd622dab027ef37001a630a7c825c5b8c19d1db",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "2012-06-10, 8:40 a.m.",
      "commitNameOld": "4a65cb8da23d6667ac6f91775309b4da9b315d95",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 225.77,
      "commitsBetweenForRepo": 160,
      "commitsBetweenForFile": 1,
      "actualSource": "    public static String random(int count, int start, int end, final boolean letters, final boolean numbers,\n                                final char[] chars, final Random random) {\n        if (count \u003d\u003d 0) {\n            return \"\";\n        } else if (count \u003c 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n            if (chars !\u003d null) {\n                end \u003d chars.length;\n            } else {\n                if (!letters \u0026\u0026 !numbers) {\n                    end \u003d Integer.MAX_VALUE;\n                } else {\n                    end \u003d \u0027z\u0027 + 1;\n                    start \u003d \u0027 \u0027;                \n                }\n            }\n        } else {\n            if (end \u003c\u003d start) {\n                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n            }\n        }\n\n        char[] buffer \u003d new char[count];\n        int gap \u003d end - start;\n\n        while (count-- !\u003d 0) {\n            char ch;\n            if (chars \u003d\u003d null) {\n                ch \u003d (char) (random.nextInt(gap) + start);\n            } else {\n                ch \u003d chars[random.nextInt(gap) + start];\n            }\n            if (letters \u0026\u0026 Character.isLetter(ch)\n                    || numbers \u0026\u0026 Character.isDigit(ch)\n                    || !letters \u0026\u0026 !numbers) {\n                if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] \u003d ch;\n                        count--;\n                        buffer[count] \u003d (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] \u003d (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] \u003d ch;\n                    }\n                } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n                    // private high surrogate, no effing clue, so skip it\n                    count++;\n                } else {\n                    buffer[count] \u003d ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
      "path": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
      "functionStartLine": 223,
      "functionName": "random",
      "diff": "@@ -1,71 +1,71 @@\n-    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n-                                char[] chars, Random random) {\n+    public static String random(int count, int start, int end, final boolean letters, final boolean numbers,\n+                                final char[] chars, final Random random) {\n         if (count \u003d\u003d 0) {\n             return \"\";\n         } else if (count \u003c 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n         if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"The chars array must not be empty\");\n         }\n \n         if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n             if (chars !\u003d null) {\n                 end \u003d chars.length;\n             } else {\n                 if (!letters \u0026\u0026 !numbers) {\n                     end \u003d Integer.MAX_VALUE;\n                 } else {\n                     end \u003d \u0027z\u0027 + 1;\n                     start \u003d \u0027 \u0027;                \n                 }\n             }\n         } else {\n             if (end \u003c\u003d start) {\n                 throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n             }\n         }\n \n         char[] buffer \u003d new char[count];\n         int gap \u003d end - start;\n \n         while (count-- !\u003d 0) {\n             char ch;\n             if (chars \u003d\u003d null) {\n                 ch \u003d (char) (random.nextInt(gap) + start);\n             } else {\n                 ch \u003d chars[random.nextInt(gap) + start];\n             }\n             if (letters \u0026\u0026 Character.isLetter(ch)\n                     || numbers \u0026\u0026 Character.isDigit(ch)\n                     || !letters \u0026\u0026 !numbers) {\n                 if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n                     if(count \u003d\u003d 0) {\n                         count++;\n                     } else {\n                         // low surrogate, insert high surrogate after putting it in\n                         buffer[count] \u003d ch;\n                         count--;\n                         buffer[count] \u003d (char) (55296 + random.nextInt(128));\n                     }\n                 } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n                     if(count \u003d\u003d 0) {\n                         count++;\n                     } else {\n                         // high surrogate, insert low surrogate before putting it in\n                         buffer[count] \u003d (char) (56320 + random.nextInt(128));\n                         count--;\n                         buffer[count] \u003d ch;\n                     }\n                 } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n                     // private high surrogate, no effing clue, so skip it\n                     count++;\n                 } else {\n                     buffer[count] \u003d ch;\n                 }\n             } else {\n                 count++;\n             }\n         }\n         return new String(buffer);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[count-int, start-int, end-int, letters-boolean, numbers-boolean, chars-char[], random-Random]",
        "newValue": "[count-int, start-int, end-int, letters-boolean(modifiers-final), numbers-boolean(modifiers-final), chars-char[](modifiers-final), random-Random(modifiers-final)]"
      }
    },
    "4a65cb8da23d6667ac6f91775309b4da9b315d95": {
      "type": "Ybodychange",
      "commitMessage": "LANG-807 RandomStringUtils throws confusing IAE when end \u003c\u003d start\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1348583 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2012-06-10, 8:40 a.m.",
      "commitName": "4a65cb8da23d6667ac6f91775309b4da9b315d95",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "2012-06-09, 10:58 a.m.",
      "commitNameOld": "27bcbcc728434ffb2c45e81c0e75e6a3d6da3441",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 0.9,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count \u003d\u003d 0) {\n            return \"\";\n        } else if (count \u003c 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n            if (chars !\u003d null) {\n                end \u003d chars.length;\n            } else {\n                if (!letters \u0026\u0026 !numbers) {\n                    end \u003d Integer.MAX_VALUE;\n                } else {\n                    end \u003d \u0027z\u0027 + 1;\n                    start \u003d \u0027 \u0027;                \n                }\n            }\n        } else {\n            if (end \u003c\u003d start) {\n                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n            }\n        }\n\n        char[] buffer \u003d new char[count];\n        int gap \u003d end - start;\n\n        while (count-- !\u003d 0) {\n            char ch;\n            if (chars \u003d\u003d null) {\n                ch \u003d (char) (random.nextInt(gap) + start);\n            } else {\n                ch \u003d chars[random.nextInt(gap) + start];\n            }\n            if (letters \u0026\u0026 Character.isLetter(ch)\n                    || numbers \u0026\u0026 Character.isDigit(ch)\n                    || !letters \u0026\u0026 !numbers) {\n                if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] \u003d ch;\n                        count--;\n                        buffer[count] \u003d (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] \u003d (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] \u003d ch;\n                    }\n                } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n                    // private high surrogate, no effing clue, so skip it\n                    count++;\n                } else {\n                    buffer[count] \u003d ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
      "path": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
      "functionStartLine": 223,
      "functionName": "random",
      "diff": "@@ -1,67 +1,71 @@\n     public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                 char[] chars, Random random) {\n         if (count \u003d\u003d 0) {\n             return \"\";\n         } else if (count \u003c 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n         if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n             throw new IllegalArgumentException(\"The chars array must not be empty\");\n         }\n \n         if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n             if (chars !\u003d null) {\n                 end \u003d chars.length;\n             } else {\n                 if (!letters \u0026\u0026 !numbers) {\n                     end \u003d Integer.MAX_VALUE;\n                 } else {\n                     end \u003d \u0027z\u0027 + 1;\n                     start \u003d \u0027 \u0027;                \n                 }\n             }\n+        } else {\n+            if (end \u003c\u003d start) {\n+                throw new IllegalArgumentException(\"Parameter end (\" + end + \") must be greater than start (\" + start + \")\");\n+            }\n         }\n \n         char[] buffer \u003d new char[count];\n         int gap \u003d end - start;\n \n         while (count-- !\u003d 0) {\n             char ch;\n             if (chars \u003d\u003d null) {\n                 ch \u003d (char) (random.nextInt(gap) + start);\n             } else {\n                 ch \u003d chars[random.nextInt(gap) + start];\n             }\n             if (letters \u0026\u0026 Character.isLetter(ch)\n                     || numbers \u0026\u0026 Character.isDigit(ch)\n                     || !letters \u0026\u0026 !numbers) {\n                 if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n                     if(count \u003d\u003d 0) {\n                         count++;\n                     } else {\n                         // low surrogate, insert high surrogate after putting it in\n                         buffer[count] \u003d ch;\n                         count--;\n                         buffer[count] \u003d (char) (55296 + random.nextInt(128));\n                     }\n                 } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n                     if(count \u003d\u003d 0) {\n                         count++;\n                     } else {\n                         // high surrogate, insert low surrogate before putting it in\n                         buffer[count] \u003d (char) (56320 + random.nextInt(128));\n                         count--;\n                         buffer[count] \u003d ch;\n                     }\n                 } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n                     // private high surrogate, no effing clue, so skip it\n                     count++;\n                 } else {\n                     buffer[count] \u003d ch;\n                 }\n             } else {\n                 count++;\n             }\n         }\n         return new String(buffer);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "27bcbcc728434ffb2c45e81c0e75e6a3d6da3441": {
      "type": "Ybodychange",
      "commitMessage": "LANG-805 RandomStringUtils.random(count, 0, 0, false, false, universe, random) always throws java.lang.ArrayIndexOutOfBoundsException\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1348422 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2012-06-09, 10:58 a.m.",
      "commitName": "27bcbcc728434ffb2c45e81c0e75e6a3d6da3441",
      "commitAuthor": "Sebastian Bazley",
      "commitDateOld": "2011-11-09, 12:53 p.m.",
      "commitNameOld": "371e866442f46131cc38a9a5018e1703f52f9b60",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 212.88,
      "commitsBetweenForRepo": 82,
      "commitsBetweenForFile": 1,
      "actualSource": "    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count \u003d\u003d 0) {\n            return \"\";\n        } else if (count \u003c 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n            throw new IllegalArgumentException(\"The chars array must not be empty\");\n        }\n\n        if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n            if (chars !\u003d null) {\n                end \u003d chars.length;\n            } else {\n                if (!letters \u0026\u0026 !numbers) {\n                    end \u003d Integer.MAX_VALUE;\n                } else {\n                    end \u003d \u0027z\u0027 + 1;\n                    start \u003d \u0027 \u0027;                \n                }\n            }\n        }\n\n        char[] buffer \u003d new char[count];\n        int gap \u003d end - start;\n\n        while (count-- !\u003d 0) {\n            char ch;\n            if (chars \u003d\u003d null) {\n                ch \u003d (char) (random.nextInt(gap) + start);\n            } else {\n                ch \u003d chars[random.nextInt(gap) + start];\n            }\n            if (letters \u0026\u0026 Character.isLetter(ch)\n                    || numbers \u0026\u0026 Character.isDigit(ch)\n                    || !letters \u0026\u0026 !numbers) {\n                if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] \u003d ch;\n                        count--;\n                        buffer[count] \u003d (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] \u003d (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] \u003d ch;\n                    }\n                } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n                    // private high surrogate, no effing clue, so skip it\n                    count++;\n                } else {\n                    buffer[count] \u003d ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
      "path": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
      "functionStartLine": 223,
      "functionName": "random",
      "diff": "@@ -1,59 +1,67 @@\n     public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                 char[] chars, Random random) {\n         if (count \u003d\u003d 0) {\n             return \"\";\n         } else if (count \u003c 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n+        if (chars !\u003d null \u0026\u0026 chars.length \u003d\u003d 0) {\n+            throw new IllegalArgumentException(\"The chars array must not be empty\");\n+        }\n+\n         if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n-            end \u003d \u0027z\u0027 + 1;\n-            start \u003d \u0027 \u0027;\n-            if (!letters \u0026\u0026 !numbers) {\n-                start \u003d 0;\n-                end \u003d Integer.MAX_VALUE;\n+            if (chars !\u003d null) {\n+                end \u003d chars.length;\n+            } else {\n+                if (!letters \u0026\u0026 !numbers) {\n+                    end \u003d Integer.MAX_VALUE;\n+                } else {\n+                    end \u003d \u0027z\u0027 + 1;\n+                    start \u003d \u0027 \u0027;                \n+                }\n             }\n         }\n \n         char[] buffer \u003d new char[count];\n         int gap \u003d end - start;\n \n         while (count-- !\u003d 0) {\n             char ch;\n             if (chars \u003d\u003d null) {\n                 ch \u003d (char) (random.nextInt(gap) + start);\n             } else {\n                 ch \u003d chars[random.nextInt(gap) + start];\n             }\n             if (letters \u0026\u0026 Character.isLetter(ch)\n                     || numbers \u0026\u0026 Character.isDigit(ch)\n                     || !letters \u0026\u0026 !numbers) {\n                 if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n                     if(count \u003d\u003d 0) {\n                         count++;\n                     } else {\n                         // low surrogate, insert high surrogate after putting it in\n                         buffer[count] \u003d ch;\n                         count--;\n                         buffer[count] \u003d (char) (55296 + random.nextInt(128));\n                     }\n                 } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n                     if(count \u003d\u003d 0) {\n                         count++;\n                     } else {\n                         // high surrogate, insert low surrogate before putting it in\n                         buffer[count] \u003d (char) (56320 + random.nextInt(128));\n                         count--;\n                         buffer[count] \u003d ch;\n                     }\n                 } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n                     // private high surrogate, no effing clue, so skip it\n                     count++;\n                 } else {\n                     buffer[count] \u003d ch;\n                 }\n             } else {\n                 count++;\n             }\n         }\n         return new String(buffer);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "371e866442f46131cc38a9a5018e1703f52f9b60": {
      "type": "Ybodychange",
      "commitMessage": "Remove superfluous parens like:\nreturn (foo + 1);\nint len \u003d (foo + 1);\nif ((foo + 1 \u003e 2))\n((String) foo)\n\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1199894 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2011-11-09, 12:53 p.m.",
      "commitName": "371e866442f46131cc38a9a5018e1703f52f9b60",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "2011-07-19, 4:53 p.m.",
      "commitNameOld": "2c3fa8366e133200d2a6e0c7f309a876ff9b8675",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 112.88,
      "commitsBetweenForRepo": 185,
      "commitsBetweenForFile": 1,
      "actualSource": "    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count \u003d\u003d 0) {\n            return \"\";\n        } else if (count \u003c 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n            end \u003d \u0027z\u0027 + 1;\n            start \u003d \u0027 \u0027;\n            if (!letters \u0026\u0026 !numbers) {\n                start \u003d 0;\n                end \u003d Integer.MAX_VALUE;\n            }\n        }\n\n        char[] buffer \u003d new char[count];\n        int gap \u003d end - start;\n\n        while (count-- !\u003d 0) {\n            char ch;\n            if (chars \u003d\u003d null) {\n                ch \u003d (char) (random.nextInt(gap) + start);\n            } else {\n                ch \u003d chars[random.nextInt(gap) + start];\n            }\n            if (letters \u0026\u0026 Character.isLetter(ch)\n                    || numbers \u0026\u0026 Character.isDigit(ch)\n                    || !letters \u0026\u0026 !numbers) {\n                if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] \u003d ch;\n                        count--;\n                        buffer[count] \u003d (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] \u003d (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] \u003d ch;\n                    }\n                } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n                    // private high surrogate, no effing clue, so skip it\n                    count++;\n                } else {\n                    buffer[count] \u003d ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
      "path": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
      "functionStartLine": 223,
      "functionName": "random",
      "diff": "@@ -1,59 +1,59 @@\n     public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                 char[] chars, Random random) {\n         if (count \u003d\u003d 0) {\n             return \"\";\n         } else if (count \u003c 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n-        if ((start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0)) {\n+        if (start \u003d\u003d 0 \u0026\u0026 end \u003d\u003d 0) {\n             end \u003d \u0027z\u0027 + 1;\n             start \u003d \u0027 \u0027;\n             if (!letters \u0026\u0026 !numbers) {\n                 start \u003d 0;\n                 end \u003d Integer.MAX_VALUE;\n             }\n         }\n \n         char[] buffer \u003d new char[count];\n         int gap \u003d end - start;\n \n         while (count-- !\u003d 0) {\n             char ch;\n             if (chars \u003d\u003d null) {\n                 ch \u003d (char) (random.nextInt(gap) + start);\n             } else {\n                 ch \u003d chars[random.nextInt(gap) + start];\n             }\n-            if ((letters \u0026\u0026 Character.isLetter(ch))\n-                    || (numbers \u0026\u0026 Character.isDigit(ch))\n-                    || (!letters \u0026\u0026 !numbers)) {\n+            if (letters \u0026\u0026 Character.isLetter(ch)\n+                    || numbers \u0026\u0026 Character.isDigit(ch)\n+                    || !letters \u0026\u0026 !numbers) {\n                 if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n                     if(count \u003d\u003d 0) {\n                         count++;\n                     } else {\n                         // low surrogate, insert high surrogate after putting it in\n                         buffer[count] \u003d ch;\n                         count--;\n                         buffer[count] \u003d (char) (55296 + random.nextInt(128));\n                     }\n                 } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n                     if(count \u003d\u003d 0) {\n                         count++;\n                     } else {\n                         // high surrogate, insert low surrogate before putting it in\n                         buffer[count] \u003d (char) (56320 + random.nextInt(128));\n                         count--;\n                         buffer[count] \u003d ch;\n                     }\n                 } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n                     // private high surrogate, no effing clue, so skip it\n                     count++;\n                 } else {\n                     buffer[count] \u003d ch;\n                 }\n             } else {\n                 count++;\n             }\n         }\n         return new String(buffer);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fc5c081e22a61bb5a6810af302be3f22f7966df4": {
      "type": "Yfilerename",
      "commitMessage": "Move main source to src/main/java\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@895322 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2010-01-02, 9:11 p.m.",
      "commitName": "fc5c081e22a61bb5a6810af302be3f22f7966df4",
      "commitAuthor": "Paul C. Benedict Jr",
      "commitDateOld": "2010-01-02, 9:09 p.m.",
      "commitNameOld": "6b32246f5f9f77c74b32a5290cdbdd4e0f5c71c6",
      "commitAuthorOld": "Paul C. Benedict Jr",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count \u003d\u003d 0) {\n            return \"\";\n        } else if (count \u003c 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if ((start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0)) {\n            end \u003d \u0027z\u0027 + 1;\n            start \u003d \u0027 \u0027;\n            if (!letters \u0026\u0026 !numbers) {\n                start \u003d 0;\n                end \u003d Integer.MAX_VALUE;\n            }\n        }\n\n        char[] buffer \u003d new char[count];\n        int gap \u003d end - start;\n\n        while (count-- !\u003d 0) {\n            char ch;\n            if (chars \u003d\u003d null) {\n                ch \u003d (char) (random.nextInt(gap) + start);\n            } else {\n                ch \u003d chars[random.nextInt(gap) + start];\n            }\n            if ((letters \u0026\u0026 Character.isLetter(ch))\n                || (numbers \u0026\u0026 Character.isDigit(ch))\n                || (!letters \u0026\u0026 !numbers)) \n            {\n                if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] \u003d ch;\n                        count--;\n                        buffer[count] \u003d (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] \u003d (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] \u003d ch;\n                    }\n                } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n                    // private high surrogate, no effing clue, so skip it\n                    count++;\n                } else {\n                    buffer[count] \u003d ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
      "path": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java",
      "functionStartLine": 225,
      "functionName": "random",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang3/RandomStringUtils.java",
        "newPath": "src/main/java/org/apache/commons/lang3/RandomStringUtils.java"
      }
    },
    "debc02c6d9b94c717b4182ae4dd7a97d47293a52": {
      "type": "Yfilerename",
      "commitMessage": "Changing directory name from lang to lang3. Build will fail (probably) until Java code is changed in subsequent commit. LANG-563\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@889202 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2009-12-10, 6:33 a.m.",
      "commitName": "debc02c6d9b94c717b4182ae4dd7a97d47293a52",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2009-12-10, 6:31 a.m.",
      "commitNameOld": "375d7d0954cae60c4c7292cc65abbc972178857c",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count \u003d\u003d 0) {\n            return \"\";\n        } else if (count \u003c 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if ((start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0)) {\n            end \u003d \u0027z\u0027 + 1;\n            start \u003d \u0027 \u0027;\n            if (!letters \u0026\u0026 !numbers) {\n                start \u003d 0;\n                end \u003d Integer.MAX_VALUE;\n            }\n        }\n\n        char[] buffer \u003d new char[count];\n        int gap \u003d end - start;\n\n        while (count-- !\u003d 0) {\n            char ch;\n            if (chars \u003d\u003d null) {\n                ch \u003d (char) (random.nextInt(gap) + start);\n            } else {\n                ch \u003d chars[random.nextInt(gap) + start];\n            }\n            if ((letters \u0026\u0026 Character.isLetter(ch))\n                || (numbers \u0026\u0026 Character.isDigit(ch))\n                || (!letters \u0026\u0026 !numbers)) \n            {\n                if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] \u003d ch;\n                        count--;\n                        buffer[count] \u003d (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] \u003d (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] \u003d ch;\n                    }\n                } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n                    // private high surrogate, no effing clue, so skip it\n                    count++;\n                } else {\n                    buffer[count] \u003d ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
      "path": "src/java/org/apache/commons/lang3/RandomStringUtils.java",
      "functionStartLine": 225,
      "functionName": "random",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang/RandomStringUtils.java",
        "newPath": "src/java/org/apache/commons/lang3/RandomStringUtils.java"
      }
    },
    "b01434196523fc67daa5d9379c4465b68961fd53": {
      "type": "Ybodychange",
      "commitMessage": "Adding a test and a fix for LANG-100. This is a bug in which the randomly created String can sometimes be illegal unicode; because the code does not consider when relationships exist between characters. High and low surrogates are now dealt with, but I\u0027m skipping private high surrogates because I can\u0027t find out what to do. Need to go plod very slowly through the spec. This site was very useful: http://www.alanwood.net/unicode/private_use_high_surrogates.html\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@417319 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2006-06-26, 8:28 p.m.",
      "commitName": "b01434196523fc67daa5d9379c4465b68961fd53",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2005-09-10, 6:07 a.m.",
      "commitNameOld": "c79adcc3f0b99cb838155909a989fbd7bd71e600",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 289.6,
      "commitsBetweenForRepo": 98,
      "commitsBetweenForFile": 1,
      "actualSource": "    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count \u003d\u003d 0) {\n            return \"\";\n        } else if (count \u003c 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if ((start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0)) {\n            end \u003d \u0027z\u0027 + 1;\n            start \u003d \u0027 \u0027;\n            if (!letters \u0026\u0026 !numbers) {\n                start \u003d 0;\n                end \u003d Integer.MAX_VALUE;\n            }\n        }\n\n        char[] buffer \u003d new char[count];\n        int gap \u003d end - start;\n\n        while (count-- !\u003d 0) {\n            char ch;\n            if (chars \u003d\u003d null) {\n                ch \u003d (char) (random.nextInt(gap) + start);\n            } else {\n                ch \u003d chars[random.nextInt(gap) + start];\n            }\n            if ((letters \u0026\u0026 Character.isLetter(ch))\n                || (numbers \u0026\u0026 Character.isDigit(ch))\n                || (!letters \u0026\u0026 !numbers)) \n            {\n                if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // low surrogate, insert high surrogate after putting it in\n                        buffer[count] \u003d ch;\n                        count--;\n                        buffer[count] \u003d (char) (55296 + random.nextInt(128));\n                    }\n                } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n                    if(count \u003d\u003d 0) {\n                        count++;\n                    } else {\n                        // high surrogate, insert low surrogate before putting it in\n                        buffer[count] \u003d (char) (56320 + random.nextInt(128));\n                        count--;\n                        buffer[count] \u003d ch;\n                    }\n                } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n                    // private high surrogate, no effing clue, so skip it\n                    count++;\n                } else {\n                    buffer[count] \u003d ch;\n                }\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
      "path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
      "functionStartLine": 226,
      "functionName": "random",
      "diff": "@@ -1,36 +1,60 @@\n     public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                 char[] chars, Random random) {\n         if (count \u003d\u003d 0) {\n             return \"\";\n         } else if (count \u003c 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n         if ((start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0)) {\n             end \u003d \u0027z\u0027 + 1;\n             start \u003d \u0027 \u0027;\n             if (!letters \u0026\u0026 !numbers) {\n                 start \u003d 0;\n                 end \u003d Integer.MAX_VALUE;\n             }\n         }\n \n         char[] buffer \u003d new char[count];\n         int gap \u003d end - start;\n \n         while (count-- !\u003d 0) {\n             char ch;\n             if (chars \u003d\u003d null) {\n                 ch \u003d (char) (random.nextInt(gap) + start);\n             } else {\n                 ch \u003d chars[random.nextInt(gap) + start];\n             }\n             if ((letters \u0026\u0026 Character.isLetter(ch))\n                 || (numbers \u0026\u0026 Character.isDigit(ch))\n-                || (!letters \u0026\u0026 !numbers)) {\n-                buffer[count] \u003d ch;\n+                || (!letters \u0026\u0026 !numbers)) \n+            {\n+                if(ch \u003e\u003d 56320 \u0026\u0026 ch \u003c\u003d 57343) {\n+                    if(count \u003d\u003d 0) {\n+                        count++;\n+                    } else {\n+                        // low surrogate, insert high surrogate after putting it in\n+                        buffer[count] \u003d ch;\n+                        count--;\n+                        buffer[count] \u003d (char) (55296 + random.nextInt(128));\n+                    }\n+                } else if(ch \u003e\u003d 55296 \u0026\u0026 ch \u003c\u003d 56191) {\n+                    if(count \u003d\u003d 0) {\n+                        count++;\n+                    } else {\n+                        // high surrogate, insert low surrogate before putting it in\n+                        buffer[count] \u003d (char) (56320 + random.nextInt(128));\n+                        count--;\n+                        buffer[count] \u003d ch;\n+                    }\n+                } else if(ch \u003e\u003d 56192 \u0026\u0026 ch \u003c\u003d 56319) {\n+                    // private high surrogate, no effing clue, so skip it\n+                    count++;\n+                } else {\n+                    buffer[count] \u003d ch;\n+                }\n             } else {\n                 count++;\n             }\n         }\n         return new String(buffer);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c79adcc3f0b99cb838155909a989fbd7bd71e600": {
      "type": "Ybodychange",
      "commitMessage": "Optimize performance of RandomStringUtils\nbug 35170, from Shaun Kalley\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@279985 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2005-09-10, 6:07 a.m.",
      "commitName": "c79adcc3f0b99cb838155909a989fbd7bd71e600",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "2005-06-26, 8:54 p.m.",
      "commitNameOld": "ebff428ba5d133a8e37e97a03b4b2483d1f9386d",
      "commitAuthorOld": "Steven Caswell",
      "daysBetweenCommits": 75.38,
      "commitsBetweenForRepo": 136,
      "commitsBetweenForFile": 1,
      "actualSource": "    public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                char[] chars, Random random) {\n        if (count \u003d\u003d 0) {\n            return \"\";\n        } else if (count \u003c 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if ((start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0)) {\n            end \u003d \u0027z\u0027 + 1;\n            start \u003d \u0027 \u0027;\n            if (!letters \u0026\u0026 !numbers) {\n                start \u003d 0;\n                end \u003d Integer.MAX_VALUE;\n            }\n        }\n\n        char[] buffer \u003d new char[count];\n        int gap \u003d end - start;\n\n        while (count-- !\u003d 0) {\n            char ch;\n            if (chars \u003d\u003d null) {\n                ch \u003d (char) (random.nextInt(gap) + start);\n            } else {\n                ch \u003d chars[random.nextInt(gap) + start];\n            }\n            if ((letters \u0026\u0026 Character.isLetter(ch))\n                || (numbers \u0026\u0026 Character.isDigit(ch))\n                || (!letters \u0026\u0026 !numbers)) {\n                buffer[count] \u003d ch;\n            } else {\n                count++;\n            }\n        }\n        return new String(buffer);\n    }",
      "path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
      "functionStartLine": 218,
      "functionName": "random",
      "diff": "@@ -1,37 +1,36 @@\n     public static String random(int count, int start, int end, boolean letters, boolean numbers,\n                                 char[] chars, Random random) {\n         if (count \u003d\u003d 0) {\n             return \"\";\n         } else if (count \u003c 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n         if ((start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0)) {\n             end \u003d \u0027z\u0027 + 1;\n             start \u003d \u0027 \u0027;\n             if (!letters \u0026\u0026 !numbers) {\n                 start \u003d 0;\n                 end \u003d Integer.MAX_VALUE;\n             }\n         }\n \n-        StringBuffer buffer \u003d new StringBuffer();\n+        char[] buffer \u003d new char[count];\n         int gap \u003d end - start;\n \n         while (count-- !\u003d 0) {\n             char ch;\n             if (chars \u003d\u003d null) {\n                 ch \u003d (char) (random.nextInt(gap) + start);\n             } else {\n                 ch \u003d chars[random.nextInt(gap) + start];\n             }\n-            if ((letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch))\n-                || (letters \u0026\u0026 Character.isLetter(ch))\n+            if ((letters \u0026\u0026 Character.isLetter(ch))\n                 || (numbers \u0026\u0026 Character.isDigit(ch))\n                 || (!letters \u0026\u0026 !numbers)) {\n-                buffer.append(ch);\n+                buffer[count] \u003d ch;\n             } else {\n                 count++;\n             }\n         }\n-        return buffer.toString();\n+        return new String(buffer);\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "43db5237ab2a2dbc3a79daed10499bb4dbf92a4e": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Fix RandomStringUtils to not throw NPE all the time\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137543 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2003-07-31, 7:24 p.m.",
      "commitName": "43db5237ab2a2dbc3a79daed10499bb4dbf92a4e",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Fix RandomStringUtils to not throw NPE all the time\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137543 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2003-07-31, 7:24 p.m.",
          "commitName": "43db5237ab2a2dbc3a79daed10499bb4dbf92a4e",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2003-07-26, 6:32 a.m.",
          "commitNameOld": "7edd55554a03d7cdaefd12e4a319a0059414fb99",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 5.54,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "actualSource": "    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n        if (count \u003d\u003d 0) {\n            return \"\";\n        } else if (count \u003c 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if ((start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0)) {\n            end \u003d \u0027z\u0027 + 1;\n            start \u003d \u0027 \u0027;\n            if (!letters \u0026\u0026 !numbers) {\n                start \u003d 0;\n                end \u003d Integer.MAX_VALUE;\n            }\n        }\n\n        StringBuffer buffer \u003d new StringBuffer();\n        int gap \u003d end - start;\n\n        while (count-- !\u003d 0) {\n            char ch;\n            if (chars \u003d\u003d null) {\n                ch \u003d (char) (random.nextInt(gap) + start);\n            } else {\n                ch \u003d chars[random.nextInt(gap) + start];\n            }\n            if ((letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch))\n                || (letters \u0026\u0026 Character.isLetter(ch))\n                || (numbers \u0026\u0026 Character.isDigit(ch))\n                || (!letters \u0026\u0026 !numbers)) {\n                buffer.append(ch);\n            } else {\n                count++;\n            }\n        }\n        return buffer.toString();\n    }",
          "path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
          "functionStartLine": 252,
          "functionName": "random",
          "diff": "@@ -1,38 +1,36 @@\n-    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n-        if( count \u003d\u003d 0 ) {\n+    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n+        if (count \u003d\u003d 0) {\n             return \"\";\n-        } else if( count \u003c 0 ) {\n+        } else if (count \u003c 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n-        if( (start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0) ) {\n+        if ((start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0)) {\n             end \u003d \u0027z\u0027 + 1;\n             start \u003d \u0027 \u0027;\n-            if(!letters \u0026\u0026 !numbers) {\n+            if (!letters \u0026\u0026 !numbers) {\n                 start \u003d 0;\n                 end \u003d Integer.MAX_VALUE;\n             }\n         }\n \n         StringBuffer buffer \u003d new StringBuffer();\n         int gap \u003d end - start;\n \n-        while(count-- !\u003d 0) {\n+        while (count-- !\u003d 0) {\n             char ch;\n-            if(set \u003d\u003d null) {\n-                ch \u003d (char)(random.nextInt(gap) + start);\n+            if (chars \u003d\u003d null) {\n+                ch \u003d (char) (random.nextInt(gap) + start);\n             } else {\n-                ch \u003d set[random.nextInt(gap) + start];\n+                ch \u003d chars[random.nextInt(gap) + start];\n             }\n-            if( (letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch)) ||\n-                (letters \u0026\u0026 Character.isLetter(ch)) ||\n-                (numbers \u0026\u0026 Character.isDigit(ch)) ||\n-                (!letters \u0026\u0026 !numbers)\n-              ) \n-            {\n-                buffer.append( ch );\n+            if ((letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch))\n+                || (letters \u0026\u0026 Character.isLetter(ch))\n+                || (numbers \u0026\u0026 Character.isDigit(ch))\n+                || (!letters \u0026\u0026 !numbers)) {\n+                buffer.append(ch);\n             } else {\n                 count++;\n             }\n         }\n         return buffer.toString();\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[count-int, start-int, end-int, letters-boolean, numbers-boolean, set-char[], random-Random]",
            "newValue": "[count-int, start-int, end-int, letters-boolean, numbers-boolean, chars-char[], random-Random]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Fix RandomStringUtils to not throw NPE all the time\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137543 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2003-07-31, 7:24 p.m.",
          "commitName": "43db5237ab2a2dbc3a79daed10499bb4dbf92a4e",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2003-07-26, 6:32 a.m.",
          "commitNameOld": "7edd55554a03d7cdaefd12e4a319a0059414fb99",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 5.54,
          "commitsBetweenForRepo": 37,
          "commitsBetweenForFile": 1,
          "actualSource": "    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n        if (count \u003d\u003d 0) {\n            return \"\";\n        } else if (count \u003c 0) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if ((start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0)) {\n            end \u003d \u0027z\u0027 + 1;\n            start \u003d \u0027 \u0027;\n            if (!letters \u0026\u0026 !numbers) {\n                start \u003d 0;\n                end \u003d Integer.MAX_VALUE;\n            }\n        }\n\n        StringBuffer buffer \u003d new StringBuffer();\n        int gap \u003d end - start;\n\n        while (count-- !\u003d 0) {\n            char ch;\n            if (chars \u003d\u003d null) {\n                ch \u003d (char) (random.nextInt(gap) + start);\n            } else {\n                ch \u003d chars[random.nextInt(gap) + start];\n            }\n            if ((letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch))\n                || (letters \u0026\u0026 Character.isLetter(ch))\n                || (numbers \u0026\u0026 Character.isDigit(ch))\n                || (!letters \u0026\u0026 !numbers)) {\n                buffer.append(ch);\n            } else {\n                count++;\n            }\n        }\n        return buffer.toString();\n    }",
          "path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
          "functionStartLine": 252,
          "functionName": "random",
          "diff": "@@ -1,38 +1,36 @@\n-    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n-        if( count \u003d\u003d 0 ) {\n+    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] chars, Random random) {\n+        if (count \u003d\u003d 0) {\n             return \"\";\n-        } else if( count \u003c 0 ) {\n+        } else if (count \u003c 0) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n-        if( (start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0) ) {\n+        if ((start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0)) {\n             end \u003d \u0027z\u0027 + 1;\n             start \u003d \u0027 \u0027;\n-            if(!letters \u0026\u0026 !numbers) {\n+            if (!letters \u0026\u0026 !numbers) {\n                 start \u003d 0;\n                 end \u003d Integer.MAX_VALUE;\n             }\n         }\n \n         StringBuffer buffer \u003d new StringBuffer();\n         int gap \u003d end - start;\n \n-        while(count-- !\u003d 0) {\n+        while (count-- !\u003d 0) {\n             char ch;\n-            if(set \u003d\u003d null) {\n-                ch \u003d (char)(random.nextInt(gap) + start);\n+            if (chars \u003d\u003d null) {\n+                ch \u003d (char) (random.nextInt(gap) + start);\n             } else {\n-                ch \u003d set[random.nextInt(gap) + start];\n+                ch \u003d chars[random.nextInt(gap) + start];\n             }\n-            if( (letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch)) ||\n-                (letters \u0026\u0026 Character.isLetter(ch)) ||\n-                (numbers \u0026\u0026 Character.isDigit(ch)) ||\n-                (!letters \u0026\u0026 !numbers)\n-              ) \n-            {\n-                buffer.append( ch );\n+            if ((letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch))\n+                || (letters \u0026\u0026 Character.isLetter(ch))\n+                || (numbers \u0026\u0026 Character.isDigit(ch))\n+                || (!letters \u0026\u0026 !numbers)) {\n+                buffer.append(ch);\n             } else {\n                 count++;\n             }\n         }\n         return buffer.toString();\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "e81e45f27fb6b3b4d82baa473e90e49d0317b77a": {
      "type": "Ybodychange",
      "commitMessage": "Severity\tDescription\tResource\tIn Folder\tLocation\tCreation Time\n\tUnnecessary cast to type int for expression of type char\tRandomStringUtils.java\tApache Jakarta Commons/lang/src/java/org/apache/commons/lang\tline 259\tJuly 23, 2003 11:22:36 AM\n\tUnnecessary cast to type int for expression of type char. It is already compatible with the argument type int\tRandomStringUtils.java\tApache Jakarta Commons/lang/src/java/org/apache/commons/lang\tline 258\tJuly 23, 2003 11:22:36 AM\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137500 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2003-07-25, 8:26 p.m.",
      "commitName": "e81e45f27fb6b3b4d82baa473e90e49d0317b77a",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "2003-07-19, 4:21 p.m.",
      "commitNameOld": "a0aef72d875ab7d1bd2d1e6ac93e282ffbebfc89",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 6.17,
      "commitsBetweenForRepo": 44,
      "commitsBetweenForFile": 1,
      "actualSource": "    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n        if( count \u003d\u003d 0 ) {\n            return \"\";\n        } else if( count \u003c 0 ) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if( (start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0) ) {\n            end \u003d \u0027z\u0027 + 1;\n            start \u003d \u0027 \u0027;\n            if(!letters \u0026\u0026 !numbers) {\n                start \u003d 0;\n                end \u003d Integer.MAX_VALUE;\n            }\n        }\n\n        StringBuffer buffer \u003d new StringBuffer();\n        int gap \u003d end - start;\n\n        while(count-- !\u003d 0) {\n            char ch;\n            if(set \u003d\u003d null) {\n                ch \u003d (char)(random.nextInt(gap) + start);\n            } else {\n                ch \u003d set[random.nextInt(gap) + start];\n            }\n            if( (letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch)) ||\n                (letters \u0026\u0026 Character.isLetter(ch)) ||\n                (numbers \u0026\u0026 Character.isDigit(ch)) ||\n                (!letters \u0026\u0026 !numbers)\n              ) \n            {\n                buffer.append( ch );\n            } else {\n                count++;\n            }\n        }\n        return buffer.toString();\n    }",
      "path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
      "functionStartLine": 251,
      "functionName": "random",
      "diff": "@@ -1,38 +1,38 @@\n     public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n         if( count \u003d\u003d 0 ) {\n             return \"\";\n         } else if( count \u003c 0 ) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n         if( (start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0) ) {\n-            end \u003d (int)\u0027z\u0027 + 1;\n-            start \u003d (int)\u0027 \u0027;\n+            end \u003d \u0027z\u0027 + 1;\n+            start \u003d \u0027 \u0027;\n             if(!letters \u0026\u0026 !numbers) {\n                 start \u003d 0;\n                 end \u003d Integer.MAX_VALUE;\n             }\n         }\n \n         StringBuffer buffer \u003d new StringBuffer();\n         int gap \u003d end - start;\n \n         while(count-- !\u003d 0) {\n             char ch;\n             if(set \u003d\u003d null) {\n                 ch \u003d (char)(random.nextInt(gap) + start);\n             } else {\n                 ch \u003d set[random.nextInt(gap) + start];\n             }\n             if( (letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch)) ||\n                 (letters \u0026\u0026 Character.isLetter(ch)) ||\n                 (numbers \u0026\u0026 Character.isDigit(ch)) ||\n                 (!letters \u0026\u0026 !numbers)\n               ) \n             {\n                 buffer.append( ch );\n             } else {\n                 count++;\n             }\n         }\n         return buffer.toString();\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "8f45918465c1c992d55fe08f2d7e49689b722b38": {
      "type": "Ybodychange",
      "commitMessage": "Ensure that RandomStringUtils returns all expected characters\nbug 20592, reported/patched by Phil Steitz\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137365 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2003-06-09, 5:36 p.m.",
      "commitName": "8f45918465c1c992d55fe08f2d7e49689b722b38",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "2003-05-20, 5:15 p.m.",
      "commitNameOld": "0cd7de5283b8c96e50638f2480a3b2743714247e",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 20.01,
      "commitsBetweenForRepo": 41,
      "commitsBetweenForFile": 1,
      "actualSource": "    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n        if( count \u003d\u003d 0 ) {\n            return \"\";\n        } else if( count \u003c 0 ) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if( (start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0) ) {\n            end \u003d (int)\u0027z\u0027 + 1;\n            start \u003d (int)\u0027 \u0027;\n            if(!letters \u0026\u0026 !numbers) {\n                start \u003d 0;\n                end \u003d Integer.MAX_VALUE;\n            }\n        }\n\n        StringBuffer buffer \u003d new StringBuffer();\n        int gap \u003d end - start;\n\n        while(count-- !\u003d 0) {\n            char ch;\n            if(set \u003d\u003d null) {\n                ch \u003d (char)(random.nextInt(gap) + start);\n            } else {\n                ch \u003d set[random.nextInt(gap) + start];\n            }\n            if( (letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch)) ||\n                (letters \u0026\u0026 Character.isLetter(ch)) ||\n                (numbers \u0026\u0026 Character.isDigit(ch)) ||\n                (!letters \u0026\u0026 !numbers)\n              ) \n            {\n                buffer.append( ch );\n            } else {\n                count++;\n            }\n        }\n        return buffer.toString();\n    }",
      "path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
      "functionStartLine": 252,
      "functionName": "random",
      "diff": "@@ -1,38 +1,38 @@\n     public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n         if( count \u003d\u003d 0 ) {\n             return \"\";\n         } else if( count \u003c 0 ) {\n             throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n         }\n         if( (start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0) ) {\n-            end \u003d (int)\u0027z\u0027;\n+            end \u003d (int)\u0027z\u0027 + 1;\n             start \u003d (int)\u0027 \u0027;\n             if(!letters \u0026\u0026 !numbers) {\n                 start \u003d 0;\n                 end \u003d Integer.MAX_VALUE;\n             }\n         }\n \n         StringBuffer buffer \u003d new StringBuffer();\n         int gap \u003d end - start;\n \n         while(count-- !\u003d 0) {\n             char ch;\n             if(set \u003d\u003d null) {\n                 ch \u003d (char)(random.nextInt(gap) + start);\n             } else {\n                 ch \u003d set[random.nextInt(gap) + start];\n             }\n             if( (letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch)) ||\n                 (letters \u0026\u0026 Character.isLetter(ch)) ||\n                 (numbers \u0026\u0026 Character.isDigit(ch)) ||\n                 (!letters \u0026\u0026 !numbers)\n               ) \n             {\n                 buffer.append( ch );\n             } else {\n                 count++;\n             }\n         }\n         return buffer.toString();\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3ac32dd142df1d1e0a5a36f224dcc73b1fa066e5": {
      "type": "Ybodychange",
      "commitMessage": "Patch for RandomString bug in which counts of 0 or negative counts would cause array exceptions.\n\nSubmitted by:\tville.skytta@iki.fi (Ville Skytt�)\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137289 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2003-04-09, 10:13 a.m.",
      "commitName": "3ac32dd142df1d1e0a5a36f224dcc73b1fa066e5",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2003-03-23, 1:02 p.m.",
      "commitNameOld": "637d681789b12e618871140154fdc7acee7a181d",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 16.84,
      "commitsBetweenForRepo": 19,
      "commitsBetweenForFile": 1,
      "actualSource": "    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n        if( count \u003d\u003d 0 ) {\n            return \"\";\n        } else if( count \u003c 0 ) {\n            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n        }\n        if( (start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0) ) {\n            end \u003d (int)\u0027z\u0027;\n            start \u003d (int)\u0027 \u0027;\n            if(!letters \u0026\u0026 !numbers) {\n                start \u003d 0;\n                end \u003d Integer.MAX_VALUE;\n            }\n        }\n\n        StringBuffer buffer \u003d new StringBuffer();\n        int gap \u003d end - start;\n\n        while(count-- !\u003d 0) {\n            char ch;\n            if(set \u003d\u003d null) {\n                ch \u003d (char)(random.nextInt(gap) + start);\n            } else {\n                ch \u003d set[random.nextInt(gap) + start];\n            }\n            if( (letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch)) ||\n                (letters \u0026\u0026 Character.isLetter(ch)) ||\n                (numbers \u0026\u0026 Character.isDigit(ch)) ||\n                (!letters \u0026\u0026 !numbers)\n              ) \n            {\n                buffer.append( ch );\n            } else {\n                count++;\n            }\n        }\n        return buffer.toString();\n    }",
      "path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
      "functionStartLine": 251,
      "functionName": "random",
      "diff": "@@ -1,33 +1,38 @@\n     public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n+        if( count \u003d\u003d 0 ) {\n+            return \"\";\n+        } else if( count \u003c 0 ) {\n+            throw new IllegalArgumentException(\"Requested random string length \" + count + \" is less than 0.\");\n+        }\n         if( (start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0) ) {\n             end \u003d (int)\u0027z\u0027;\n             start \u003d (int)\u0027 \u0027;\n             if(!letters \u0026\u0026 !numbers) {\n                 start \u003d 0;\n                 end \u003d Integer.MAX_VALUE;\n             }\n         }\n \n         StringBuffer buffer \u003d new StringBuffer();\n         int gap \u003d end - start;\n \n         while(count-- !\u003d 0) {\n             char ch;\n             if(set \u003d\u003d null) {\n                 ch \u003d (char)(random.nextInt(gap) + start);\n             } else {\n                 ch \u003d set[random.nextInt(gap) + start];\n             }\n             if( (letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch)) ||\n                 (letters \u0026\u0026 Character.isLetter(ch)) ||\n                 (numbers \u0026\u0026 Character.isDigit(ch)) ||\n                 (!letters \u0026\u0026 !numbers)\n               ) \n             {\n                 buffer.append( ch );\n             } else {\n                 count++;\n             }\n         }\n         return buffer.toString();\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d9bc18e804bf754b8cc11c4ce61a5dc1b9cda242": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Applied patch from Tomasz Skutnik which allows a Random object to be passed\nin. This means that method calls to RandomStringUtils can be predictable.\n\nSubmitted by:\tTomasz Skutnik \u003cTomasz.Skutnik@e-point.pl\u003e\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137238 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2003-02-01, 10:46 p.m.",
      "commitName": "d9bc18e804bf754b8cc11c4ce61a5dc1b9cda242",
      "commitAuthor": "Henri Yandell",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Applied patch from Tomasz Skutnik which allows a Random object to be passed\nin. This means that method calls to RandomStringUtils can be predictable.\n\nSubmitted by:\tTomasz Skutnik \u003cTomasz.Skutnik@e-point.pl\u003e\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137238 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2003-02-01, 10:46 p.m.",
          "commitName": "d9bc18e804bf754b8cc11c4ce61a5dc1b9cda242",
          "commitAuthor": "Henri Yandell",
          "commitDateOld": "2002-12-22, 7:32 p.m.",
          "commitNameOld": "8e3f80d77e1601a875446fa8ca01d5c10cb30170",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 41.13,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n        if( (start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0) ) {\n            end \u003d (int)\u0027z\u0027;\n            start \u003d (int)\u0027 \u0027;\n            if(!letters \u0026\u0026 !numbers) {\n                start \u003d 0;\n                end \u003d Integer.MAX_VALUE;\n            }\n        }\n\n        StringBuffer buffer \u003d new StringBuffer();\n        int gap \u003d end - start;\n\n        while(count-- !\u003d 0) {\n            char ch;\n            if(set \u003d\u003d null) {\n                ch \u003d (char)(random.nextInt(gap) + start);\n            } else {\n                ch \u003d set[random.nextInt(gap) + start];\n            }\n            if( (letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch)) ||\n                (letters \u0026\u0026 Character.isLetter(ch)) ||\n                (numbers \u0026\u0026 Character.isDigit(ch)) ||\n                (!letters \u0026\u0026 !numbers)\n              ) \n            {\n                buffer.append( ch );\n            } else {\n                count++;\n            }\n        }\n        return buffer.toString();\n    }",
          "path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
          "functionStartLine": 250,
          "functionName": "random",
          "diff": "@@ -1,33 +1,33 @@\n-    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set) {\n+    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n         if( (start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0) ) {\n             end \u003d (int)\u0027z\u0027;\n             start \u003d (int)\u0027 \u0027;\n             if(!letters \u0026\u0026 !numbers) {\n                 start \u003d 0;\n                 end \u003d Integer.MAX_VALUE;\n             }\n         }\n \n         StringBuffer buffer \u003d new StringBuffer();\n         int gap \u003d end - start;\n \n         while(count-- !\u003d 0) {\n             char ch;\n             if(set \u003d\u003d null) {\n-                ch \u003d (char)(RANDOM.nextInt(gap) + start);\n+                ch \u003d (char)(random.nextInt(gap) + start);\n             } else {\n-                ch \u003d set[RANDOM.nextInt(gap) + start];\n+                ch \u003d set[random.nextInt(gap) + start];\n             }\n             if( (letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch)) ||\n                 (letters \u0026\u0026 Character.isLetter(ch)) ||\n                 (numbers \u0026\u0026 Character.isDigit(ch)) ||\n                 (!letters \u0026\u0026 !numbers)\n               ) \n             {\n                 buffer.append( ch );\n             } else {\n                 count++;\n             }\n         }\n         return buffer.toString();\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[count-int, start-int, end-int, letters-boolean, numbers-boolean, set-char[]]",
            "newValue": "[count-int, start-int, end-int, letters-boolean, numbers-boolean, set-char[], random-Random]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Applied patch from Tomasz Skutnik which allows a Random object to be passed\nin. This means that method calls to RandomStringUtils can be predictable.\n\nSubmitted by:\tTomasz Skutnik \u003cTomasz.Skutnik@e-point.pl\u003e\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137238 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2003-02-01, 10:46 p.m.",
          "commitName": "d9bc18e804bf754b8cc11c4ce61a5dc1b9cda242",
          "commitAuthor": "Henri Yandell",
          "commitDateOld": "2002-12-22, 7:32 p.m.",
          "commitNameOld": "8e3f80d77e1601a875446fa8ca01d5c10cb30170",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 41.13,
          "commitsBetweenForRepo": 28,
          "commitsBetweenForFile": 1,
          "actualSource": "    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n        if( (start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0) ) {\n            end \u003d (int)\u0027z\u0027;\n            start \u003d (int)\u0027 \u0027;\n            if(!letters \u0026\u0026 !numbers) {\n                start \u003d 0;\n                end \u003d Integer.MAX_VALUE;\n            }\n        }\n\n        StringBuffer buffer \u003d new StringBuffer();\n        int gap \u003d end - start;\n\n        while(count-- !\u003d 0) {\n            char ch;\n            if(set \u003d\u003d null) {\n                ch \u003d (char)(random.nextInt(gap) + start);\n            } else {\n                ch \u003d set[random.nextInt(gap) + start];\n            }\n            if( (letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch)) ||\n                (letters \u0026\u0026 Character.isLetter(ch)) ||\n                (numbers \u0026\u0026 Character.isDigit(ch)) ||\n                (!letters \u0026\u0026 !numbers)\n              ) \n            {\n                buffer.append( ch );\n            } else {\n                count++;\n            }\n        }\n        return buffer.toString();\n    }",
          "path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
          "functionStartLine": 250,
          "functionName": "random",
          "diff": "@@ -1,33 +1,33 @@\n-    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set) {\n+    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set, Random random) {\n         if( (start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0) ) {\n             end \u003d (int)\u0027z\u0027;\n             start \u003d (int)\u0027 \u0027;\n             if(!letters \u0026\u0026 !numbers) {\n                 start \u003d 0;\n                 end \u003d Integer.MAX_VALUE;\n             }\n         }\n \n         StringBuffer buffer \u003d new StringBuffer();\n         int gap \u003d end - start;\n \n         while(count-- !\u003d 0) {\n             char ch;\n             if(set \u003d\u003d null) {\n-                ch \u003d (char)(RANDOM.nextInt(gap) + start);\n+                ch \u003d (char)(random.nextInt(gap) + start);\n             } else {\n-                ch \u003d set[RANDOM.nextInt(gap) + start];\n+                ch \u003d set[random.nextInt(gap) + start];\n             }\n             if( (letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch)) ||\n                 (letters \u0026\u0026 Character.isLetter(ch)) ||\n                 (numbers \u0026\u0026 Character.isDigit(ch)) ||\n                 (!letters \u0026\u0026 !numbers)\n               ) \n             {\n                 buffer.append( ch );\n             } else {\n                 count++;\n             }\n         }\n         return buffer.toString();\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "6627f7ad8fb08d6c23b83d6c9f0a6830e9e7085a": {
      "type": "Yintroduced",
      "commitMessage": "Initial copy from jakarta-commons-sandbox\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@136932 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2002-07-18, 11:35 p.m.",
      "commitName": "6627f7ad8fb08d6c23b83d6c9f0a6830e9e7085a",
      "commitAuthor": "Henri Yandell",
      "diff": "@@ -0,0 +1,33 @@\n+    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set) {\n+        if( (start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0) ) {\n+            end \u003d (int)\u0027z\u0027;\n+            start \u003d (int)\u0027 \u0027;\n+            if(!letters \u0026\u0026 !numbers) {\n+                start \u003d 0;\n+                end \u003d Integer.MAX_VALUE;\n+            }\n+        }\n+\n+        StringBuffer buffer \u003d new StringBuffer();\n+        int gap \u003d end - start;\n+\n+        while(count-- !\u003d 0) {\n+            char ch;\n+            if(set \u003d\u003d null) {\n+                ch \u003d (char)(RANDOM.nextInt(gap) + start);\n+            } else {\n+                ch \u003d set[RANDOM.nextInt(gap) + start];\n+            }\n+            if( (letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch)) ||\n+                (letters \u0026\u0026 Character.isLetter(ch)) ||\n+                (numbers \u0026\u0026 Character.isDigit(ch)) ||\n+                (!letters \u0026\u0026 !numbers)\n+              ) \n+            {\n+                buffer.append( ch );\n+            } else {\n+                count++;\n+            }\n+        }\n+        return buffer.toString();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public static String random(int count, int start, int end, boolean letters, boolean numbers, char[] set) {\n        if( (start \u003d\u003d 0) \u0026\u0026 (end \u003d\u003d 0) ) {\n            end \u003d (int)\u0027z\u0027;\n            start \u003d (int)\u0027 \u0027;\n            if(!letters \u0026\u0026 !numbers) {\n                start \u003d 0;\n                end \u003d Integer.MAX_VALUE;\n            }\n        }\n\n        StringBuffer buffer \u003d new StringBuffer();\n        int gap \u003d end - start;\n\n        while(count-- !\u003d 0) {\n            char ch;\n            if(set \u003d\u003d null) {\n                ch \u003d (char)(RANDOM.nextInt(gap) + start);\n            } else {\n                ch \u003d set[RANDOM.nextInt(gap) + start];\n            }\n            if( (letters \u0026\u0026 numbers \u0026\u0026 Character.isLetterOrDigit(ch)) ||\n                (letters \u0026\u0026 Character.isLetter(ch)) ||\n                (numbers \u0026\u0026 Character.isDigit(ch)) ||\n                (!letters \u0026\u0026 !numbers)\n              ) \n            {\n                buffer.append( ch );\n            } else {\n                count++;\n            }\n        }\n        return buffer.toString();\n    }",
      "path": "src/java/org/apache/commons/lang/RandomStringUtils.java",
      "functionStartLine": 194,
      "functionName": "random"
    }
  }
}