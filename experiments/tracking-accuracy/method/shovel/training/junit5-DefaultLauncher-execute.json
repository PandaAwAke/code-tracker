{
  "origin": "codeshovel",
  "repositoryName": "junit5",
  "repositoryPath": "H:\\Projects\\junit-team\\junit5/.git",
  "startCommitName": "77cfe71e7f787c59626198e25350545f41e968bd",
  "sourceFileName": "DefaultLauncher.java",
  "functionName": "execute",
  "functionId": "execute___root-Root__configurationParameters-ConfigurationParameters__listeners-TestExecutionListener",
  "sourceFilePath": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
  "functionStartLine": 142,
  "functionEndLine": 157,
  "numCommitsSeen": 263,
  "timeTaken": 1869,
  "changeHistory": [
    "2f3440e0f221255a83b28c42cf77407bde92a8b4",
    "2eef1f0dbbcd9a3fad2d00a65b37a39d97a079cb",
    "e99a78098dae04b1fd2c5cc28ff2a09ab77567e4",
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
    "4537bec58804c392a8bce296dced0337c8ec1a8d",
    "e273d6681b96509b0bd35916a82fcfada21f18c6",
    "5f6f33a074e8469211e5d648a4f98a3628be18a1",
    "6d3cbe6240ef9bcc2aec860f0400a6edd0bdd6bf",
    "9c963d4a51e6d0fa8ecddb6c6f9f72f25e06dcd0",
    "0d96e17fb66ba6e7dc174c5c87a1c4cfc3fade33",
    "a2e588e96c3a763553d764d5c35a44b9eea41d75",
    "961fd47344c55d21907607ec9672df6d4f3d2362",
    "93397066597b7ca8af35a77b9559bdc079d4f5d5",
    "9da25e126d174ba6e6ae02596afa538a7cafe17b",
    "9f7d082872c4b4109729a3a480f1dedad3083bad",
    "99aaaf56f401af1e08cccd0c013a8633c04eb22b",
    "e4c640078022076935caef8edd312ea547f3b9d1",
    "830b6d5976b6db01dad3866cfb3d54c6216b1252",
    "40ea4f270254c3faf95fea9e2a48ecb7a6c47bb8",
    "c2b82a7de0e755b137e595906f8dc415f1619727",
    "891efa3653cb899ca27afcd1abc385fc3fa663fa",
    "4a34c1bc27a7ad936639a83ad7e34f89add92c4c",
    "90557f5414831ca924bca50c1591dd348c1c7162",
    "5b99f734253c15189a88cd5704ec30ded2f24694",
    "2faf053a85fd24cb6f65e7b1258d7c507587866c",
    "b9a89c31681f519fcbe2c0ec5ce474f97aec5240",
    "487bbff85f6651921a4c4a3520a9e315b0f2b381",
    "b2854484a0f6076f623028376c9b0827ba6ee8fe",
    "cdc709cdb2651a16725ba16eb9c2470d617b5b85",
    "a52d04ff1b9a42899242b1b9cc7a8147bb2f3776",
    "cdaf66815c7308c9d5a430f08c7bc0d790a80534",
    "62a0ab3e60e4a1c62c806934158444f901d8e22c",
    "db7c029008a0fab7fb6770078c1b54a175c35c6c",
    "36f0d62665a55a1250823ea1b7a7d9148efb27a8",
    "cbf97077bae0db71dc3a7cade28c3b00587a8699",
    "f6372b05546e29c74e6809f4e54a096f537bcd5d",
    "226ecd8efc45e4540bba43f6c604e891b5a94689",
    "75a91267a92e9fd4d171a3f18f2135e675687961"
  ],
  "changeHistoryShort": {
    "2f3440e0f221255a83b28c42cf77407bde92a8b4": "Ybodychange",
    "2eef1f0dbbcd9a3fad2d00a65b37a39d97a079cb": "Ybodychange",
    "e99a78098dae04b1fd2c5cc28ff2a09ab77567e4": "Ymultichange(Yparameterchange,Ybodychange)",
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374": "Yfilerename",
    "4537bec58804c392a8bce296dced0337c8ec1a8d": "Yfilerename",
    "e273d6681b96509b0bd35916a82fcfada21f18c6": "Yfilerename",
    "5f6f33a074e8469211e5d648a4f98a3628be18a1": "Ybodychange",
    "6d3cbe6240ef9bcc2aec860f0400a6edd0bdd6bf": "Ymultichange(Yparameterchange,Ybodychange)",
    "9c963d4a51e6d0fa8ecddb6c6f9f72f25e06dcd0": "Ybodychange",
    "0d96e17fb66ba6e7dc174c5c87a1c4cfc3fade33": "Yfilerename",
    "a2e588e96c3a763553d764d5c35a44b9eea41d75": "Yfilerename",
    "961fd47344c55d21907607ec9672df6d4f3d2362": "Ymultichange(Yfilerename,Ybodychange)",
    "93397066597b7ca8af35a77b9559bdc079d4f5d5": "Ybodychange",
    "9da25e126d174ba6e6ae02596afa538a7cafe17b": "Yparameterchange",
    "9f7d082872c4b4109729a3a480f1dedad3083bad": "Ybodychange",
    "99aaaf56f401af1e08cccd0c013a8633c04eb22b": "Ybodychange",
    "e4c640078022076935caef8edd312ea547f3b9d1": "Ybodychange",
    "830b6d5976b6db01dad3866cfb3d54c6216b1252": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
    "40ea4f270254c3faf95fea9e2a48ecb7a6c47bb8": "Ybodychange",
    "c2b82a7de0e755b137e595906f8dc415f1619727": "Ybodychange",
    "891efa3653cb899ca27afcd1abc385fc3fa663fa": "Ybodychange",
    "4a34c1bc27a7ad936639a83ad7e34f89add92c4c": "Ybodychange",
    "90557f5414831ca924bca50c1591dd348c1c7162": "Ybodychange",
    "5b99f734253c15189a88cd5704ec30ded2f24694": "Ymultichange(Ymodifierchange,Ybodychange)",
    "2faf053a85fd24cb6f65e7b1258d7c507587866c": "Ybodychange",
    "b9a89c31681f519fcbe2c0ec5ce474f97aec5240": "Ybodychange",
    "487bbff85f6651921a4c4a3520a9e315b0f2b381": "Ybodychange",
    "b2854484a0f6076f623028376c9b0827ba6ee8fe": "Ybodychange",
    "cdc709cdb2651a16725ba16eb9c2470d617b5b85": "Ybodychange",
    "a52d04ff1b9a42899242b1b9cc7a8147bb2f3776": "Ybodychange",
    "cdaf66815c7308c9d5a430f08c7bc0d790a80534": "Ymultichange(Ymodifierchange,Ybodychange)",
    "62a0ab3e60e4a1c62c806934158444f901d8e22c": "Ybodychange",
    "db7c029008a0fab7fb6770078c1b54a175c35c6c": "Ybodychange",
    "36f0d62665a55a1250823ea1b7a7d9148efb27a8": "Ybodychange",
    "cbf97077bae0db71dc3a7cade28c3b00587a8699": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
    "f6372b05546e29c74e6809f4e54a096f537bcd5d": "Yexceptionschange",
    "226ecd8efc45e4540bba43f6c604e891b5a94689": "Ymultichange(Yparameterchange,Ybodychange)",
    "75a91267a92e9fd4d171a3f18f2135e675687961": "Yintroduced"
  },
  "changeHistoryDetails": {
    "2f3440e0f221255a83b28c42cf77407bde92a8b4": {
      "type": "Ybodychange",
      "commitMessage": "Introduce support for parallel test execution\n\nThis commit adds opt-in support for parallel test execution and\ncapturing output to `System.out` and `System.err`. Both features are\ndisabled by default but can be enabled and configured using\nconfiguration parameters.\n\nThe implementation is based on the Fork/Join Framework and designed to\nbe reusable by other test engines that extend HierarchicalTestEngine.\n\nThe Jupiter API provides annotations to declare which shared resources a\ntest needs to access and in which way. Moreover, the execution mode of a\ntest can be influenced.\n\nIn addition, a number of TestExecutionListeners have been made\nthread-safe.\n\nThe documentation subproject is now configured to execute tests in\nparallel. All other subprojects will have to wait as Gradle currently\nblows up when used with parallel test execution.\n\nResolves #60. Closes #1461.\n\nCo-authored-by: Leonard Br√ºnings \u003clord_damokles@gmx.net\u003e\nCo-authored-by: Christian Stein \u003csormuras@gmail.com\u003e\n",
      "commitDate": "2018-06-22, 1:55 p.m.",
      "commitName": "2f3440e0f221255a83b28c42cf77407bde92a8b4",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2018-06-08, 6:56 a.m.",
      "commitNameOld": "27ea0d42179039b2e761bd0d92a875a3edf42c3d",
      "commitAuthorOld": "Christian Stein",
      "daysBetweenCommits": 14.29,
      "commitsBetweenForRepo": 21,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(Root root, ConfigurationParameters configurationParameters,\n\t\t\tTestExecutionListener... listeners) {\n\t\tTestExecutionListenerRegistry listenerRegistry \u003d buildListenerRegistryForExecution(listeners);\n\t\twithInterceptedStreams(configurationParameters, listenerRegistry, testExecutionListener -\u003e {\n\t\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n\t\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n\t\t\t\ttestExecutionListener);\n\t\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n\t\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n\t\t\t\texecute(testEngine,\n\t\t\t\t\tnew ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n\t\t\t}\n\t\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t\t});\n\t}",
      "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 142,
      "functionName": "execute",
      "diff": "@@ -1,15 +1,16 @@\n \tprivate void execute(Root root, ConfigurationParameters configurationParameters,\n \t\t\tTestExecutionListener... listeners) {\n-\n \t\tTestExecutionListenerRegistry listenerRegistry \u003d buildListenerRegistryForExecution(listeners);\n-\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n-\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n-\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n-\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n-\t\t\ttestExecutionListener);\n-\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n-\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n-\t\t\texecute(testEngine, new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n-\t\t}\n-\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n+\t\twithInterceptedStreams(configurationParameters, listenerRegistry, testExecutionListener -\u003e {\n+\t\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n+\t\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n+\t\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n+\t\t\t\ttestExecutionListener);\n+\t\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n+\t\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n+\t\t\t\texecute(testEngine,\n+\t\t\t\t\tnew ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n+\t\t\t}\n+\t\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n+\t\t});\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2eef1f0dbbcd9a3fad2d00a65b37a39d97a079cb": {
      "type": "Ybodychange",
      "commitMessage": "Handle exceptions in test execution phase\n\nState: work-in-progress\n\nAddresses: #750\n",
      "commitDate": "2017-04-15, 6:27 a.m.",
      "commitName": "2eef1f0dbbcd9a3fad2d00a65b37a39d97a079cb",
      "commitAuthor": "Christian Stein",
      "commitDateOld": "2017-04-15, 6:27 a.m.",
      "commitNameOld": "c49b423f2d1c723a3724597049810416a91f5cba",
      "commitAuthorOld": "Christian Stein",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(Root root, ConfigurationParameters configurationParameters,\n\t\t\tTestExecutionListener... listeners) {\n\t\tTestExecutionListenerRegistry listenerRegistry \u003d buildListenerRegistryForExecution(listeners);\n\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n\t\t\ttestExecutionListener);\n\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n\t\t\texecute(testEngine, new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
      "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 143,
      "functionName": "execute",
      "diff": "@@ -1,14 +1,14 @@\n \tprivate void execute(Root root, ConfigurationParameters configurationParameters,\n \t\t\tTestExecutionListener... listeners) {\n \t\tTestExecutionListenerRegistry listenerRegistry \u003d buildListenerRegistryForExecution(listeners);\n \t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n \t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n \t\t\ttestExecutionListener);\n \t\tfor (TestEngine testEngine : root.getTestEngines()) {\n \t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n-\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n+\t\t\texecute(testEngine, new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n \t\t}\n \t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e99a78098dae04b1fd2c5cc28ff2a09ab77567e4": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Add Launcher.execute(LauncherDiscoveryRequest, TestExecutionListener...)\n\nAddresses #628 by adding an overloaded execute(LauncherDiscoveryRequest,\nTestExecutionListener...) method that uses the supplied\nTestExecutionListeners in addition to already registered listeners but\nonly for the supplied LauncherDiscoveryRequest.\n",
      "commitDate": "2017-03-19, 12:33 p.m.",
      "commitName": "e99a78098dae04b1fd2c5cc28ff2a09ab77567e4",
      "commitAuthor": "Christian Stein",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Add Launcher.execute(LauncherDiscoveryRequest, TestExecutionListener...)\n\nAddresses #628 by adding an overloaded execute(LauncherDiscoveryRequest,\nTestExecutionListener...) method that uses the supplied\nTestExecutionListeners in addition to already registered listeners but\nonly for the supplied LauncherDiscoveryRequest.\n",
          "commitDate": "2017-03-19, 12:33 p.m.",
          "commitName": "e99a78098dae04b1fd2c5cc28ff2a09ab77567e4",
          "commitAuthor": "Christian Stein",
          "commitDateOld": "2017-01-02, 3:10 p.m.",
          "commitNameOld": "73f3eeb436e78226f19554f2c2b5dab63e103670",
          "commitAuthorOld": "JUnit Team",
          "daysBetweenCommits": 75.85,
          "commitsBetweenForRepo": 236,
          "commitsBetweenForFile": 1,
          "actualSource": "\tprivate void execute(Root root, ConfigurationParameters configurationParameters,\n\t\t\tTestExecutionListener... listeners) {\n\t\tTestExecutionListenerRegistry listenerRegistry \u003d buildListenerRegistryForExecution(listeners);\n\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n\t\t\ttestExecutionListener);\n\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
          "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
          "functionStartLine": 127,
          "functionName": "execute",
          "diff": "@@ -1,12 +1,14 @@\n-\tprivate void execute(Root root, ConfigurationParameters configurationParameters) {\n+\tprivate void execute(Root root, ConfigurationParameters configurationParameters,\n+\t\t\tTestExecutionListener... listeners) {\n+\t\tTestExecutionListenerRegistry listenerRegistry \u003d buildListenerRegistryForExecution(listeners);\n \t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n-\t\tTestExecutionListener testExecutionListener \u003d this.listenerRegistry.getCompositeTestExecutionListener();\n+\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n \t\t\ttestExecutionListener);\n \t\tfor (TestEngine testEngine : root.getTestEngines()) {\n \t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n \t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n \t\t}\n \t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[root-Root, configurationParameters-ConfigurationParameters]",
            "newValue": "[root-Root, configurationParameters-ConfigurationParameters, listeners-TestExecutionListener]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Add Launcher.execute(LauncherDiscoveryRequest, TestExecutionListener...)\n\nAddresses #628 by adding an overloaded execute(LauncherDiscoveryRequest,\nTestExecutionListener...) method that uses the supplied\nTestExecutionListeners in addition to already registered listeners but\nonly for the supplied LauncherDiscoveryRequest.\n",
          "commitDate": "2017-03-19, 12:33 p.m.",
          "commitName": "e99a78098dae04b1fd2c5cc28ff2a09ab77567e4",
          "commitAuthor": "Christian Stein",
          "commitDateOld": "2017-01-02, 3:10 p.m.",
          "commitNameOld": "73f3eeb436e78226f19554f2c2b5dab63e103670",
          "commitAuthorOld": "JUnit Team",
          "daysBetweenCommits": 75.85,
          "commitsBetweenForRepo": 236,
          "commitsBetweenForFile": 1,
          "actualSource": "\tprivate void execute(Root root, ConfigurationParameters configurationParameters,\n\t\t\tTestExecutionListener... listeners) {\n\t\tTestExecutionListenerRegistry listenerRegistry \u003d buildListenerRegistryForExecution(listeners);\n\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n\t\t\ttestExecutionListener);\n\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
          "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
          "functionStartLine": 127,
          "functionName": "execute",
          "diff": "@@ -1,12 +1,14 @@\n-\tprivate void execute(Root root, ConfigurationParameters configurationParameters) {\n+\tprivate void execute(Root root, ConfigurationParameters configurationParameters,\n+\t\t\tTestExecutionListener... listeners) {\n+\t\tTestExecutionListenerRegistry listenerRegistry \u003d buildListenerRegistryForExecution(listeners);\n \t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n-\t\tTestExecutionListener testExecutionListener \u003d this.listenerRegistry.getCompositeTestExecutionListener();\n+\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n \t\t\ttestExecutionListener);\n \t\tfor (TestEngine testEngine : root.getTestEngines()) {\n \t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n \t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n \t\t}\n \t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "4972eb58d680a30e8fbd1ffb6cdc6477bef83374": {
      "type": "Yfilerename",
      "commitMessage": "Rename all JUnit 5 artifacts to platform, jupiter, \u0026 vintage\n\nIssue: #286\n",
      "commitDate": "2016-06-20, 4:59 a.m.",
      "commitName": "4972eb58d680a30e8fbd1ffb6cdc6477bef83374",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016-06-19, 2:04 p.m.",
      "commitNameOld": "e5b7300ba40a0420e310d463a63ea4c10cc8d9b9",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.62,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(Root root, ConfigurationParameters configurationParameters) {\n\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n\t\tTestExecutionListener testExecutionListener \u003d this.listenerRegistry.getCompositeTestExecutionListener();\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n\t\t\ttestExecutionListener);\n\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
      "path": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 116,
      "functionName": "execute",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
        "newPath": "junit-platform-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java"
      }
    },
    "4537bec58804c392a8bce296dced0337c8ec1a8d": {
      "type": "Yfilerename",
      "commitMessage": "Rename remaining org.junit.gen5 base packages to org.junit.platform\n\nIssue: #286\n",
      "commitDate": "2016-06-19, 1:22 p.m.",
      "commitName": "4537bec58804c392a8bce296dced0337c8ec1a8d",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016-06-19, 12:25 p.m.",
      "commitNameOld": "4dd821ac0cf681f17f14e1dcd383b10c99104e70",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(Root root, ConfigurationParameters configurationParameters) {\n\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n\t\tTestExecutionListener testExecutionListener \u003d this.listenerRegistry.getCompositeTestExecutionListener();\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n\t\t\ttestExecutionListener);\n\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java",
      "functionStartLine": 116,
      "functionName": "execute",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/core/DefaultLauncher.java",
        "newPath": "junit-launcher/src/main/java/org/junit/platform/launcher/core/DefaultLauncher.java"
      }
    },
    "e273d6681b96509b0bd35916a82fcfada21f18c6": {
      "type": "Yfilerename",
      "commitMessage": "Rename launcher.main package to launcher.core\n",
      "commitDate": "2016-06-18, 5:26 p.m.",
      "commitName": "e273d6681b96509b0bd35916a82fcfada21f18c6",
      "commitAuthor": "JUnit Team",
      "commitDateOld": "2016-06-18, 5:19 p.m.",
      "commitNameOld": "d4fca2b705b1f05312a59e71d37853e15632c437",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(Root root, ConfigurationParameters configurationParameters) {\n\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n\t\tTestExecutionListener testExecutionListener \u003d this.listenerRegistry.getCompositeTestExecutionListener();\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n\t\t\ttestExecutionListener);\n\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/core/DefaultLauncher.java",
      "functionStartLine": 116,
      "functionName": "execute",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
        "newPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/core/DefaultLauncher.java"
      }
    },
    "5f6f33a074e8469211e5d648a4f98a3628be18a1": {
      "type": "Ybodychange",
      "commitMessage": "Polish Javadoc for Engine and Launcher APIs\n\nIssue: #234\n",
      "commitDate": "2016-05-28, 9:26 a.m.",
      "commitName": "5f6f33a074e8469211e5d648a4f98a3628be18a1",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016-05-13, 12:47 p.m.",
      "commitNameOld": "6d3cbe6240ef9bcc2aec860f0400a6edd0bdd6bf",
      "commitAuthorOld": "Stefan Bechtold",
      "daysBetweenCommits": 14.86,
      "commitsBetweenForRepo": 100,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(Root root, ConfigurationParameters configurationParameters) {\n\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n\t\tTestExecutionListener testExecutionListener \u003d this.listenerRegistry.getCompositeTestExecutionListener();\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n\t\t\ttestExecutionListener);\n\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
      "functionStartLine": 109,
      "functionName": "execute",
      "diff": "@@ -1,12 +1,12 @@\n \tprivate void execute(Root root, ConfigurationParameters configurationParameters) {\n \t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n-\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n+\t\tTestExecutionListener testExecutionListener \u003d this.listenerRegistry.getCompositeTestExecutionListener();\n \t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n \t\t\ttestExecutionListener);\n \t\tfor (TestEngine testEngine : root.getTestEngines()) {\n \t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n \t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n \t\t}\n \t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "6d3cbe6240ef9bcc2aec860f0400a6edd0bdd6bf": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "ConfigurationParameters object is passed into ExecutionRequest #233\n",
      "commitDate": "2016-05-13, 12:47 p.m.",
      "commitName": "6d3cbe6240ef9bcc2aec860f0400a6edd0bdd6bf",
      "commitAuthor": "Stefan Bechtold",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "ConfigurationParameters object is passed into ExecutionRequest #233\n",
          "commitDate": "2016-05-13, 12:47 p.m.",
          "commitName": "6d3cbe6240ef9bcc2aec860f0400a6edd0bdd6bf",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2016-05-13, 11:49 a.m.",
          "commitNameOld": "875b6ea55d22a6b5e7d734974d7d710fb05825a1",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "\tprivate void execute(Root root, ConfigurationParameters configurationParameters) {\n\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n\t\t\ttestExecutionListener);\n\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
          "functionStartLine": 109,
          "functionName": "execute",
          "diff": "@@ -1,12 +1,12 @@\n-\tprivate void execute(Root root) {\n+\tprivate void execute(Root root, ConfigurationParameters configurationParameters) {\n \t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n \t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n \t\t\ttestExecutionListener);\n \t\tfor (TestEngine testEngine : root.getTestEngines()) {\n \t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n-\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n+\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n \t\t}\n \t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[root-Root]",
            "newValue": "[root-Root, configurationParameters-ConfigurationParameters]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "ConfigurationParameters object is passed into ExecutionRequest #233\n",
          "commitDate": "2016-05-13, 12:47 p.m.",
          "commitName": "6d3cbe6240ef9bcc2aec860f0400a6edd0bdd6bf",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2016-05-13, 11:49 a.m.",
          "commitNameOld": "875b6ea55d22a6b5e7d734974d7d710fb05825a1",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 0.04,
          "commitsBetweenForRepo": 10,
          "commitsBetweenForFile": 1,
          "actualSource": "\tprivate void execute(Root root, ConfigurationParameters configurationParameters) {\n\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n\t\t\ttestExecutionListener);\n\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
          "functionStartLine": 109,
          "functionName": "execute",
          "diff": "@@ -1,12 +1,12 @@\n-\tprivate void execute(Root root) {\n+\tprivate void execute(Root root, ConfigurationParameters configurationParameters) {\n \t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n \t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n \t\t\ttestExecutionListener);\n \t\tfor (TestEngine testEngine : root.getTestEngines()) {\n \t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n-\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n+\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener, configurationParameters));\n \t\t}\n \t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "9c963d4a51e6d0fa8ecddb6c6f9f72f25e06dcd0": {
      "type": "Ybodychange",
      "commitMessage": "Simplify DefaultLauncher, remove TestEngineRegistry interface\n",
      "commitDate": "2016-01-22, 5:32 a.m.",
      "commitName": "9c963d4a51e6d0fa8ecddb6c6f9f72f25e06dcd0",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2016-01-22, 5:26 a.m.",
      "commitNameOld": "1f209b6b9e9c66c4931f34a5d83df8e11c1d6dea",
      "commitAuthorOld": "Matthias Merdes",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(Root root) {\n\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n\t\t\ttestExecutionListener);\n\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
      "functionStartLine": 93,
      "functionName": "execute",
      "diff": "@@ -1,12 +1,12 @@\n \tprivate void execute(Root root) {\n \t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n-\t\tTestExecutionListener testExecutionListener \u003d testExecutionListenerRegistry.getCompositeTestExecutionListener();\n+\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n \t\t\ttestExecutionListener);\n \t\tfor (TestEngine testEngine : root.getTestEngines()) {\n \t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n \t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n \t\t}\n \t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0d96e17fb66ba6e7dc174c5c87a1c4cfc3fade33": {
      "type": "Yfilerename",
      "commitMessage": "Rename JUnit5Launcher to DefaultLauncher\n\nIssue: #129\n",
      "commitDate": "2016-01-20, 12:52 p.m.",
      "commitName": "0d96e17fb66ba6e7dc174c5c87a1c4cfc3fade33",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2016-01-20, 12:47 p.m.",
      "commitNameOld": "a2e588e96c3a763553d764d5c35a44b9eea41d75",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(Root root) {\n\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n\t\tTestExecutionListener testExecutionListener \u003d testExecutionListenerRegistry.getCompositeTestExecutionListener();\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n\t\t\ttestExecutionListener);\n\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java",
      "functionStartLine": 95,
      "functionName": "execute",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/JUnit5Launcher.java",
        "newPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/DefaultLauncher.java"
      }
    },
    "a2e588e96c3a763553d764d5c35a44b9eea41d75": {
      "type": "Yfilerename",
      "commitMessage": "Convert Launcher class into an interface\n\nThis commit coverts the existing Launcher class into an interface and\nrenames the existing implementation to JUnit5Launcher.\n\nIn addition, this commit renames DiscoveryRequestBuilder to\nTestDiscoveryRequestBuilder.\n\nIssue: #129\n",
      "commitDate": "2016-01-20, 12:47 p.m.",
      "commitName": "a2e588e96c3a763553d764d5c35a44b9eea41d75",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2016-01-20, 12:27 p.m.",
      "commitNameOld": "027bc980ad0a17a6130013aeec068296606bbfef",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(Root root) {\n\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n\t\tTestExecutionListener testExecutionListener \u003d testExecutionListenerRegistry.getCompositeTestExecutionListener();\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n\t\t\ttestExecutionListener);\n\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/JUnit5Launcher.java",
      "functionStartLine": 113,
      "functionName": "execute",
      "diff": "",
      "extendedDetails": {
        "oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/Launcher.java",
        "newPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/JUnit5Launcher.java"
      }
    },
    "961fd47344c55d21907607ec9672df6d4f3d2362": {
      "type": "Ymultichange(Yfilerename,Ybodychange)",
      "commitMessage": "Encapsulate Launcher with its support classes into main package\n\nIssue: #54\n",
      "commitDate": "2016-01-18, 11:34 a.m.",
      "commitName": "961fd47344c55d21907607ec9672df6d4f3d2362",
      "commitAuthor": "Stefan Bechtold",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Encapsulate Launcher with its support classes into main package\n\nIssue: #54\n",
          "commitDate": "2016-01-18, 11:34 a.m.",
          "commitName": "961fd47344c55d21907607ec9672df6d4f3d2362",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2016-01-18, 10:56 a.m.",
          "commitNameOld": "93397066597b7ca8af35a77b9559bdc079d4f5d5",
          "commitAuthorOld": "Stefan Bechtold",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "\tprivate void execute(Root root) {\n\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n\t\tTestExecutionListener testExecutionListener \u003d testExecutionListenerRegistry.getCompositeTestExecutionListener();\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n\t\t\ttestExecutionListener);\n\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/Launcher.java",
          "functionStartLine": 129,
          "functionName": "execute",
          "diff": "@@ -1,12 +1,12 @@\n \tprivate void execute(Root root) {\n-\t\tTestPlan testPlan \u003d TestPlan.from(root);\n+\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n \t\tTestExecutionListener testExecutionListener \u003d testExecutionListenerRegistry.getCompositeTestExecutionListener();\n \t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n \t\t\ttestExecutionListener);\n \t\tfor (TestEngine testEngine : root.getTestEngines()) {\n \t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n \t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n \t\t}\n \t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
            "newPath": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/Launcher.java"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Encapsulate Launcher with its support classes into main package\n\nIssue: #54\n",
          "commitDate": "2016-01-18, 11:34 a.m.",
          "commitName": "961fd47344c55d21907607ec9672df6d4f3d2362",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2016-01-18, 10:56 a.m.",
          "commitNameOld": "93397066597b7ca8af35a77b9559bdc079d4f5d5",
          "commitAuthorOld": "Stefan Bechtold",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "\tprivate void execute(Root root) {\n\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n\t\tTestExecutionListener testExecutionListener \u003d testExecutionListenerRegistry.getCompositeTestExecutionListener();\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n\t\t\ttestExecutionListener);\n\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/main/Launcher.java",
          "functionStartLine": 129,
          "functionName": "execute",
          "diff": "@@ -1,12 +1,12 @@\n \tprivate void execute(Root root) {\n-\t\tTestPlan testPlan \u003d TestPlan.from(root);\n+\t\tTestPlan testPlan \u003d TestPlan.from(root.getEngineDescriptors());\n \t\tTestExecutionListener testExecutionListener \u003d testExecutionListenerRegistry.getCompositeTestExecutionListener();\n \t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n \t\t\ttestExecutionListener);\n \t\tfor (TestEngine testEngine : root.getTestEngines()) {\n \t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n \t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n \t\t}\n \t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "93397066597b7ca8af35a77b9559bdc079d4f5d5": {
      "type": "Ybodychange",
      "commitMessage": "Cleanup JavaDoc and Polish\n\nIssue: #54\n",
      "commitDate": "2016-01-18, 10:56 a.m.",
      "commitName": "93397066597b7ca8af35a77b9559bdc079d4f5d5",
      "commitAuthor": "Stefan Bechtold",
      "commitDateOld": "2016-01-18, 10:03 a.m.",
      "commitNameOld": "ab12dc85ce90a941531d666e658dfaa0834fda31",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(Root root) {\n\t\tTestPlan testPlan \u003d TestPlan.from(root);\n\t\tTestExecutionListener testExecutionListener \u003d testExecutionListenerRegistry.getCompositeTestExecutionListener();\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n\t\t\ttestExecutionListener);\n\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 123,
      "functionName": "execute",
      "diff": "@@ -1,12 +1,12 @@\n \tprivate void execute(Root root) {\n \t\tTestPlan testPlan \u003d TestPlan.from(root);\n-\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n+\t\tTestExecutionListener testExecutionListener \u003d testExecutionListenerRegistry.getCompositeTestExecutionListener();\n \t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n \t\t\ttestExecutionListener);\n \t\tfor (TestEngine testEngine : root.getTestEngines()) {\n \t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n \t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n \t\t}\n \t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9da25e126d174ba6e6ae02596afa538a7cafe17b": {
      "type": "Yparameterchange",
      "commitMessage": "Remove RootTestDescriptor node from TestPlan\n\nIssue: #54\n",
      "commitDate": "2016-01-18, 9:57 a.m.",
      "commitName": "9da25e126d174ba6e6ae02596afa538a7cafe17b",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2016-01-17, 11:10 p.m.",
      "commitNameOld": "9162134ee3dfc3e80a45d08e32fdbf8ed06e87be",
      "commitAuthorOld": "Stefan Bechtold",
      "daysBetweenCommits": 0.45,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(Root root) {\n\t\tTestPlan testPlan \u003d TestPlan.from(root);\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n\t\t\ttestExecutionListener);\n\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 125,
      "functionName": "execute",
      "diff": "@@ -1,12 +1,12 @@\n-\tprivate void execute(RootTestDescriptor root) {\n+\tprivate void execute(Root root) {\n \t\tTestPlan testPlan \u003d TestPlan.from(root);\n \t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n \t\t\ttestExecutionListener);\n \t\tfor (TestEngine testEngine : root.getTestEngines()) {\n \t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n \t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n \t\t}\n \t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[root-RootTestDescriptor]",
        "newValue": "[root-Root]"
      }
    },
    "9f7d082872c4b4109729a3a480f1dedad3083bad": {
      "type": "Ybodychange",
      "commitMessage": "Only execute engines with discovered descriptors\n\n- Looks clearer to me\n- Less usage of Optional\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks\nAdNovum Informatik AG (http://www.adnovum.ch) for supporting the\nJUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015-12-18, 10:58 a.m.",
      "commitName": "9f7d082872c4b4109729a3a480f1dedad3083bad",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015-12-11, 4:35 p.m.",
      "commitNameOld": "f8a1c6b5ae5a144d1a3e85100a4d61b7f059822d",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 6.77,
      "commitsBetweenForRepo": 46,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(RootTestDescriptor root) {\n\t\tTestPlan testPlan \u003d TestPlan.from(root);\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n\t\t\ttestExecutionListener);\n\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 65,
      "functionName": "execute",
      "diff": "@@ -1,14 +1,12 @@\n \tprivate void execute(RootTestDescriptor root) {\n-\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n-\n \t\tTestPlan testPlan \u003d TestPlan.from(root);\n+\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n-\t\tfor (TestEngine testEngine : getAvailableEngines()) {\n-\t\t\tOptional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n-\t\t\ttestDescriptorOptional.ifPresent(testDescriptor -\u003e {\n-\t\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor,\n-\t\t\t\t\tnew ExecutionListenerAdapter(testPlan, testExecutionListener)));\n-\t\t\t});\n+\t\tExecutionListenerAdapter engineExecutionListener \u003d new ExecutionListenerAdapter(testPlan,\n+\t\t\ttestExecutionListener);\n+\t\tfor (TestEngine testEngine : root.getTestEngines()) {\n+\t\t\tTestDescriptor testDescriptor \u003d root.getTestDescriptorFor(testEngine);\n+\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, engineExecutionListener));\n \t\t}\n \t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "99aaaf56f401af1e08cccd0c013a8633c04eb22b": {
      "type": "Ybodychange",
      "commitMessage": "Delete listener methods for unsupported events\n\nIssue: #34\n\n------------------------------------------------------------------------\nOn behalf of the community, the JUnit Lambda Team thanks Netcetera AG\n(http://netcetera.com) for supporting the JUnit crowdfunding campaign!\n------------------------------------------------------------------------\n",
      "commitDate": "2015-12-11, 4:35 p.m.",
      "commitName": "99aaaf56f401af1e08cccd0c013a8633c04eb22b",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015-12-08, 5:18 a.m.",
      "commitNameOld": "e4c640078022076935caef8edd312ea547f3b9d1",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 3.47,
      "commitsBetweenForRepo": 38,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(RootTestDescriptor root) {\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\n\t\tTestPlan testPlan \u003d TestPlan.from(root);\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tfor (TestEngine testEngine : getAvailableEngines()) {\n\t\t\tOptional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestDescriptorOptional.ifPresent(testDescriptor -\u003e {\n\t\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor,\n\t\t\t\t\tnew ExecutionListenerAdapter(testPlan, testExecutionListener)));\n\t\t\t});\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 69,
      "functionName": "execute",
      "diff": "@@ -1,16 +1,14 @@\n \tprivate void execute(RootTestDescriptor root) {\n \t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \n \t\tTestPlan testPlan \u003d TestPlan.from(root);\n \t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tfor (TestEngine testEngine : getAvailableEngines()) {\n \t\t\tOptional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n \t\t\ttestDescriptorOptional.ifPresent(testDescriptor -\u003e {\n-\t\t\t\ttestExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n \t\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor,\n \t\t\t\t\tnew ExecutionListenerAdapter(testPlan, testExecutionListener)));\n-\t\t\t\ttestExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n \t\t\t});\n \t\t}\n \t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "e4c640078022076935caef8edd312ea547f3b9d1": {
      "type": "Ybodychange",
      "commitMessage": "TestExecutionListener uses TestIdentifier\n",
      "commitDate": "2015-12-08, 5:18 a.m.",
      "commitName": "e4c640078022076935caef8edd312ea547f3b9d1",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015-12-08, 5:18 a.m.",
      "commitNameOld": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(RootTestDescriptor root) {\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\n\t\tTestPlan testPlan \u003d TestPlan.from(root);\n\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tfor (TestEngine testEngine : getAvailableEngines()) {\n\t\t\tOptional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestDescriptorOptional.ifPresent(testDescriptor -\u003e {\n\t\t\t\ttestExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n\t\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor,\n\t\t\t\t\tnew ExecutionListenerAdapter(testPlan, testExecutionListener)));\n\t\t\t\ttestExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n\t\t\t});\n\t\t}\n\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 69,
      "functionName": "execute",
      "diff": "@@ -1,16 +1,16 @@\n \tprivate void execute(RootTestDescriptor root) {\n-\t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n \t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \n \t\tTestPlan testPlan \u003d TestPlan.from(root);\n-\t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n+\t\ttestExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tfor (TestEngine testEngine : getAvailableEngines()) {\n \t\t\tOptional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n \t\t\ttestDescriptorOptional.ifPresent(testDescriptor -\u003e {\n-\t\t\t\ttestPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n-\t\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n-\t\t\t\ttestPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n+\t\t\t\ttestExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n+\t\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor,\n+\t\t\t\t\tnew ExecutionListenerAdapter(testPlan, testExecutionListener)));\n+\t\t\t\ttestExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n \t\t\t});\n \t\t}\n-\t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n+\t\ttestExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "830b6d5976b6db01dad3866cfb3d54c6216b1252": {
      "type": "Ymultichange(Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Introduce TestIdentifier and use it in TestPlan\n",
      "commitDate": "2015-12-08, 5:18 a.m.",
      "commitName": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
      "commitAuthor": "Marc Philipp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Introduce TestIdentifier and use it in TestPlan\n",
          "commitDate": "2015-12-08, 5:18 a.m.",
          "commitName": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015-12-06, 7:30 a.m.",
          "commitNameOld": "7dc017fd9255ba302736d9ad1ce778f93e77b573",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 1.91,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "\tprivate void execute(RootTestDescriptor root) {\n\t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\n\t\tTestPlan testPlan \u003d TestPlan.from(root);\n\t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tfor (TestEngine testEngine : getAvailableEngines()) {\n\t\t\tOptional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestDescriptorOptional.ifPresent(testDescriptor -\u003e {\n\t\t\t\ttestPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n\t\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n\t\t\t\ttestPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n\t\t\t});\n\t\t}\n\t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 69,
          "functionName": "execute",
          "diff": "@@ -1,15 +1,16 @@\n-\tpublic void execute(TestPlan testPlan) {\n+\tprivate void execute(RootTestDescriptor root) {\n \t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n \t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \n+\t\tTestPlan testPlan \u003d TestPlan.from(root);\n \t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tfor (TestEngine testEngine : getAvailableEngines()) {\n-\t\t\tOptional\u003cTestDescriptor\u003e testDescriptorOptional \u003d testPlan.getTestDescriptorFor(testEngine);\n+\t\t\tOptional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n \t\t\ttestDescriptorOptional.ifPresent(testDescriptor -\u003e {\n \t\t\t\ttestPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n \t\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n \t\t\t\ttestPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n \t\t\t});\n \t\t}\n \t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[testPlan-TestPlan]",
            "newValue": "[root-RootTestDescriptor]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Introduce TestIdentifier and use it in TestPlan\n",
          "commitDate": "2015-12-08, 5:18 a.m.",
          "commitName": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015-12-06, 7:30 a.m.",
          "commitNameOld": "7dc017fd9255ba302736d9ad1ce778f93e77b573",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 1.91,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "\tprivate void execute(RootTestDescriptor root) {\n\t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\n\t\tTestPlan testPlan \u003d TestPlan.from(root);\n\t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tfor (TestEngine testEngine : getAvailableEngines()) {\n\t\t\tOptional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestDescriptorOptional.ifPresent(testDescriptor -\u003e {\n\t\t\t\ttestPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n\t\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n\t\t\t\ttestPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n\t\t\t});\n\t\t}\n\t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 69,
          "functionName": "execute",
          "diff": "@@ -1,15 +1,16 @@\n-\tpublic void execute(TestPlan testPlan) {\n+\tprivate void execute(RootTestDescriptor root) {\n \t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n \t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \n+\t\tTestPlan testPlan \u003d TestPlan.from(root);\n \t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tfor (TestEngine testEngine : getAvailableEngines()) {\n-\t\t\tOptional\u003cTestDescriptor\u003e testDescriptorOptional \u003d testPlan.getTestDescriptorFor(testEngine);\n+\t\t\tOptional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n \t\t\ttestDescriptorOptional.ifPresent(testDescriptor -\u003e {\n \t\t\t\ttestPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n \t\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n \t\t\t\ttestPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n \t\t\t});\n \t\t}\n \t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Introduce TestIdentifier and use it in TestPlan\n",
          "commitDate": "2015-12-08, 5:18 a.m.",
          "commitName": "830b6d5976b6db01dad3866cfb3d54c6216b1252",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015-12-06, 7:30 a.m.",
          "commitNameOld": "7dc017fd9255ba302736d9ad1ce778f93e77b573",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 1.91,
          "commitsBetweenForRepo": 11,
          "commitsBetweenForFile": 1,
          "actualSource": "\tprivate void execute(RootTestDescriptor root) {\n\t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\n\t\tTestPlan testPlan \u003d TestPlan.from(root);\n\t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tfor (TestEngine testEngine : getAvailableEngines()) {\n\t\t\tOptional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n\t\t\ttestDescriptorOptional.ifPresent(testDescriptor -\u003e {\n\t\t\t\ttestPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n\t\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n\t\t\t\ttestPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n\t\t\t});\n\t\t}\n\t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 69,
          "functionName": "execute",
          "diff": "@@ -1,15 +1,16 @@\n-\tpublic void execute(TestPlan testPlan) {\n+\tprivate void execute(RootTestDescriptor root) {\n \t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n \t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \n+\t\tTestPlan testPlan \u003d TestPlan.from(root);\n \t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tfor (TestEngine testEngine : getAvailableEngines()) {\n-\t\t\tOptional\u003cTestDescriptor\u003e testDescriptorOptional \u003d testPlan.getTestDescriptorFor(testEngine);\n+\t\t\tOptional\u003cTestDescriptor\u003e testDescriptorOptional \u003d root.getTestDescriptorFor(testEngine);\n \t\t\ttestDescriptorOptional.ifPresent(testDescriptor -\u003e {\n \t\t\t\ttestPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n \t\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n \t\t\t\ttestPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n \t\t\t});\n \t\t}\n \t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "40ea4f270254c3faf95fea9e2a48ecb7a6c47bb8": {
      "type": "Ybodychange",
      "commitMessage": "#29: Refactored the TestEngine API\n- discoveryTests now returns the root testDescriptor and does not take and EngineDescriptor as argument\n- TestPlan holds a mapping for the engines and their corresponding root test descriptor\n",
      "commitDate": "2015-12-03, 7:58 a.m.",
      "commitName": "40ea4f270254c3faf95fea9e2a48ecb7a6c47bb8",
      "commitAuthor": "Stefan Bechtold",
      "commitDateOld": "2015-12-03, 5:42 a.m.",
      "commitNameOld": "59a0a13262b73c398c05376448aad97e7582384d",
      "commitAuthorOld": "JUnit Team",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic void execute(TestPlan testPlan) {\n\t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\n\t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tfor (TestEngine testEngine : getAvailableEngines()) {\n\t\t\tOptional\u003cTestDescriptor\u003e testDescriptorOptional \u003d testPlan.getTestDescriptorFor(testEngine);\n\t\t\ttestDescriptorOptional.ifPresent(testDescriptor -\u003e {\n\t\t\t\ttestPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n\t\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n\t\t\t\ttestPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n\t\t\t});\n\t\t}\n\t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 53,
      "functionName": "execute",
      "diff": "@@ -1,15 +1,15 @@\n \tpublic void execute(TestPlan testPlan) {\n \t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n \t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \n \t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n-\t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n-\t\t\tOptional\u003cEngineDescriptor\u003e engineDescriptorOptional \u003d testPlan.getEngineDescriptorFor(testEngine);\n-\t\t\tengineDescriptorOptional.ifPresent(engineDescriptor -\u003e {\n+\t\tfor (TestEngine testEngine : getAvailableEngines()) {\n+\t\t\tOptional\u003cTestDescriptor\u003e testDescriptorOptional \u003d testPlan.getTestDescriptorFor(testEngine);\n+\t\t\ttestDescriptorOptional.ifPresent(testDescriptor -\u003e {\n \t\t\t\ttestPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n-\t\t\t\ttestEngine.execute(new ExecutionRequest(engineDescriptor, testExecutionListener));\n+\t\t\t\ttestEngine.execute(new ExecutionRequest(testDescriptor, testExecutionListener));\n \t\t\t\ttestPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n \t\t\t});\n \t\t}\n \t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c2b82a7de0e755b137e595906f8dc415f1619727": {
      "type": "Ybodychange",
      "commitMessage": "New test context object is handed through\n",
      "commitDate": "2015-11-14, 5:26 a.m.",
      "commitName": "c2b82a7de0e755b137e595906f8dc415f1619727",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015-11-13, 6:44 a.m.",
      "commitNameOld": "6fe08b38bb3af3e528ce3f65b2f189169970ed1b",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.95,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic void execute(TestPlan testPlan) {\n\t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\n\t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n\t\t\tOptional\u003cEngineDescriptor\u003e engineDescriptorOptional \u003d testPlan.getEngineDescriptorFor(testEngine);\n\t\t\tengineDescriptorOptional.ifPresent(engineDescriptor -\u003e {\n\t\t\t\ttestPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n\t\t\t\ttestEngine.execute(new ExecutionRequest(engineDescriptor, testExecutionListener));\n\t\t\t\ttestPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n\t\t\t});\n\t\t}\n\t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 52,
      "functionName": "execute",
      "diff": "@@ -1,15 +1,15 @@\n \tpublic void execute(TestPlan testPlan) {\n \t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n \t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \n \t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n \t\t\tOptional\u003cEngineDescriptor\u003e engineDescriptorOptional \u003d testPlan.getEngineDescriptorFor(testEngine);\n \t\t\tengineDescriptorOptional.ifPresent(engineDescriptor -\u003e {\n \t\t\t\ttestPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n-\t\t\t\ttestEngine.execute(new EngineExecutionContext(engineDescriptor, testExecutionListener));\n+\t\t\t\ttestEngine.execute(new ExecutionRequest(engineDescriptor, testExecutionListener));\n \t\t\t\ttestPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n \t\t\t});\n \t\t}\n \t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "891efa3653cb899ca27afcd1abc385fc3fa663fa": {
      "type": "Ybodychange",
      "commitMessage": "Class name filters work in a simple way\n",
      "commitDate": "2015-11-13, 6:24 a.m.",
      "commitName": "891efa3653cb899ca27afcd1abc385fc3fa663fa",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015-11-09, 9:50 a.m.",
      "commitNameOld": "49ae3709bdf93aa8c83f5d11476b9c301eb4fc7f",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 3.86,
      "commitsBetweenForRepo": 68,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic void execute(TestPlan testPlan) {\n\t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\n\t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n\t\t\tOptional\u003cEngineDescriptor\u003e engineDescriptorOptional \u003d testPlan.getEngineDescriptorFor(testEngine);\n\t\t\tengineDescriptorOptional.ifPresent(engineDescriptor -\u003e {\n\t\t\t\ttestPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n\t\t\t\ttestEngine.execute(new EngineExecutionContext(engineDescriptor, testExecutionListener));\n\t\t\t\ttestPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n\t\t\t});\n\t\t}\n\t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 53,
      "functionName": "execute",
      "diff": "@@ -1,13 +1,15 @@\n \tpublic void execute(TestPlan testPlan) {\n \t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n \t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \n \t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n-\t\t\ttestPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n-\t\t\tOptional\u003cEngineDescriptor\u003e engineDescriptor \u003d testPlan.getEngineDescriptorFor(testEngine);\n-\t\t\ttestEngine.execute(new EngineExecutionContext(engineDescriptor.get(), testExecutionListener));\n-\t\t\ttestPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n+\t\t\tOptional\u003cEngineDescriptor\u003e engineDescriptorOptional \u003d testPlan.getEngineDescriptorFor(testEngine);\n+\t\t\tengineDescriptorOptional.ifPresent(engineDescriptor -\u003e {\n+\t\t\t\ttestPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n+\t\t\t\ttestEngine.execute(new EngineExecutionContext(engineDescriptor, testExecutionListener));\n+\t\t\t\ttestPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n+\t\t\t});\n \t\t}\n \t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4a34c1bc27a7ad936639a83ad7e34f89add92c4c": {
      "type": "Ybodychange",
      "commitMessage": "changed TestEngine interface to only use engineDescriptor.addChild an no more return values.\ncompiles, but lots of tests failing\n",
      "commitDate": "2015-11-09, 6:11 a.m.",
      "commitName": "4a34c1bc27a7ad936639a83ad7e34f89add92c4c",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015-11-08, 4:46 a.m.",
      "commitNameOld": "1105bef6877be1c036331d5b6d607d5e16c7463b",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 1.06,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic void execute(TestPlan testPlan) {\n\t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\n\t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n\t\t\ttestPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n\t\t\tOptional\u003cEngineDescriptor\u003e engineDescriptor \u003d testPlan.getEngineDescriptorFor(testEngine);\n\t\t\ttestEngine.execute(new EngineExecutionContext(engineDescriptor.get(), testExecutionListener));\n\t\t\ttestPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n\t\t}\n\t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 81,
      "functionName": "execute",
      "diff": "@@ -1,13 +1,13 @@\n \tpublic void execute(TestPlan testPlan) {\n \t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n \t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \n \t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n \t\t\ttestPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n-\t\t\tList\u003cTestDescriptor\u003e testDescriptors \u003d testPlan.getAllTestDescriptorsForTestEngine(testEngine);\n-\t\t\ttestEngine.execute(new EngineExecutionContext(testDescriptors, testExecutionListener));\n+\t\t\tOptional\u003cEngineDescriptor\u003e engineDescriptor \u003d testPlan.getEngineDescriptorFor(testEngine);\n+\t\t\ttestEngine.execute(new EngineExecutionContext(engineDescriptor.get(), testExecutionListener));\n \t\t\ttestPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n \t\t}\n \t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "90557f5414831ca924bca50c1591dd348c1c7162": {
      "type": "Ybodychange",
      "commitMessage": "Add TestEngine start/finish events to listener\n",
      "commitDate": "2015-10-30, 4:41 p.m.",
      "commitName": "90557f5414831ca924bca50c1591dd348c1c7162",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015-10-30, 11:12 a.m.",
      "commitNameOld": "9d0819e13f70c9385836259aabb8077b5240fb2c",
      "commitAuthorOld": "Stefan Bechtold",
      "daysBetweenCommits": 0.23,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic void execute(TestPlan testPlan) {\n\t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\n\t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n\t\t\ttestPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n\t\t\tList\u003cTestDescriptor\u003e testDescriptors \u003d testPlan.getAllTestDescriptorsForTestEngine(testEngine);\n\t\t\ttestEngine.execute(new EngineExecutionContext(testDescriptors, testExecutionListener));\n\t\t\ttestPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n\t\t}\n\t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 48,
      "functionName": "execute",
      "diff": "@@ -1,11 +1,13 @@\n \tpublic void execute(TestPlan testPlan) {\n \t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n \t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \n \t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n+\t\t\ttestPlanExecutionListener.testPlanExecutionStartedOnEngine(testPlan, testEngine);\n \t\t\tList\u003cTestDescriptor\u003e testDescriptors \u003d testPlan.getAllTestDescriptorsForTestEngine(testEngine);\n \t\t\ttestEngine.execute(new EngineExecutionContext(testDescriptors, testExecutionListener));\n+\t\t\ttestPlanExecutionListener.testPlanExecutionFinishedOnEngine(testPlan, testEngine);\n \t\t}\n \t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5b99f734253c15189a88cd5704ec30ded2f24694": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Added testplan to all listener methods and introduced composed listener in the registry\n",
      "commitDate": "2015-10-30, 6:08 a.m.",
      "commitName": "5b99f734253c15189a88cd5704ec30ded2f24694",
      "commitAuthor": "Stefan Bechtold",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Added testplan to all listener methods and introduced composed listener in the registry\n",
          "commitDate": "2015-10-30, 6:08 a.m.",
          "commitName": "5b99f734253c15189a88cd5704ec30ded2f24694",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2015-10-30, 5:54 a.m.",
          "commitNameOld": "2faf053a85fd24cb6f65e7b1258d7c507587866c",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "\tpublic void execute(TestPlan testPlan) {\n\t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\n\t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n\t\t\tList\u003cTestDescriptor\u003e testDescriptors \u003d testPlan.getAllTestDescriptorsForTestEngine(testEngine);\n\t\t\ttestEngine.execute(new EngineExecutionContext(testDescriptors, testExecutionListener));\n\t\t}\n\t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 50,
          "functionName": "execute",
          "diff": "@@ -1,13 +1,11 @@\n-\tprivate void execute(TestPlan testPlan) {\n-\t\tlistenerRegistry.notifyTestPlanExecutionListeners(\n-\t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n+\tpublic void execute(TestPlan testPlan) {\n+\t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n+\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \n-\t\tTestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n-\n+\t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n-\t\t\ttestEngine.execute(\n-\t\t\t\tnew EngineExecutionContext(testPlan.getAllTestDescriptorsForTestEngine(testEngine), compositeListener));\n+\t\t\tList\u003cTestDescriptor\u003e testDescriptors \u003d testPlan.getAllTestDescriptorsForTestEngine(testEngine);\n+\t\t\ttestEngine.execute(new EngineExecutionContext(testDescriptors, testExecutionListener));\n \t\t}\n-\n-\t\tlistenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n+\t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Added testplan to all listener methods and introduced composed listener in the registry\n",
          "commitDate": "2015-10-30, 6:08 a.m.",
          "commitName": "5b99f734253c15189a88cd5704ec30ded2f24694",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2015-10-30, 5:54 a.m.",
          "commitNameOld": "2faf053a85fd24cb6f65e7b1258d7c507587866c",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.01,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "\tpublic void execute(TestPlan testPlan) {\n\t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\n\t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n\t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n\t\t\tList\u003cTestDescriptor\u003e testDescriptors \u003d testPlan.getAllTestDescriptorsForTestEngine(testEngine);\n\t\t\ttestEngine.execute(new EngineExecutionContext(testDescriptors, testExecutionListener));\n\t\t}\n\t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n\t}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 50,
          "functionName": "execute",
          "diff": "@@ -1,13 +1,11 @@\n-\tprivate void execute(TestPlan testPlan) {\n-\t\tlistenerRegistry.notifyTestPlanExecutionListeners(\n-\t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n+\tpublic void execute(TestPlan testPlan) {\n+\t\tTestPlanExecutionListener testPlanExecutionListener \u003d listenerRegistry.getCompositeTestPlanExecutionListener();\n+\t\tTestExecutionListener testExecutionListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \n-\t\tTestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n-\n+\t\ttestPlanExecutionListener.testPlanExecutionStarted(testPlan);\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n-\t\t\ttestEngine.execute(\n-\t\t\t\tnew EngineExecutionContext(testPlan.getAllTestDescriptorsForTestEngine(testEngine), compositeListener));\n+\t\t\tList\u003cTestDescriptor\u003e testDescriptors \u003d testPlan.getAllTestDescriptorsForTestEngine(testEngine);\n+\t\t\ttestEngine.execute(new EngineExecutionContext(testDescriptors, testExecutionListener));\n \t\t}\n-\n-\t\tlistenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n+\t\ttestPlanExecutionListener.testPlanExecutionFinished(testPlan);\n \t}\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "2faf053a85fd24cb6f65e7b1258d7c507587866c": {
      "type": "Ybodychange",
      "commitMessage": "Rename methods to be more specific\n",
      "commitDate": "2015-10-30, 5:54 a.m.",
      "commitName": "2faf053a85fd24cb6f65e7b1258d7c507587866c",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015-10-30, 5:34 a.m.",
      "commitNameOld": "b9a89c31681f519fcbe2c0ec5ce474f97aec5240",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(TestPlan testPlan) {\n\t\tlistenerRegistry.notifyTestPlanExecutionListeners(\n\t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n\n\t\tTestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\n\t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n\t\t\ttestEngine.execute(\n\t\t\t\tnew EngineExecutionContext(testPlan.getAllTestDescriptorsForTestEngine(testEngine), compositeListener));\n\t\t}\n\n\t\tlistenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 50,
      "functionName": "execute",
      "diff": "@@ -1,13 +1,13 @@\n \tprivate void execute(TestPlan testPlan) {\n \t\tlistenerRegistry.notifyTestPlanExecutionListeners(\n \t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n \n \t\tTestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n \t\t\ttestEngine.execute(\n-\t\t\t\tnew EngineExecutionContext(testPlan.getAllTestsForTestEngine(testEngine), compositeListener));\n+\t\t\t\tnew EngineExecutionContext(testPlan.getAllTestDescriptorsForTestEngine(testEngine), compositeListener));\n \t\t}\n \n \t\tlistenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b9a89c31681f519fcbe2c0ec5ce474f97aec5240": {
      "type": "Ybodychange",
      "commitMessage": "Introduce EngineExecutionContext\n",
      "commitDate": "2015-10-30, 5:34 a.m.",
      "commitName": "b9a89c31681f519fcbe2c0ec5ce474f97aec5240",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015-10-29, 3:57 p.m.",
      "commitNameOld": "169dab8739b8b51e52fc114ab797f2f540c2c257",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.57,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(TestPlan testPlan) {\n\t\tlistenerRegistry.notifyTestPlanExecutionListeners(\n\t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n\n\t\tTestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\n\t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n\t\t\ttestEngine.execute(\n\t\t\t\tnew EngineExecutionContext(testPlan.getAllTestsForTestEngine(testEngine), compositeListener));\n\t\t}\n\n\t\tlistenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 50,
      "functionName": "execute",
      "diff": "@@ -1,12 +1,13 @@\n \tprivate void execute(TestPlan testPlan) {\n \t\tlistenerRegistry.notifyTestPlanExecutionListeners(\n \t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n \n \t\tTestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n-\t\t\ttestEngine.execute(testPlan.getAllTestsForTestEngine(testEngine), compositeListener);\n+\t\t\ttestEngine.execute(\n+\t\t\t\tnew EngineExecutionContext(testPlan.getAllTestsForTestEngine(testEngine), compositeListener));\n \t\t}\n \n \t\tlistenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "487bbff85f6651921a4c4a3520a9e315b0f2b381": {
      "type": "Ybodychange",
      "commitMessage": "Pass TestPlan to TestPlanExecutionListener\n",
      "commitDate": "2015-10-29, 9:23 a.m.",
      "commitName": "487bbff85f6651921a4c4a3520a9e315b0f2b381",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015-10-29, 4:37 a.m.",
      "commitNameOld": "f86a53c30ceac7ec806e398f1ff3be8a3a4bd6f3",
      "commitAuthorOld": "Sam Brannen",
      "daysBetweenCommits": 0.2,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(TestPlan testPlan) {\n\t\tlistenerRegistry.notifyTestPlanExecutionListeners(\n\t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n\n\t\tTestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\n\t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n\t\t\ttestEngine.execute(testPlan.getAllTestsForTestEngine(testEngine), compositeListener);\n\t\t}\n\n\t\tlistenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 47,
      "functionName": "execute",
      "diff": "@@ -1,13 +1,12 @@\n \tprivate void execute(TestPlan testPlan) {\n \t\tlistenerRegistry.notifyTestPlanExecutionListeners(\n-\t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(\n-\t\t\t\ttestPlan.getTests().size()));\n+\t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan));\n \n \t\tTestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n \t\t\ttestEngine.execute(testPlan.getAllTestsForTestEngine(testEngine), compositeListener);\n \t\t}\n \n \t\tlistenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b2854484a0f6076f623028376c9b0827ba6ee8fe": {
      "type": "Ybodychange",
      "commitMessage": "TestListenerRegistry cleaned up (a little bit)\n",
      "commitDate": "2015-10-28, 10:58 a.m.",
      "commitName": "b2854484a0f6076f623028376c9b0827ba6ee8fe",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015-10-28, 10:11 a.m.",
      "commitNameOld": "cdc709cdb2651a16725ba16eb9c2470d617b5b85",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(TestPlan testPlan) {\n\t\tlistenerRegistry.notifyTestPlanExecutionListeners(\n\t\t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size())\n\t\t);\n\n\t\tTestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n\n\t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n\t\t\ttestEngine.execute(testPlan.getAllTestsForTestEngine(testEngine), compositeListener);\n\t\t}\n\n\t\tlistenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 36,
      "functionName": "execute",
      "diff": "@@ -1,60 +1,13 @@\n \tprivate void execute(TestPlan testPlan) {\n \t\tlistenerRegistry.notifyTestPlanExecutionListeners(\n \t\t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size())\n \t\t);\n \n-\t\tTestExecutionListener compositeListener \u003d new TestExecutionListener() {\n-\t\t\t@Override\n-\t\t\tpublic void dynamicTestFound(TestDescriptor testDescriptor) {\n-\t\t\t\tlistenerRegistry.notifyTestExecutionListeners(\n-\t\t\t\t\t\ttestExecutionListener -\u003e testExecutionListener.dynamicTestFound(testDescriptor)\n-\t\t\t\t);\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void testStarted(TestDescriptor testDescriptor) {\n-\t\t\t\tlistenerRegistry.notifyTestExecutionListeners(\n-\t\t\t\t\t\ttestExecutionListener -\u003e testExecutionListener.testStarted(testDescriptor)\n-\t\t\t\t);\n-\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void testSkipped(TestDescriptor testDescriptor, Throwable t) {\n-\t\t\t\tlistenerRegistry.notifyTestExecutionListeners(\n-\t\t\t\t\t\ttestExecutionListener -\u003e testExecutionListener.testSkipped(testDescriptor, t)\n-\t\t\t\t);\n-\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void testAborted(TestDescriptor testDescriptor, Throwable t) {\n-\t\t\t\tlistenerRegistry.notifyTestExecutionListeners(\n-\t\t\t\t\t\ttestExecutionListener -\u003e testExecutionListener.testAborted(testDescriptor, t)\n-\t\t\t\t);\n-\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void testFailed(TestDescriptor testDescriptor, Throwable t) {\n-\t\t\t\tlistenerRegistry.notifyTestExecutionListeners(\n-\t\t\t\t\t\ttestExecutionListener -\u003e testExecutionListener.testFailed(testDescriptor, t)\n-\t\t\t\t);\n-\n-\t\t\t}\n-\n-\t\t\t@Override\n-\t\t\tpublic void testSucceeded(TestDescriptor testDescriptor) {\n-\t\t\t\tlistenerRegistry.notifyTestExecutionListeners(\n-\t\t\t\t\t\ttestExecutionListener -\u003e testExecutionListener.testSucceeded(testDescriptor)\n-\t\t\t\t);\n-\n-\t\t\t}\n-\t\t};\n+\t\tTestExecutionListener compositeListener \u003d listenerRegistry.getCompositeTestExecutionListener();\n \n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n \t\t\ttestEngine.execute(testPlan.getAllTestsForTestEngine(testEngine), compositeListener);\n \t\t}\n \n \t\tlistenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cdc709cdb2651a16725ba16eb9c2470d617b5b85": {
      "type": "Ybodychange",
      "commitMessage": "test execution listener registry nicht mehr static\n",
      "commitDate": "2015-10-28, 10:11 a.m.",
      "commitName": "cdc709cdb2651a16725ba16eb9c2470d617b5b85",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015-10-28, 9:43 a.m.",
      "commitNameOld": "a52d04ff1b9a42899242b1b9cc7a8147bb2f3776",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 3,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(TestPlan testPlan) {\n\t\tlistenerRegistry.notifyTestPlanExecutionListeners(\n\t\t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size())\n\t\t);\n\n\t\tTestExecutionListener compositeListener \u003d new TestExecutionListener() {\n\t\t\t@Override\n\t\t\tpublic void dynamicTestFound(TestDescriptor testDescriptor) {\n\t\t\t\tlistenerRegistry.notifyTestExecutionListeners(\n\t\t\t\t\t\ttestExecutionListener -\u003e testExecutionListener.dynamicTestFound(testDescriptor)\n\t\t\t\t);\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void testStarted(TestDescriptor testDescriptor) {\n\t\t\t\tlistenerRegistry.notifyTestExecutionListeners(\n\t\t\t\t\t\ttestExecutionListener -\u003e testExecutionListener.testStarted(testDescriptor)\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void testSkipped(TestDescriptor testDescriptor, Throwable t) {\n\t\t\t\tlistenerRegistry.notifyTestExecutionListeners(\n\t\t\t\t\t\ttestExecutionListener -\u003e testExecutionListener.testSkipped(testDescriptor, t)\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void testAborted(TestDescriptor testDescriptor, Throwable t) {\n\t\t\t\tlistenerRegistry.notifyTestExecutionListeners(\n\t\t\t\t\t\ttestExecutionListener -\u003e testExecutionListener.testAborted(testDescriptor, t)\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void testFailed(TestDescriptor testDescriptor, Throwable t) {\n\t\t\t\tlistenerRegistry.notifyTestExecutionListeners(\n\t\t\t\t\t\ttestExecutionListener -\u003e testExecutionListener.testFailed(testDescriptor, t)\n\t\t\t\t);\n\n\t\t\t}\n\n\t\t\t@Override\n\t\t\tpublic void testSucceeded(TestDescriptor testDescriptor) {\n\t\t\t\tlistenerRegistry.notifyTestExecutionListeners(\n\t\t\t\t\t\ttestExecutionListener -\u003e testExecutionListener.testSucceeded(testDescriptor)\n\t\t\t\t);\n\n\t\t\t}\n\t\t};\n\n\t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n\t\t\ttestEngine.execute(testPlan.getAllTestsForTestEngine(testEngine), compositeListener);\n\t\t}\n\n\t\tlistenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 36,
      "functionName": "execute",
      "diff": "@@ -1,11 +1,60 @@\n \tprivate void execute(TestPlan testPlan) {\n \t\tlistenerRegistry.notifyTestPlanExecutionListeners(\n \t\t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size())\n \t\t);\n \n+\t\tTestExecutionListener compositeListener \u003d new TestExecutionListener() {\n+\t\t\t@Override\n+\t\t\tpublic void dynamicTestFound(TestDescriptor testDescriptor) {\n+\t\t\t\tlistenerRegistry.notifyTestExecutionListeners(\n+\t\t\t\t\t\ttestExecutionListener -\u003e testExecutionListener.dynamicTestFound(testDescriptor)\n+\t\t\t\t);\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void testStarted(TestDescriptor testDescriptor) {\n+\t\t\t\tlistenerRegistry.notifyTestExecutionListeners(\n+\t\t\t\t\t\ttestExecutionListener -\u003e testExecutionListener.testStarted(testDescriptor)\n+\t\t\t\t);\n+\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void testSkipped(TestDescriptor testDescriptor, Throwable t) {\n+\t\t\t\tlistenerRegistry.notifyTestExecutionListeners(\n+\t\t\t\t\t\ttestExecutionListener -\u003e testExecutionListener.testSkipped(testDescriptor, t)\n+\t\t\t\t);\n+\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void testAborted(TestDescriptor testDescriptor, Throwable t) {\n+\t\t\t\tlistenerRegistry.notifyTestExecutionListeners(\n+\t\t\t\t\t\ttestExecutionListener -\u003e testExecutionListener.testAborted(testDescriptor, t)\n+\t\t\t\t);\n+\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void testFailed(TestDescriptor testDescriptor, Throwable t) {\n+\t\t\t\tlistenerRegistry.notifyTestExecutionListeners(\n+\t\t\t\t\t\ttestExecutionListener -\u003e testExecutionListener.testFailed(testDescriptor, t)\n+\t\t\t\t);\n+\n+\t\t\t}\n+\n+\t\t\t@Override\n+\t\t\tpublic void testSucceeded(TestDescriptor testDescriptor) {\n+\t\t\t\tlistenerRegistry.notifyTestExecutionListeners(\n+\t\t\t\t\t\ttestExecutionListener -\u003e testExecutionListener.testSucceeded(testDescriptor)\n+\t\t\t\t);\n+\n+\t\t\t}\n+\t\t};\n+\n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n-\t\t\ttestEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n+\t\t\ttestEngine.execute(testPlan.getAllTestsForTestEngine(testEngine), compositeListener);\n \t\t}\n \n \t\tlistenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a52d04ff1b9a42899242b1b9cc7a8147bb2f3776": {
      "type": "Ybodychange",
      "commitMessage": "Launcher API reworked\n",
      "commitDate": "2015-10-28, 9:43 a.m.",
      "commitName": "a52d04ff1b9a42899242b1b9cc7a8147bb2f3776",
      "commitAuthor": "Johannes Link",
      "commitDateOld": "2015-10-28, 9:24 a.m.",
      "commitNameOld": "cdaf66815c7308c9d5a430f08c7bc0d790a80534",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\tprivate void execute(TestPlan testPlan) {\n\t\tlistenerRegistry.notifyTestPlanExecutionListeners(\n\t\t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size())\n\t\t);\n\n\t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n\t\t\ttestEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n\t\t}\n\n\t\tlistenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 37,
      "functionName": "execute",
      "diff": "@@ -1,11 +1,11 @@\n \tprivate void execute(TestPlan testPlan) {\n-\t\tnotifyTestPlanExecutionListeners(\n+\t\tlistenerRegistry.notifyTestPlanExecutionListeners(\n \t\t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size())\n \t\t);\n \n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n \t\t\ttestEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n \t\t}\n \n-\t\tnotifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n+\t\tlistenerRegistry.notifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cdaf66815c7308c9d5a430f08c7bc0d790a80534": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Launcher API umgebaut\n",
      "commitDate": "2015-10-28, 9:24 a.m.",
      "commitName": "cdaf66815c7308c9d5a430f08c7bc0d790a80534",
      "commitAuthor": "Johannes Link",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Launcher API umgebaut\n",
          "commitDate": "2015-10-28, 9:24 a.m.",
          "commitName": "cdaf66815c7308c9d5a430f08c7bc0d790a80534",
          "commitAuthor": "Johannes Link",
          "commitDateOld": "2015-10-28, 7:12 a.m.",
          "commitNameOld": "62a0ab3e60e4a1c62c806934158444f901d8e22c",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "\tprivate void execute(TestPlan testPlan) {\n\t\tnotifyTestPlanExecutionListeners(\n\t\t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size())\n\t\t);\n\n\t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n\t\t\ttestEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n\t\t}\n\n\t\tnotifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n\t}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 37,
          "functionName": "execute",
          "diff": "@@ -1,9 +1,11 @@\n-\tpublic void execute(TestPlan testPlan) {\n-\t\tnotifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionStarted);\n+\tprivate void execute(TestPlan testPlan) {\n+\t\tnotifyTestPlanExecutionListeners(\n+\t\t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size())\n+\t\t);\n \n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n \t\t\ttestEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n \t\t}\n \n \t\tnotifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n \t}\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public]",
            "newValue": "[private]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Launcher API umgebaut\n",
          "commitDate": "2015-10-28, 9:24 a.m.",
          "commitName": "cdaf66815c7308c9d5a430f08c7bc0d790a80534",
          "commitAuthor": "Johannes Link",
          "commitDateOld": "2015-10-28, 7:12 a.m.",
          "commitNameOld": "62a0ab3e60e4a1c62c806934158444f901d8e22c",
          "commitAuthorOld": "Sam Brannen",
          "daysBetweenCommits": 0.09,
          "commitsBetweenForRepo": 6,
          "commitsBetweenForFile": 1,
          "actualSource": "\tprivate void execute(TestPlan testPlan) {\n\t\tnotifyTestPlanExecutionListeners(\n\t\t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size())\n\t\t);\n\n\t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n\t\t\ttestEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n\t\t}\n\n\t\tnotifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n\t}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 37,
          "functionName": "execute",
          "diff": "@@ -1,9 +1,11 @@\n-\tpublic void execute(TestPlan testPlan) {\n-\t\tnotifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionStarted);\n+\tprivate void execute(TestPlan testPlan) {\n+\t\tnotifyTestPlanExecutionListeners(\n+\t\t\t\ttestPlanExecutionListener -\u003e testPlanExecutionListener.testPlanExecutionStarted(testPlan.getTests().size())\n+\t\t);\n \n \t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n \t\t\ttestEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n \t\t}\n \n \t\tnotifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n \t}\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "62a0ab3e60e4a1c62c806934158444f901d8e22c": {
      "type": "Ybodychange",
      "commitMessage": "Split TestListener API into [TestPlan|Test]ExecutionListener\n",
      "commitDate": "2015-10-28, 7:12 a.m.",
      "commitName": "62a0ab3e60e4a1c62c806934158444f901d8e22c",
      "commitAuthor": "Sam Brannen",
      "commitDateOld": "2015-10-28, 6:58 a.m.",
      "commitNameOld": "0f960f597c4d3909797a94e92f03ab52d346d318",
      "commitAuthorOld": "Johannes Link",
      "daysBetweenCommits": 0.01,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic void execute(TestPlan testPlan) {\n\t\tnotifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionStarted);\n\n\t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n\t\t\ttestEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n\t\t}\n\n\t\tnotifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 32,
      "functionName": "execute",
      "diff": "@@ -1,9 +1,9 @@\n-  public void execute(TestPlan testPlan) {\n-    notifyListeners(TestListener::testPlanExecutionStarted);\n+\tpublic void execute(TestPlan testPlan) {\n+\t\tnotifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionStarted);\n \n-    for (TestEngine testEngine : lookupAllTestEngines()) {\n-      testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n-    }\n+\t\tfor (TestEngine testEngine : lookupAllTestEngines()) {\n+\t\t\ttestEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n+\t\t}\n \n-    notifyListeners(TestListener::testPlanExecutionFinished);\n-  }\n\\ No newline at end of file\n+\t\tnotifyTestPlanExecutionListeners(TestPlanExecutionListener::testPlanExecutionFinished);\n+\t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "db7c029008a0fab7fb6770078c1b54a175c35c6c": {
      "type": "Ybodychange",
      "commitMessage": "Rename listener methods that operate on TestPlan level\n",
      "commitDate": "2015-10-28, 5:23 a.m.",
      "commitName": "db7c029008a0fab7fb6770078c1b54a175c35c6c",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015-10-28, 5:23 a.m.",
      "commitNameOld": "d10441a8f8130f3c71535c02f79e8135d4b64fc2",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "  public void execute(TestPlan testPlan) {\n    notifyListeners(TestListener::testPlanExecutionStarted);\n\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n      testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n    }\n\n    notifyListeners(TestListener::testPlanExecutionFinished);\n  }",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 25,
      "functionName": "execute",
      "diff": "@@ -1,9 +1,9 @@\n   public void execute(TestPlan testPlan) {\n-    notifyListeners(TestListener::testExecutionStarted);\n+    notifyListeners(TestListener::testPlanExecutionStarted);\n \n     for (TestEngine testEngine : lookupAllTestEngines()) {\n       testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n     }\n \n-    notifyListeners(TestListener::testExecutionFinished);\n+    notifyListeners(TestListener::testPlanExecutionFinished);\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "36f0d62665a55a1250823ea1b7a7d9148efb27a8": {
      "type": "Ybodychange",
      "commitMessage": "- Added support for TestListeners in the JUnit5TestEngine\n- Test result is not reported to the listeners correctly\n- Currently, the TestListeners are registered using the ServiceLoader, this should be changed later on\n",
      "commitDate": "2015-10-28, 5:23 a.m.",
      "commitName": "36f0d62665a55a1250823ea1b7a7d9148efb27a8",
      "commitAuthor": "Stefan Bechtold",
      "commitDateOld": "2015-10-28, 5:23 a.m.",
      "commitNameOld": "cbf97077bae0db71dc3a7cade28c3b00587a8699",
      "commitAuthorOld": "Stefan Bechtold",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "  public void execute(TestPlan testPlan) {\n    notifyListeners(TestListener::testExecutionStarted);\n\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n      testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n    }\n\n    notifyListeners(TestListener::testExecutionFinished);\n  }",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 23,
      "functionName": "execute",
      "diff": "@@ -1,6 +1,9 @@\n   public void execute(TestPlan testPlan) {\n+    notifyListeners(TestListener::testExecutionStarted);\n+\n     for (TestEngine testEngine : lookupAllTestEngines()) {\n-      List\u003cTestDescriptor\u003e tests \u003d testPlan.getAllTestsForTestEngine(testEngine);\n-      testEngine.execute(tests);\n+      testEngine.execute(testPlan.getAllTestsForTestEngine(testEngine));\n     }\n+\n+    notifyListeners(TestListener::testExecutionFinished);\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cbf97077bae0db71dc3a7cade28c3b00587a8699": {
      "type": "Ymultichange(Yparameterchange,Yexceptionschange,Ybodychange)",
      "commitMessage": "Refactoring to focus implementation of the JUnit framework internals:\n- Removed serializable objects for inter-process communication with tool-integrators\n- Supported different ways to generate test descriptors from configuration\n- Moved Console Launcher (main) to Sample Project\n- Introduced ReflectionUtils for common reflection tasks\n- Added TestListener interface with two implementations\n- Updated the Engine interface to work with TestDescriptors only\n",
      "commitDate": "2015-10-28, 5:23 a.m.",
      "commitName": "cbf97077bae0db71dc3a7cade28c3b00587a8699",
      "commitAuthor": "Stefan Bechtold",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Refactoring to focus implementation of the JUnit framework internals:\n- Removed serializable objects for inter-process communication with tool-integrators\n- Supported different ways to generate test descriptors from configuration\n- Moved Console Launcher (main) to Sample Project\n- Introduced ReflectionUtils for common reflection tasks\n- Added TestListener interface with two implementations\n- Updated the Engine interface to work with TestDescriptors only\n",
          "commitDate": "2015-10-28, 5:23 a.m.",
          "commitName": "cbf97077bae0db71dc3a7cade28c3b00587a8699",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2015-10-27, 1:00 p.m.",
          "commitNameOld": "f6372b05546e29c74e6809f4e54a096f537bcd5d",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "  public void execute(TestPlan testPlan) {\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n      List\u003cTestDescriptor\u003e tests \u003d testPlan.getAllTestsForTestEngine(testEngine);\n      testEngine.execute(tests);\n    }\n  }",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 21,
          "functionName": "execute",
          "diff": "@@ -1,14 +1,6 @@\n-\tpublic void execute(TestExecutionPlan testPlan) throws Throwable {\n-\t\tfor (Engine engine : discoverEngines()) {\n-\t\t\tMap\u003cTestIdentifier, TestDescriptor\u003e engineTestDescriptions \u003d testDescriptionsByEngine\n-\t\t\t\t\t.get(engine.getId());\n-\t\t\tList\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n-\t\t\tList\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream()\n-\t\t\t\t\t.filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n-\t\t\tList\u003cTestDescriptor\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n-\t\t\tfor (TestIdentifier testIdentifier : filtered) {\n-\t\t\t\ttestDescriptions.add(lookup(engine, testIdentifier));\n-\t\t\t}\n-\t\t\tengine.execute(testDescriptions);\n-\t\t}\n-\t}\n\\ No newline at end of file\n+  public void execute(TestPlan testPlan) {\n+    for (TestEngine testEngine : lookupAllTestEngines()) {\n+      List\u003cTestDescriptor\u003e tests \u003d testPlan.getAllTestsForTestEngine(testEngine);\n+      testEngine.execute(tests);\n+    }\n+  }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[testPlan-TestExecutionPlan]",
            "newValue": "[testPlan-TestPlan]"
          }
        },
        {
          "type": "Yexceptionschange",
          "commitMessage": "Refactoring to focus implementation of the JUnit framework internals:\n- Removed serializable objects for inter-process communication with tool-integrators\n- Supported different ways to generate test descriptors from configuration\n- Moved Console Launcher (main) to Sample Project\n- Introduced ReflectionUtils for common reflection tasks\n- Added TestListener interface with two implementations\n- Updated the Engine interface to work with TestDescriptors only\n",
          "commitDate": "2015-10-28, 5:23 a.m.",
          "commitName": "cbf97077bae0db71dc3a7cade28c3b00587a8699",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2015-10-27, 1:00 p.m.",
          "commitNameOld": "f6372b05546e29c74e6809f4e54a096f537bcd5d",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "  public void execute(TestPlan testPlan) {\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n      List\u003cTestDescriptor\u003e tests \u003d testPlan.getAllTestsForTestEngine(testEngine);\n      testEngine.execute(tests);\n    }\n  }",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 21,
          "functionName": "execute",
          "diff": "@@ -1,14 +1,6 @@\n-\tpublic void execute(TestExecutionPlan testPlan) throws Throwable {\n-\t\tfor (Engine engine : discoverEngines()) {\n-\t\t\tMap\u003cTestIdentifier, TestDescriptor\u003e engineTestDescriptions \u003d testDescriptionsByEngine\n-\t\t\t\t\t.get(engine.getId());\n-\t\t\tList\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n-\t\t\tList\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream()\n-\t\t\t\t\t.filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n-\t\t\tList\u003cTestDescriptor\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n-\t\t\tfor (TestIdentifier testIdentifier : filtered) {\n-\t\t\t\ttestDescriptions.add(lookup(engine, testIdentifier));\n-\t\t\t}\n-\t\t\tengine.execute(testDescriptions);\n-\t\t}\n-\t}\n\\ No newline at end of file\n+  public void execute(TestPlan testPlan) {\n+    for (TestEngine testEngine : lookupAllTestEngines()) {\n+      List\u003cTestDescriptor\u003e tests \u003d testPlan.getAllTestsForTestEngine(testEngine);\n+      testEngine.execute(tests);\n+    }\n+  }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[Throwable]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Refactoring to focus implementation of the JUnit framework internals:\n- Removed serializable objects for inter-process communication with tool-integrators\n- Supported different ways to generate test descriptors from configuration\n- Moved Console Launcher (main) to Sample Project\n- Introduced ReflectionUtils for common reflection tasks\n- Added TestListener interface with two implementations\n- Updated the Engine interface to work with TestDescriptors only\n",
          "commitDate": "2015-10-28, 5:23 a.m.",
          "commitName": "cbf97077bae0db71dc3a7cade28c3b00587a8699",
          "commitAuthor": "Stefan Bechtold",
          "commitDateOld": "2015-10-27, 1:00 p.m.",
          "commitNameOld": "f6372b05546e29c74e6809f4e54a096f537bcd5d",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.68,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "  public void execute(TestPlan testPlan) {\n    for (TestEngine testEngine : lookupAllTestEngines()) {\n      List\u003cTestDescriptor\u003e tests \u003d testPlan.getAllTestsForTestEngine(testEngine);\n      testEngine.execute(tests);\n    }\n  }",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 21,
          "functionName": "execute",
          "diff": "@@ -1,14 +1,6 @@\n-\tpublic void execute(TestExecutionPlan testPlan) throws Throwable {\n-\t\tfor (Engine engine : discoverEngines()) {\n-\t\t\tMap\u003cTestIdentifier, TestDescriptor\u003e engineTestDescriptions \u003d testDescriptionsByEngine\n-\t\t\t\t\t.get(engine.getId());\n-\t\t\tList\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n-\t\t\tList\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream()\n-\t\t\t\t\t.filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n-\t\t\tList\u003cTestDescriptor\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n-\t\t\tfor (TestIdentifier testIdentifier : filtered) {\n-\t\t\t\ttestDescriptions.add(lookup(engine, testIdentifier));\n-\t\t\t}\n-\t\t\tengine.execute(testDescriptions);\n-\t\t}\n-\t}\n\\ No newline at end of file\n+  public void execute(TestPlan testPlan) {\n+    for (TestEngine testEngine : lookupAllTestEngines()) {\n+      List\u003cTestDescriptor\u003e tests \u003d testPlan.getAllTestsForTestEngine(testEngine);\n+      testEngine.execute(tests);\n+    }\n+  }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "f6372b05546e29c74e6809f4e54a096f537bcd5d": {
      "type": "Yexceptionschange",
      "commitMessage": "Copy over code from @bechte\n",
      "commitDate": "2015-10-27, 1:00 p.m.",
      "commitName": "f6372b05546e29c74e6809f4e54a096f537bcd5d",
      "commitAuthor": "Marc Philipp",
      "commitDateOld": "2015-10-27, 12:09 p.m.",
      "commitNameOld": "226ecd8efc45e4540bba43f6c604e891b5a94689",
      "commitAuthorOld": "Marc Philipp",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic void execute(TestExecutionPlan testPlan) throws Throwable {\n\t\tfor (Engine engine : discoverEngines()) {\n\t\t\tMap\u003cTestIdentifier, TestDescriptor\u003e engineTestDescriptions \u003d testDescriptionsByEngine\n\t\t\t\t\t.get(engine.getId());\n\t\t\tList\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n\t\t\tList\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream()\n\t\t\t\t\t.filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n\t\t\tList\u003cTestDescriptor\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n\t\t\tfor (TestIdentifier testIdentifier : filtered) {\n\t\t\t\ttestDescriptions.add(lookup(engine, testIdentifier));\n\t\t\t}\n\t\t\tengine.execute(testDescriptions);\n\t\t}\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 40,
      "functionName": "execute",
      "diff": "@@ -1,14 +1,14 @@\n-\tpublic void execute(TestExecutionPlan testPlan) throws Exception {\n+\tpublic void execute(TestExecutionPlan testPlan) throws Throwable {\n \t\tfor (Engine engine : discoverEngines()) {\n \t\t\tMap\u003cTestIdentifier, TestDescriptor\u003e engineTestDescriptions \u003d testDescriptionsByEngine\n \t\t\t\t\t.get(engine.getId());\n \t\t\tList\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n \t\t\tList\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream()\n \t\t\t\t\t.filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n \t\t\tList\u003cTestDescriptor\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n \t\t\tfor (TestIdentifier testIdentifier : filtered) {\n \t\t\t\ttestDescriptions.add(lookup(engine, testIdentifier));\n \t\t\t}\n \t\t\tengine.execute(testDescriptions);\n \t\t}\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[Exception]",
        "newValue": "[Throwable]"
      }
    },
    "226ecd8efc45e4540bba43f6c604e891b5a94689": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Saved code from current master\n",
      "commitDate": "2015-10-27, 12:09 p.m.",
      "commitName": "226ecd8efc45e4540bba43f6c604e891b5a94689",
      "commitAuthor": "Marc Philipp",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Saved code from current master\n",
          "commitDate": "2015-10-27, 12:09 p.m.",
          "commitName": "226ecd8efc45e4540bba43f6c604e891b5a94689",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015-10-27, 10:37 a.m.",
          "commitNameOld": "75a91267a92e9fd4d171a3f18f2135e675687961",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "\tpublic void execute(TestExecutionPlan testPlan) throws Exception {\n\t\tfor (Engine engine : discoverEngines()) {\n\t\t\tMap\u003cTestIdentifier, TestDescriptor\u003e engineTestDescriptions \u003d testDescriptionsByEngine\n\t\t\t\t\t.get(engine.getId());\n\t\t\tList\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n\t\t\tList\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream()\n\t\t\t\t\t.filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n\t\t\tList\u003cTestDescriptor\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n\t\t\tfor (TestIdentifier testIdentifier : filtered) {\n\t\t\t\ttestDescriptions.add(lookup(engine, testIdentifier));\n\t\t\t}\n\t\t\tengine.execute(testDescriptions);\n\t\t}\n\t}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 39,
          "functionName": "execute",
          "diff": "@@ -1,14 +1,14 @@\n-\tpublic void execute(TestPlan testPlan) throws Exception {\n+\tpublic void execute(TestExecutionPlan testPlan) throws Exception {\n \t\tfor (Engine engine : discoverEngines()) {\n-\t\t\tMap\u003cTestIdentifier, EngineTestDescription\u003e engineTestDescriptions \u003d testDescriptionsByEngine\n+\t\t\tMap\u003cTestIdentifier, TestDescriptor\u003e engineTestDescriptions \u003d testDescriptionsByEngine\n \t\t\t\t\t.get(engine.getId());\n \t\t\tList\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n \t\t\tList\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream()\n \t\t\t\t\t.filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n-\t\t\tList\u003cEngineTestDescription\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n+\t\t\tList\u003cTestDescriptor\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n \t\t\tfor (TestIdentifier testIdentifier : filtered) {\n \t\t\t\ttestDescriptions.add(lookup(engine, testIdentifier));\n \t\t\t}\n \t\t\tengine.execute(testDescriptions);\n \t\t}\n \t}\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[testPlan-TestPlan]",
            "newValue": "[testPlan-TestExecutionPlan]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Saved code from current master\n",
          "commitDate": "2015-10-27, 12:09 p.m.",
          "commitName": "226ecd8efc45e4540bba43f6c604e891b5a94689",
          "commitAuthor": "Marc Philipp",
          "commitDateOld": "2015-10-27, 10:37 a.m.",
          "commitNameOld": "75a91267a92e9fd4d171a3f18f2135e675687961",
          "commitAuthorOld": "Marc Philipp",
          "daysBetweenCommits": 0.06,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "\tpublic void execute(TestExecutionPlan testPlan) throws Exception {\n\t\tfor (Engine engine : discoverEngines()) {\n\t\t\tMap\u003cTestIdentifier, TestDescriptor\u003e engineTestDescriptions \u003d testDescriptionsByEngine\n\t\t\t\t\t.get(engine.getId());\n\t\t\tList\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n\t\t\tList\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream()\n\t\t\t\t\t.filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n\t\t\tList\u003cTestDescriptor\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n\t\t\tfor (TestIdentifier testIdentifier : filtered) {\n\t\t\t\ttestDescriptions.add(lookup(engine, testIdentifier));\n\t\t\t}\n\t\t\tengine.execute(testDescriptions);\n\t\t}\n\t}",
          "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
          "functionStartLine": 39,
          "functionName": "execute",
          "diff": "@@ -1,14 +1,14 @@\n-\tpublic void execute(TestPlan testPlan) throws Exception {\n+\tpublic void execute(TestExecutionPlan testPlan) throws Exception {\n \t\tfor (Engine engine : discoverEngines()) {\n-\t\t\tMap\u003cTestIdentifier, EngineTestDescription\u003e engineTestDescriptions \u003d testDescriptionsByEngine\n+\t\t\tMap\u003cTestIdentifier, TestDescriptor\u003e engineTestDescriptions \u003d testDescriptionsByEngine\n \t\t\t\t\t.get(engine.getId());\n \t\t\tList\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n \t\t\tList\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream()\n \t\t\t\t\t.filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n-\t\t\tList\u003cEngineTestDescription\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n+\t\t\tList\u003cTestDescriptor\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n \t\t\tfor (TestIdentifier testIdentifier : filtered) {\n \t\t\t\ttestDescriptions.add(lookup(engine, testIdentifier));\n \t\t\t}\n \t\t\tengine.execute(testDescriptions);\n \t\t}\n \t}\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "75a91267a92e9fd4d171a3f18f2135e675687961": {
      "type": "Yintroduced",
      "commitMessage": "Results of 1st mob programming session\n",
      "commitDate": "2015-10-27, 10:37 a.m.",
      "commitName": "75a91267a92e9fd4d171a3f18f2135e675687961",
      "commitAuthor": "Marc Philipp",
      "diff": "@@ -0,0 +1,14 @@\n+\tpublic void execute(TestPlan testPlan) throws Exception {\n+\t\tfor (Engine engine : discoverEngines()) {\n+\t\t\tMap\u003cTestIdentifier, EngineTestDescription\u003e engineTestDescriptions \u003d testDescriptionsByEngine\n+\t\t\t\t\t.get(engine.getId());\n+\t\t\tList\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n+\t\t\tList\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream()\n+\t\t\t\t\t.filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n+\t\t\tList\u003cEngineTestDescription\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n+\t\t\tfor (TestIdentifier testIdentifier : filtered) {\n+\t\t\t\ttestDescriptions.add(lookup(engine, testIdentifier));\n+\t\t\t}\n+\t\t\tengine.execute(testDescriptions);\n+\t\t}\n+\t}\n\\ No newline at end of file\n",
      "actualSource": "\tpublic void execute(TestPlan testPlan) throws Exception {\n\t\tfor (Engine engine : discoverEngines()) {\n\t\t\tMap\u003cTestIdentifier, EngineTestDescription\u003e engineTestDescriptions \u003d testDescriptionsByEngine\n\t\t\t\t\t.get(engine.getId());\n\t\t\tList\u003cTestIdentifier\u003e testIdentifiers \u003d testPlan.getTestIdentifiers();\n\t\t\tList\u003cTestIdentifier\u003e filtered \u003d engineTestDescriptions.keySet().stream()\n\t\t\t\t\t.filter(testIdentifier -\u003e testIdentifiers.contains(testIdentifier)).collect(Collectors.toList());\n\t\t\tList\u003cEngineTestDescription\u003e testDescriptions \u003d new ArrayList\u003c\u003e();\n\t\t\tfor (TestIdentifier testIdentifier : filtered) {\n\t\t\t\ttestDescriptions.add(lookup(engine, testIdentifier));\n\t\t\t}\n\t\t\tengine.execute(testDescriptions);\n\t\t}\n\t}",
      "path": "junit-launcher/src/main/java/org/junit/gen5/launcher/Launcher.java",
      "functionStartLine": 39,
      "functionName": "execute"
    }
  }
}