{
  "origin": "codeshovel",
  "repositoryName": "okhttp",
  "repositoryPath": "H:\\Projects\\square\\okhttp/.git",
  "startCommitName": "5224f3045ba9b171fce521777edf389f9206173c",
  "sourceFileName": "Http2Connection.java",
  "functionName": "newStream",
  "functionId": "newStream___requestHeaders-List__Header____out-boolean",
  "sourceFilePath": "okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java",
  "functionStartLine": 229,
  "functionEndLine": 231,
  "numCommitsSeen": 183,
  "timeTaken": 1594,
  "changeHistory": [
    "3d43a8dba89ccd7333c3ebcf74928e441790d943",
    "0c04821a25c83fddebb29e8cd590609142ba20a2",
    "c9a89876de476983f273edbf108c365127c18c5e",
    "c753d2e41ba667f9b5a31451a16ecbaecdc65d80",
    "110a4fac4257fe2df0e23149fbef76e750604cf4",
    "fb46f100a4d66342a0b101624fd351a51b6f14a9",
    "ab78dadb4bb94db74770e179e04e2ed791c4a51e",
    "358169b89f32c00bf229b4e42ccef756588da71f",
    "d4508141fc9fa1b816c5a1ff3f39149d4dfb22de",
    "b95a0ccbcae50f92acc923d62fc6c9cecc6bbb63",
    "ef30f7efc61ac249c1a8b43e41dba03a2bf0bef8",
    "5c787a0b9d5c83c764880da4b1503a65ee0ff267",
    "68de030b356e83ca5680986a290e98cfee8fd550",
    "a91124b6d4e2eb1bb3c71a7a8ddff7d40b7db55a",
    "2f31d7122d8806b6c32d2d1e181ca635fb80bba7",
    "39c0d7d56397ab14892db8032464cb8a9f983ff1",
    "3c0faa9ca18de3be0a178e590086888f4f89612a",
    "7ccbf48838b7cfe42759c67790636d442ea5daa3",
    "6f6d959fdae64065521990413f86bc7ab038d7c1",
    "1bd9fefb5199d1499c8dac6c82c18c82e0678428",
    "06579c5bfb6a051a9fbca5be2d15a52fcf77f38c",
    "689f66222bd8984dd69229a4ee9caf8da528ae12",
    "7f4249625960b7f10dc61aae4d1896c2e126f538",
    "60d5852c6676ece85b0e3d0c6e45fb0186303f83",
    "50999cceb5f5bcdaf79baa5ac7eeef90c72bda8d",
    "853c4012b79711f123c0b9780e565062b32bf1c7",
    "68ebb704fb73ad1545ae82287f8b2a5f68d8e69d",
    "60b3a6dd6240f40c29fffd897c2dac314af49836",
    "2bd54fa72fe72f92212428a024050838c2b62d57",
    "ea63463c2ff8a67f63e541036f0d5998b5bb1f3e"
  ],
  "changeHistoryShort": {
    "3d43a8dba89ccd7333c3ebcf74928e441790d943": "Ymultichange(Yfilerename,Yreturntypechange)",
    "0c04821a25c83fddebb29e8cd590609142ba20a2": "Ymultichange(Yparameterchange,Ybodychange)",
    "c9a89876de476983f273edbf108c365127c18c5e": "Yfilerename",
    "c753d2e41ba667f9b5a31451a16ecbaecdc65d80": "Ymultichange(Yfilerename,Yreturntypechange)",
    "110a4fac4257fe2df0e23149fbef76e750604cf4": "Yfilerename",
    "fb46f100a4d66342a0b101624fd351a51b6f14a9": "Ybodychange",
    "ab78dadb4bb94db74770e179e04e2ed791c4a51e": "Ybodychange",
    "358169b89f32c00bf229b4e42ccef756588da71f": "Ybodychange",
    "d4508141fc9fa1b816c5a1ff3f39149d4dfb22de": "Ybodychange",
    "b95a0ccbcae50f92acc923d62fc6c9cecc6bbb63": "Yparameterchange",
    "ef30f7efc61ac249c1a8b43e41dba03a2bf0bef8": "Ybodychange",
    "5c787a0b9d5c83c764880da4b1503a65ee0ff267": "Yparameterchange",
    "68de030b356e83ca5680986a290e98cfee8fd550": "Ybodychange",
    "a91124b6d4e2eb1bb3c71a7a8ddff7d40b7db55a": "Ybodychange",
    "2f31d7122d8806b6c32d2d1e181ca635fb80bba7": "Ybodychange",
    "39c0d7d56397ab14892db8032464cb8a9f983ff1": "Ybodychange",
    "3c0faa9ca18de3be0a178e590086888f4f89612a": "Yfilerename",
    "7ccbf48838b7cfe42759c67790636d442ea5daa3": "Yfilerename",
    "6f6d959fdae64065521990413f86bc7ab038d7c1": "Ybodychange",
    "1bd9fefb5199d1499c8dac6c82c18c82e0678428": "Ybodychange",
    "06579c5bfb6a051a9fbca5be2d15a52fcf77f38c": "Ybodychange",
    "689f66222bd8984dd69229a4ee9caf8da528ae12": "Yfilerename",
    "7f4249625960b7f10dc61aae4d1896c2e126f538": "Ybodychange",
    "60d5852c6676ece85b0e3d0c6e45fb0186303f83": "Ybodychange",
    "50999cceb5f5bcdaf79baa5ac7eeef90c72bda8d": "Yfilerename",
    "853c4012b79711f123c0b9780e565062b32bf1c7": "Ybodychange",
    "68ebb704fb73ad1545ae82287f8b2a5f68d8e69d": "Ybodychange",
    "60b3a6dd6240f40c29fffd897c2dac314af49836": "Ymultichange(Ymodifierchange,Ybodychange)",
    "2bd54fa72fe72f92212428a024050838c2b62d57": "Ybodychange",
    "ea63463c2ff8a67f63e541036f0d5998b5bb1f3e": "Yintroduced"
  },
  "changeHistoryDetails": {
    "3d43a8dba89ccd7333c3ebcf74928e441790d943": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange)",
      "commitMessage": "Rename FramedConnection to Http2Connection.\n\nAlso rename HttpStream to HttpCodec. This is the interface implemented\nfor both HTTP/1.1 and HTTP/2. The HTTP/2 codec creates a stream when\nit is used.\n",
      "commitDate": "2016-07-09, 6:09 p.m.",
      "commitName": "3d43a8dba89ccd7333c3ebcf74928e441790d943",
      "commitAuthor": "jwilson",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Rename FramedConnection to Http2Connection.\n\nAlso rename HttpStream to HttpCodec. This is the interface implemented\nfor both HTTP/1.1 and HTTP/2. The HTTP/2 codec creates a stream when\nit is used.\n",
          "commitDate": "2016-07-09, 6:09 p.m.",
          "commitName": "3d43a8dba89ccd7333c3ebcf74928e441790d943",
          "commitAuthor": "jwilson",
          "commitDateOld": "2016-07-09, 5:27 p.m.",
          "commitNameOld": "33660bf58babd09521d19ef0ed1b09c15a5e27bb",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "  public Http2Stream newStream(List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n    return newStream(0, requestHeaders, out);\n  }",
          "path": "okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java",
          "functionStartLine": 204,
          "functionName": "newStream",
          "diff": "@@ -1,3 +1,3 @@\n-  public FramedStream newStream(List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n+  public Http2Stream newStream(List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n     return newStream(0, requestHeaders, out);\n   }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "okhttp/src/main/java/okhttp3/internal/framed/FramedConnection.java",
            "newPath": "okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Rename FramedConnection to Http2Connection.\n\nAlso rename HttpStream to HttpCodec. This is the interface implemented\nfor both HTTP/1.1 and HTTP/2. The HTTP/2 codec creates a stream when\nit is used.\n",
          "commitDate": "2016-07-09, 6:09 p.m.",
          "commitName": "3d43a8dba89ccd7333c3ebcf74928e441790d943",
          "commitAuthor": "jwilson",
          "commitDateOld": "2016-07-09, 5:27 p.m.",
          "commitNameOld": "33660bf58babd09521d19ef0ed1b09c15a5e27bb",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 0.03,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "  public Http2Stream newStream(List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n    return newStream(0, requestHeaders, out);\n  }",
          "path": "okhttp/src/main/java/okhttp3/internal/http2/Http2Connection.java",
          "functionStartLine": 204,
          "functionName": "newStream",
          "diff": "@@ -1,3 +1,3 @@\n-  public FramedStream newStream(List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n+  public Http2Stream newStream(List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n     return newStream(0, requestHeaders, out);\n   }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "FramedStream",
            "newValue": "Http2Stream"
          }
        }
      ]
    },
    "0c04821a25c83fddebb29e8cd590609142ba20a2": {
      "type": "Ymultichange(Yparameterchange,Ybodychange)",
      "commitMessage": "Drop support for SPDY/3.\n\nIt\u0027s redundant with HTTP/2.\n",
      "commitDate": "2016-07-09, 5:19 p.m.",
      "commitName": "0c04821a25c83fddebb29e8cd590609142ba20a2",
      "commitAuthor": "jwilson",
      "subchanges": [
        {
          "type": "Yparameterchange",
          "commitMessage": "Drop support for SPDY/3.\n\nIt\u0027s redundant with HTTP/2.\n",
          "commitDate": "2016-07-09, 5:19 p.m.",
          "commitName": "0c04821a25c83fddebb29e8cd590609142ba20a2",
          "commitAuthor": "jwilson",
          "commitDateOld": "2016-07-06, 10:02 p.m.",
          "commitNameOld": "1267cb958c507f123ab135cac638768009dc84b5",
          "commitAuthorOld": "Dave Roberge",
          "daysBetweenCommits": 2.8,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "  public FramedStream newStream(List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n    return newStream(0, requestHeaders, out);\n  }",
          "path": "okhttp/src/main/java/okhttp3/internal/framed/FramedConnection.java",
          "functionStartLine": 204,
          "functionName": "newStream",
          "diff": "@@ -1,4 +1,3 @@\n-  public FramedStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in)\n-      throws IOException {\n-    return newStream(0, requestHeaders, out, in);\n+  public FramedStream newStream(List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n+    return newStream(0, requestHeaders, out);\n   }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[requestHeaders-List\u003cHeader\u003e, out-boolean, in-boolean]",
            "newValue": "[requestHeaders-List\u003cHeader\u003e, out-boolean]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Drop support for SPDY/3.\n\nIt\u0027s redundant with HTTP/2.\n",
          "commitDate": "2016-07-09, 5:19 p.m.",
          "commitName": "0c04821a25c83fddebb29e8cd590609142ba20a2",
          "commitAuthor": "jwilson",
          "commitDateOld": "2016-07-06, 10:02 p.m.",
          "commitNameOld": "1267cb958c507f123ab135cac638768009dc84b5",
          "commitAuthorOld": "Dave Roberge",
          "daysBetweenCommits": 2.8,
          "commitsBetweenForRepo": 7,
          "commitsBetweenForFile": 1,
          "actualSource": "  public FramedStream newStream(List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n    return newStream(0, requestHeaders, out);\n  }",
          "path": "okhttp/src/main/java/okhttp3/internal/framed/FramedConnection.java",
          "functionStartLine": 204,
          "functionName": "newStream",
          "diff": "@@ -1,4 +1,3 @@\n-  public FramedStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in)\n-      throws IOException {\n-    return newStream(0, requestHeaders, out, in);\n+  public FramedStream newStream(List\u003cHeader\u003e requestHeaders, boolean out) throws IOException {\n+    return newStream(0, requestHeaders, out);\n   }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "c9a89876de476983f273edbf108c365127c18c5e": {
      "type": "Yfilerename",
      "commitMessage": "Rename com.squareup.okhttp to okhttp3\n\nMaven group changes will come in follow up.\n",
      "commitDate": "2015-12-16, 1:34 a.m.",
      "commitName": "c9a89876de476983f273edbf108c365127c18c5e",
      "commitAuthor": "jwilson",
      "commitDateOld": "2015-12-15, 9:36 p.m.",
      "commitNameOld": "54dc2df914f2aae37fb48cc2c2f7560ee664bc2b",
      "commitAuthorOld": "Jake Wharton",
      "daysBetweenCommits": 0.17,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "  public FramedStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in)\n      throws IOException {\n    return newStream(0, requestHeaders, out, in);\n  }",
      "path": "okhttp/src/main/java/okhttp3/internal/framed/FramedConnection.java",
      "functionStartLine": 247,
      "functionName": "newStream",
      "diff": "",
      "extendedDetails": {
        "oldPath": "okhttp/src/main/java/com/squareup/okhttp/internal/framed/FramedConnection.java",
        "newPath": "okhttp/src/main/java/okhttp3/internal/framed/FramedConnection.java"
      }
    },
    "c753d2e41ba667f9b5a31451a16ecbaecdc65d80": {
      "type": "Ymultichange(Yfilerename,Yreturntypechange)",
      "commitMessage": "Rename \u0027spdy\u0027 references to \u0027framed\u0027 where appropriate.\n",
      "commitDate": "2015-06-17, 6:40 p.m.",
      "commitName": "c753d2e41ba667f9b5a31451a16ecbaecdc65d80",
      "commitAuthor": "Jake Wharton",
      "subchanges": [
        {
          "type": "Yfilerename",
          "commitMessage": "Rename \u0027spdy\u0027 references to \u0027framed\u0027 where appropriate.\n",
          "commitDate": "2015-06-17, 6:40 p.m.",
          "commitName": "c753d2e41ba667f9b5a31451a16ecbaecdc65d80",
          "commitAuthor": "Jake Wharton",
          "commitDateOld": "2015-06-16, 12:46 p.m.",
          "commitNameOld": "b262f2a03001cd990568b929b2739dd3c7adb75f",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 1.25,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "  public FramedStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in)\n      throws IOException {\n    return newStream(0, requestHeaders, out, in);\n  }",
          "path": "okhttp/src/main/java/com/squareup/okhttp/internal/framed/FramedConnection.java",
          "functionStartLine": 243,
          "functionName": "newStream",
          "diff": "@@ -1,4 +1,4 @@\n-  public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in)\n+  public FramedStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in)\n       throws IOException {\n     return newStream(0, requestHeaders, out, in);\n   }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldPath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
            "newPath": "okhttp/src/main/java/com/squareup/okhttp/internal/framed/FramedConnection.java"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "Rename \u0027spdy\u0027 references to \u0027framed\u0027 where appropriate.\n",
          "commitDate": "2015-06-17, 6:40 p.m.",
          "commitName": "c753d2e41ba667f9b5a31451a16ecbaecdc65d80",
          "commitAuthor": "Jake Wharton",
          "commitDateOld": "2015-06-16, 12:46 p.m.",
          "commitNameOld": "b262f2a03001cd990568b929b2739dd3c7adb75f",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 1.25,
          "commitsBetweenForRepo": 1,
          "commitsBetweenForFile": 1,
          "actualSource": "  public FramedStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in)\n      throws IOException {\n    return newStream(0, requestHeaders, out, in);\n  }",
          "path": "okhttp/src/main/java/com/squareup/okhttp/internal/framed/FramedConnection.java",
          "functionStartLine": 243,
          "functionName": "newStream",
          "diff": "@@ -1,4 +1,4 @@\n-  public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in)\n+  public FramedStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in)\n       throws IOException {\n     return newStream(0, requestHeaders, out, in);\n   }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "SpdyStream",
            "newValue": "FramedStream"
          }
        }
      ]
    },
    "110a4fac4257fe2df0e23149fbef76e750604cf4": {
      "type": "Yfilerename",
      "commitMessage": "Rearrange OkHttp modules.\n\nThe HTTP client and SPDY code are now a single module that\nmockwebserver depends upon.\n\nThe tests are now in a separate module that depends on both\nOkHttp and mockwebserver.\n",
      "commitDate": "2014-02-27, 11:28 p.m.",
      "commitName": "110a4fac4257fe2df0e23149fbef76e750604cf4",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "2014-02-25, 10:34 p.m.",
      "commitNameOld": "d5cbd0aebe090d956f54b6697068fcbff6d668e7",
      "commitAuthorOld": "Adrian Cole",
      "daysBetweenCommits": 2.04,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "  public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out,\n      boolean in) throws IOException {\n    return newStream(0, requestHeaders, out, in);\n  }",
      "path": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 222,
      "functionName": "newStream",
      "diff": "",
      "extendedDetails": {
        "oldPath": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
        "newPath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java"
      }
    },
    "fb46f100a4d66342a0b101624fd351a51b6f14a9": {
      "type": "Ybodychange",
      "commitMessage": "Teach MockWebServer HTTP/2 Push Promise.\n",
      "commitDate": "2014-02-23, 8:16 p.m.",
      "commitName": "fb46f100a4d66342a0b101624fd351a51b6f14a9",
      "commitAuthor": "Adrian Cole",
      "commitDateOld": "2014-02-23, 6:44 p.m.",
      "commitNameOld": "416e59e219804c8eca46b9317b19b8f8ac3cf24e",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 0.06,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "  public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out,\n      boolean in) throws IOException {\n    return newStream(0, requestHeaders, out, in);\n  }",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 222,
      "functionName": "newStream",
      "diff": "@@ -1,34 +1,4 @@\n-  public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in)\n-      throws IOException {\n-    boolean outFinished \u003d !out;\n-    boolean inFinished \u003d !in;\n-    int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n-    int priority \u003d -1; // TODO: permit the caller to specify a priority?\n-    int slot \u003d 0; // TODO: permit the caller to specify a slot?\n-    SpdyStream stream;\n-    int streamId;\n-\n-    synchronized (frameWriter) {\n-      synchronized (this) {\n-        if (shutdown) {\n-          throw new IOException(\"shutdown\");\n-        }\n-        streamId \u003d nextStreamId;\n-        nextStreamId +\u003d 2;\n-        stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n-        if (stream.isOpen()) {\n-          streams.put(streamId, stream);\n-          setIdle(false);\n-        }\n-      }\n-\n-      frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n-          requestHeaders);\n-    }\n-\n-    if (!out) {\n-      frameWriter.flush();\n-    }\n-\n-    return stream;\n+  public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out,\n+      boolean in) throws IOException {\n+    return newStream(0, requestHeaders, out, in);\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ab78dadb4bb94db74770e179e04e2ed791c4a51e": {
      "type": "Ybodychange",
      "commitMessage": "Use BufferedSink in SPDY and HTTP/2.\n",
      "commitDate": "2014-02-23, 11:42 a.m.",
      "commitName": "ab78dadb4bb94db74770e179e04e2ed791c4a51e",
      "commitAuthor": "jwilson",
      "commitDateOld": "2014-02-22, 4:08 p.m.",
      "commitNameOld": "095448552ee41e62e58994be0f424df750c6822f",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 0.82,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "  public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in)\n      throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n    int priority \u003d -1; // TODO: permit the caller to specify a priority?\n    int slot \u003d 0; // TODO: permit the caller to specify a slot?\n    SpdyStream stream;\n    int streamId;\n\n    synchronized (frameWriter) {\n      synchronized (this) {\n        if (shutdown) {\n          throw new IOException(\"shutdown\");\n        }\n        streamId \u003d nextStreamId;\n        nextStreamId +\u003d 2;\n        stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n        if (stream.isOpen()) {\n          streams.put(streamId, stream);\n          setIdle(false);\n        }\n      }\n\n      frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n          requestHeaders);\n    }\n\n    if (!out) {\n      frameWriter.flush();\n    }\n\n    return stream;\n  }",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 207,
      "functionName": "newStream",
      "diff": "@@ -1,30 +1,34 @@\n   public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in)\n       throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n     int priority \u003d -1; // TODO: permit the caller to specify a priority?\n     int slot \u003d 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId \u003d nextStreamId;\n         nextStreamId +\u003d 2;\n         stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n       frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n           requestHeaders);\n     }\n \n+    if (!out) {\n+      frameWriter.flush();\n+    }\n+\n     return stream;\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "358169b89f32c00bf229b4e42ccef756588da71f": {
      "type": "Ybodychange",
      "commitMessage": "Send window update after the peer sends half the limit on a stream or connection.\n",
      "commitDate": "2014-01-27, 12:54 a.m.",
      "commitName": "358169b89f32c00bf229b4e42ccef756588da71f",
      "commitAuthor": "Adrian Cole",
      "commitDateOld": "2014-01-26, 5:01 p.m.",
      "commitNameOld": "d990b5819cd6282923134564f3bcc59263eb0616",
      "commitAuthorOld": "Adrian Cole",
      "daysBetweenCommits": 0.33,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "  public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in)\n      throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n    int priority \u003d -1; // TODO: permit the caller to specify a priority?\n    int slot \u003d 0; // TODO: permit the caller to specify a slot?\n    SpdyStream stream;\n    int streamId;\n\n    synchronized (frameWriter) {\n      synchronized (this) {\n        if (shutdown) {\n          throw new IOException(\"shutdown\");\n        }\n        streamId \u003d nextStreamId;\n        nextStreamId +\u003d 2;\n        stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n        if (stream.isOpen()) {\n          streams.put(streamId, stream);\n          setIdle(false);\n        }\n      }\n\n      frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n          requestHeaders);\n    }\n\n    return stream;\n  }",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 196,
      "functionName": "newStream",
      "diff": "@@ -1,31 +1,30 @@\n   public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in)\n       throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n     int priority \u003d -1; // TODO: permit the caller to specify a priority?\n     int slot \u003d 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId \u003d nextStreamId;\n         nextStreamId +\u003d 2;\n-        stream \u003d new SpdyStream(\n-            streamId, this, outFinished, inFinished, priority, requestHeaders, initialWindowSize);\n+        stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, requestHeaders);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n       frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n           requestHeaders);\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "d4508141fc9fa1b816c5a1ff3f39149d4dfb22de": {
      "type": "Ybodychange",
      "commitMessage": "Honor change in connection-level initial write window from peer settings.\n",
      "commitDate": "2014-01-26, 2:48 p.m.",
      "commitName": "d4508141fc9fa1b816c5a1ff3f39149d4dfb22de",
      "commitAuthor": "Adrian Cole",
      "commitDateOld": "2014-01-26, 12:36 p.m.",
      "commitNameOld": "b9b5c8462da2abe26dcf157d2df483ba61e3d379",
      "commitAuthorOld": "",
      "daysBetweenCommits": 0.09,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "  public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in)\n      throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n    int priority \u003d -1; // TODO: permit the caller to specify a priority?\n    int slot \u003d 0; // TODO: permit the caller to specify a slot?\n    SpdyStream stream;\n    int streamId;\n\n    synchronized (frameWriter) {\n      synchronized (this) {\n        if (shutdown) {\n          throw new IOException(\"shutdown\");\n        }\n        streamId \u003d nextStreamId;\n        nextStreamId +\u003d 2;\n        stream \u003d new SpdyStream(\n            streamId, this, outFinished, inFinished, priority, requestHeaders, initialWindowSize);\n        if (stream.isOpen()) {\n          streams.put(streamId, stream);\n          setIdle(false);\n        }\n      }\n\n      frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n          requestHeaders);\n    }\n\n    return stream;\n  }",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 189,
      "functionName": "newStream",
      "diff": "@@ -1,31 +1,31 @@\n   public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in)\n       throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n     int priority \u003d -1; // TODO: permit the caller to specify a priority?\n     int slot \u003d 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId \u003d nextStreamId;\n         nextStreamId +\u003d 2;\n         stream \u003d new SpdyStream(\n-            streamId, this, outFinished, inFinished, priority, requestHeaders, peerSettings);\n+            streamId, this, outFinished, inFinished, priority, requestHeaders, initialWindowSize);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n       frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n           requestHeaders);\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b95a0ccbcae50f92acc923d62fc6c9cecc6bbb63": {
      "type": "Yparameterchange",
      "commitMessage": "Top-level immutable, internal HeaderEntry class to reduce duplication around header names.  Do not emit :version in http/2.\n",
      "commitDate": "2014-01-19, 1:35 p.m.",
      "commitName": "b95a0ccbcae50f92acc923d62fc6c9cecc6bbb63",
      "commitAuthor": "Adrian Cole",
      "commitDateOld": "2014-01-18, 11:46 p.m.",
      "commitNameOld": "ef30f7efc61ac249c1a8b43e41dba03a2bf0bef8",
      "commitAuthorOld": "Adrian Cole",
      "daysBetweenCommits": 0.58,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "  public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in)\n      throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n    int priority \u003d -1; // TODO: permit the caller to specify a priority?\n    int slot \u003d 0; // TODO: permit the caller to specify a slot?\n    SpdyStream stream;\n    int streamId;\n\n    synchronized (frameWriter) {\n      synchronized (this) {\n        if (shutdown) {\n          throw new IOException(\"shutdown\");\n        }\n        streamId \u003d nextStreamId;\n        nextStreamId +\u003d 2;\n        stream \u003d new SpdyStream(\n            streamId, this, outFinished, inFinished, priority, requestHeaders, peerSettings);\n        if (stream.isOpen()) {\n          streams.put(streamId, stream);\n          setIdle(false);\n        }\n      }\n\n      frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n          requestHeaders);\n    }\n\n    return stream;\n  }",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 161,
      "functionName": "newStream",
      "diff": "@@ -1,31 +1,31 @@\n-  public SpdyStream newStream(List\u003cByteString\u003e requestHeaders, boolean out, boolean in)\n+  public SpdyStream newStream(List\u003cHeader\u003e requestHeaders, boolean out, boolean in)\n       throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n     int priority \u003d -1; // TODO: permit the caller to specify a priority?\n     int slot \u003d 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId \u003d nextStreamId;\n         nextStreamId +\u003d 2;\n         stream \u003d new SpdyStream(\n             streamId, this, outFinished, inFinished, priority, requestHeaders, peerSettings);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n       frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n           requestHeaders);\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[requestHeaders-List\u003cByteString\u003e, out-boolean, in-boolean]",
        "newValue": "[requestHeaders-List\u003cHeader\u003e, out-boolean, in-boolean]"
      }
    },
    "ef30f7efc61ac249c1a8b43e41dba03a2bf0bef8": {
      "type": "Ybodychange",
      "commitMessage": "Extract default settings to variants.  Read windowSize (spdy/3) and headerTableSize (http/2) from peer.\n",
      "commitDate": "2014-01-18, 11:46 p.m.",
      "commitName": "ef30f7efc61ac249c1a8b43e41dba03a2bf0bef8",
      "commitAuthor": "Adrian Cole",
      "commitDateOld": "2014-01-16, 11:39 a.m.",
      "commitNameOld": "9766de54dc8be4560b45d89452b016998277dae3",
      "commitAuthorOld": "Adrian Cole",
      "daysBetweenCommits": 2.51,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "  public SpdyStream newStream(List\u003cByteString\u003e requestHeaders, boolean out, boolean in)\n      throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n    int priority \u003d -1; // TODO: permit the caller to specify a priority?\n    int slot \u003d 0; // TODO: permit the caller to specify a slot?\n    SpdyStream stream;\n    int streamId;\n\n    synchronized (frameWriter) {\n      synchronized (this) {\n        if (shutdown) {\n          throw new IOException(\"shutdown\");\n        }\n        streamId \u003d nextStreamId;\n        nextStreamId +\u003d 2;\n        stream \u003d new SpdyStream(\n            streamId, this, outFinished, inFinished, priority, requestHeaders, peerSettings);\n        if (stream.isOpen()) {\n          streams.put(streamId, stream);\n          setIdle(false);\n        }\n      }\n\n      frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n          requestHeaders);\n    }\n\n    return stream;\n  }",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 162,
      "functionName": "newStream",
      "diff": "@@ -1,31 +1,31 @@\n   public SpdyStream newStream(List\u003cByteString\u003e requestHeaders, boolean out, boolean in)\n       throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n     int priority \u003d -1; // TODO: permit the caller to specify a priority?\n     int slot \u003d 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId \u003d nextStreamId;\n         nextStreamId +\u003d 2;\n         stream \u003d new SpdyStream(\n-            streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n+            streamId, this, outFinished, inFinished, priority, requestHeaders, peerSettings);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n       frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n           requestHeaders);\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5c787a0b9d5c83c764880da4b1503a65ee0ff267": {
      "type": "Yparameterchange",
      "commitMessage": "Refactor SPDY code to use ByteString for headers.\n",
      "commitDate": "2014-01-06, 9:51 p.m.",
      "commitName": "5c787a0b9d5c83c764880da4b1503a65ee0ff267",
      "commitAuthor": "Adrian Cole",
      "commitDateOld": "2014-01-05, 7:53 p.m.",
      "commitNameOld": "d7444f5fc4414b51b2708606257381cc0de404e1",
      "commitAuthorOld": "Adrian Cole",
      "daysBetweenCommits": 1.08,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "  public SpdyStream newStream(List\u003cByteString\u003e requestHeaders, boolean out, boolean in)\n      throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n    int priority \u003d -1; // TODO: permit the caller to specify a priority?\n    int slot \u003d 0; // TODO: permit the caller to specify a slot?\n    SpdyStream stream;\n    int streamId;\n\n    synchronized (frameWriter) {\n      synchronized (this) {\n        if (shutdown) {\n          throw new IOException(\"shutdown\");\n        }\n        streamId \u003d nextStreamId;\n        nextStreamId +\u003d 2;\n        stream \u003d new SpdyStream(\n            streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n        if (stream.isOpen()) {\n          streams.put(streamId, stream);\n          setIdle(false);\n        }\n      }\n\n      frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n          requestHeaders);\n    }\n\n    return stream;\n  }",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 161,
      "functionName": "newStream",
      "diff": "@@ -1,31 +1,31 @@\n-  public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n+  public SpdyStream newStream(List\u003cByteString\u003e requestHeaders, boolean out, boolean in)\n       throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n     int priority \u003d -1; // TODO: permit the caller to specify a priority?\n     int slot \u003d 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId \u003d nextStreamId;\n         nextStreamId +\u003d 2;\n         stream \u003d new SpdyStream(\n             streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n       frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n           requestHeaders);\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {
        "oldValue": "[requestHeaders-List\u003cString\u003e, out-boolean, in-boolean]",
        "newValue": "[requestHeaders-List\u003cByteString\u003e, out-boolean, in-boolean]"
      }
    },
    "68de030b356e83ca5680986a290e98cfee8fd550": {
      "type": "Ybodychange",
      "commitMessage": "update http2 to draft 9 and hpack to draft 5\n",
      "commitDate": "2014-01-04, 10:33 p.m.",
      "commitName": "68de030b356e83ca5680986a290e98cfee8fd550",
      "commitAuthor": "Adrian Cole",
      "commitDateOld": "2013-12-02, 1:18 p.m.",
      "commitNameOld": "f7d96b25631612860a1a3e3ebed76d5a4511b90c",
      "commitAuthorOld": "Adrian Cole",
      "daysBetweenCommits": 33.39,
      "commitsBetweenForRepo": 27,
      "commitsBetweenForFile": 1,
      "actualSource": "  public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n      throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n    int priority \u003d -1; // TODO: permit the caller to specify a priority?\n    int slot \u003d 0; // TODO: permit the caller to specify a slot?\n    SpdyStream stream;\n    int streamId;\n\n    synchronized (frameWriter) {\n      synchronized (this) {\n        if (shutdown) {\n          throw new IOException(\"shutdown\");\n        }\n        streamId \u003d nextStreamId;\n        nextStreamId +\u003d 2;\n        stream \u003d new SpdyStream(\n            streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n        if (stream.isOpen()) {\n          streams.put(streamId, stream);\n          setIdle(false);\n        }\n      }\n\n      frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n          requestHeaders);\n    }\n\n    return stream;\n  }",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 149,
      "functionName": "newStream",
      "diff": "@@ -1,31 +1,31 @@\n   public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n       throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n-    int priority \u003d 0; // TODO: permit the caller to specify a priority?\n+    int priority \u003d -1; // TODO: permit the caller to specify a priority?\n     int slot \u003d 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId \u003d nextStreamId;\n         nextStreamId +\u003d 2;\n         stream \u003d new SpdyStream(\n             streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n       frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n           requestHeaders);\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a91124b6d4e2eb1bb3c71a7a8ddff7d40b7db55a": {
      "type": "Ybodychange",
      "commitMessage": "Use one callback for SYN_STREAM, SYN_REPLY and HEADERS.\n\nThis is closer to the semantics of HTTP/2.0, which uses the HEADERS\nframe for all three types. SPDY is a bit more strict because it\nrelies on redundancy; it\u0027s an error to send a SYN_REPLY after a\nHEADERS frame. With HTTP/2.0, there\u0027s only one type so there\u0027s\nno error to detect.\n",
      "commitDate": "2013-09-01, 1:57 p.m.",
      "commitName": "a91124b6d4e2eb1bb3c71a7a8ddff7d40b7db55a",
      "commitAuthor": "jwilson",
      "commitDateOld": "2013-08-27, 10:25 a.m.",
      "commitNameOld": "5663f815af072160f344712d5b353439bd2066f1",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 5.15,
      "commitsBetweenForRepo": 4,
      "commitsBetweenForFile": 1,
      "actualSource": "  public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n      throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n    int priority \u003d 0; // TODO: permit the caller to specify a priority?\n    int slot \u003d 0; // TODO: permit the caller to specify a slot?\n    SpdyStream stream;\n    int streamId;\n\n    synchronized (frameWriter) {\n      synchronized (this) {\n        if (shutdown) {\n          throw new IOException(\"shutdown\");\n        }\n        streamId \u003d nextStreamId;\n        nextStreamId +\u003d 2;\n        stream \u003d new SpdyStream(\n            streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n        if (stream.isOpen()) {\n          streams.put(streamId, stream);\n          setIdle(false);\n        }\n      }\n\n      frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n          requestHeaders);\n    }\n\n    return stream;\n  }",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 146,
      "functionName": "newStream",
      "diff": "@@ -1,31 +1,31 @@\n   public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n       throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n     int priority \u003d 0; // TODO: permit the caller to specify a priority?\n     int slot \u003d 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId \u003d nextStreamId;\n         nextStreamId +\u003d 2;\n-        stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, slot,\n-            requestHeaders, settings);\n+        stream \u003d new SpdyStream(\n+            streamId, this, outFinished, inFinished, priority, requestHeaders, settings);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n       frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n           requestHeaders);\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2f31d7122d8806b6c32d2d1e181ca635fb80bba7": {
      "type": "Ybodychange",
      "commitMessage": "Hide more flags from SPDY APIs.\n\nFlags are not portable between SPDY/3 and HTTP/2.0,\nso hide them in the reader \u0026 writer code.\n\nAlso rename SpdyReader to FrameReader and SpdyWriter to\nFrameWriter. Other classes will be renamed as they become\nindependent of the underlying protocol.\n",
      "commitDate": "2013-08-15, 12:29 a.m.",
      "commitName": "2f31d7122d8806b6c32d2d1e181ca635fb80bba7",
      "commitAuthor": "jwilson",
      "commitDateOld": "2013-08-14, 7:25 a.m.",
      "commitNameOld": "39c0d7d56397ab14892db8032464cb8a9f983ff1",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 0.71,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "  public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n      throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n    int priority \u003d 0; // TODO: permit the caller to specify a priority?\n    int slot \u003d 0; // TODO: permit the caller to specify a slot?\n    SpdyStream stream;\n    int streamId;\n\n    synchronized (frameWriter) {\n      synchronized (this) {\n        if (shutdown) {\n          throw new IOException(\"shutdown\");\n        }\n        streamId \u003d nextStreamId;\n        nextStreamId +\u003d 2;\n        stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, slot,\n            requestHeaders, settings);\n        if (stream.isOpen()) {\n          streams.put(streamId, stream);\n          setIdle(false);\n        }\n      }\n\n      frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n          requestHeaders);\n    }\n\n    return stream;\n  }",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 150,
      "functionName": "newStream",
      "diff": "@@ -1,31 +1,31 @@\n   public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n       throws IOException {\n     boolean outFinished \u003d !out;\n     boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n     int priority \u003d 0; // TODO: permit the caller to specify a priority?\n     int slot \u003d 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n-    synchronized (spdyWriter) {\n+    synchronized (frameWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId \u003d nextStreamId;\n         nextStreamId +\u003d 2;\n         stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, slot,\n             requestHeaders, settings);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n-      spdyWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n+      frameWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n           requestHeaders);\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "39c0d7d56397ab14892db8032464cb8a9f983ff1": {
      "type": "Ybodychange",
      "commitMessage": "Push stream flags into Spdy3.\n\nPreviously flags were being interpretted in SpdyConnection\nand SpdyStream. This won\u0027t work for HTTP/2.0, which has its\nown flag setup.\n",
      "commitDate": "2013-08-14, 7:25 a.m.",
      "commitName": "39c0d7d56397ab14892db8032464cb8a9f983ff1",
      "commitAuthor": "jwilson",
      "commitDateOld": "2013-08-11, 12:02 p.m.",
      "commitNameOld": "21dc92f967d01c2da3ace57b7cc04421e2fd296b",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 2.81,
      "commitsBetweenForRepo": 11,
      "commitsBetweenForFile": 1,
      "actualSource": "  public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n      throws IOException {\n    boolean outFinished \u003d !out;\n    boolean inFinished \u003d !in;\n    int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n    int priority \u003d 0; // TODO: permit the caller to specify a priority?\n    int slot \u003d 0; // TODO: permit the caller to specify a slot?\n    SpdyStream stream;\n    int streamId;\n\n    synchronized (spdyWriter) {\n      synchronized (this) {\n        if (shutdown) {\n          throw new IOException(\"shutdown\");\n        }\n        streamId \u003d nextStreamId;\n        nextStreamId +\u003d 2;\n        stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, slot,\n            requestHeaders, settings);\n        if (stream.isOpen()) {\n          streams.put(streamId, stream);\n          setIdle(false);\n        }\n      }\n\n      spdyWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n          requestHeaders);\n    }\n\n    return stream;\n  }",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 150,
      "functionName": "newStream",
      "diff": "@@ -1,28 +1,31 @@\n   public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n       throws IOException {\n-    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n+    boolean outFinished \u003d !out;\n+    boolean inFinished \u003d !in;\n     int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n     int priority \u003d 0; // TODO: permit the caller to specify a priority?\n     int slot \u003d 0; // TODO: permit the caller to specify a slot?\n     SpdyStream stream;\n     int streamId;\n \n     synchronized (spdyWriter) {\n       synchronized (this) {\n         if (shutdown) {\n           throw new IOException(\"shutdown\");\n         }\n         streamId \u003d nextStreamId;\n         nextStreamId +\u003d 2;\n-        stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders, settings);\n+        stream \u003d new SpdyStream(streamId, this, outFinished, inFinished, priority, slot,\n+            requestHeaders, settings);\n         if (stream.isOpen()) {\n           streams.put(streamId, stream);\n           setIdle(false);\n         }\n       }\n \n-      spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n+      spdyWriter.synStream(outFinished, inFinished, streamId, associatedStreamId, priority, slot,\n+          requestHeaders);\n     }\n \n     return stream;\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3c0faa9ca18de3be0a178e590086888f4f89612a": {
      "type": "Yfilerename",
      "commitMessage": "Make a home for MockWebServer in OkHttp.\n\nTo build HTTP/2.0 support into OkHttp I\u0027m going to simultaneously\nbuild HTTP/2.0 support into MockWebServer. To make that possible,\nI\u0027m first going to fork MockWebServer and then combine it with\nMockSpdyServer.\n",
      "commitDate": "2013-08-03, 12:50 p.m.",
      "commitName": "3c0faa9ca18de3be0a178e590086888f4f89612a",
      "commitAuthor": "jwilson",
      "commitDateOld": "2013-07-20, 2:14 p.m.",
      "commitNameOld": "cc4633943800572673c03b32d0b2bc9a08ae184d",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 13.94,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "  public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n      throws IOException {\n    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n    int priority \u003d 0; // TODO: permit the caller to specify a priority?\n    int slot \u003d 0; // TODO: permit the caller to specify a slot?\n    SpdyStream stream;\n    int streamId;\n\n    synchronized (spdyWriter) {\n      synchronized (this) {\n        if (shutdown) {\n          throw new IOException(\"shutdown\");\n        }\n        streamId \u003d nextStreamId;\n        nextStreamId +\u003d 2;\n        stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders, settings);\n        if (stream.isOpen()) {\n          streams.put(streamId, stream);\n          setIdle(false);\n        }\n      }\n\n      spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n\n    return stream;\n  }",
      "path": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 162,
      "functionName": "newStream",
      "diff": "",
      "extendedDetails": {
        "oldPath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
        "newPath": "okhttp-protocols/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java"
      }
    },
    "7ccbf48838b7cfe42759c67790636d442ea5daa3": {
      "type": "Yfilerename",
      "commitMessage": "Move library into a module. Introduce sample module with simple GitHub client.\n",
      "commitDate": "2013-03-25, 11:04 p.m.",
      "commitName": "7ccbf48838b7cfe42759c67790636d442ea5daa3",
      "commitAuthor": "Jake Wharton",
      "commitDateOld": "2013-03-15, 10:39 a.m.",
      "commitNameOld": "ba2b7432cb9fabfc725b09a9f14878cb128ef208",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 10.52,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "  public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n      throws IOException {\n    int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n    int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n    int priority \u003d 0; // TODO: permit the caller to specify a priority?\n    int slot \u003d 0; // TODO: permit the caller to specify a slot?\n    SpdyStream stream;\n    int streamId;\n\n    synchronized (spdyWriter) {\n      synchronized (this) {\n        if (shutdown) {\n          throw new IOException(\"shutdown\");\n        }\n        streamId \u003d nextStreamId;\n        nextStreamId +\u003d 2;\n        stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders, settings);\n        if (stream.isOpen()) {\n          streams.put(streamId, stream);\n          setIdle(false);\n        }\n      }\n\n      spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot, requestHeaders);\n    }\n\n    return stream;\n  }",
      "path": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 164,
      "functionName": "newStream",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
        "newPath": "okhttp/src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java"
      }
    },
    "6f6d959fdae64065521990413f86bc7ab038d7c1": {
      "type": "Ybodychange",
      "commitMessage": "Improvements to connection pool\n",
      "commitDate": "2013-01-31, 5:23 p.m.",
      "commitName": "6f6d959fdae64065521990413f86bc7ab038d7c1",
      "commitAuthor": "Marcelo Cortes",
      "commitDateOld": "2013-01-22, 1:38 p.m.",
      "commitNameOld": "3a0874cb220a26170e7097432676307feef4504f",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 9.16,
      "commitsBetweenForRepo": 6,
      "commitsBetweenForFile": 1,
      "actualSource": "    public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n            throws IOException {\n        int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n        int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n        int priority \u003d 0; // TODO: permit the caller to specify a priority?\n        int slot \u003d 0; // TODO: permit the caller to specify a slot?\n        SpdyStream stream;\n        int streamId;\n\n        synchronized (spdyWriter) {\n            synchronized (this) {\n                if (shutdown) {\n                    throw new IOException(\"shutdown\");\n                }\n                streamId \u003d nextStreamId;\n                nextStreamId +\u003d 2;\n                stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders,\n                        settings);\n                if (stream.isOpen()) {\n                    streams.put(streamId, stream);\n                    setIdle(false);\n                }\n            }\n\n            spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot,\n                    requestHeaders);\n        }\n\n        return stream;\n    }",
      "path": "src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 175,
      "functionName": "newStream",
      "diff": "@@ -1,29 +1,30 @@\n     public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n             throws IOException {\n         int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n         int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n         int priority \u003d 0; // TODO: permit the caller to specify a priority?\n         int slot \u003d 0; // TODO: permit the caller to specify a slot?\n         SpdyStream stream;\n         int streamId;\n \n         synchronized (spdyWriter) {\n             synchronized (this) {\n                 if (shutdown) {\n                     throw new IOException(\"shutdown\");\n                 }\n                 streamId \u003d nextStreamId;\n                 nextStreamId +\u003d 2;\n                 stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders,\n                         settings);\n                 if (stream.isOpen()) {\n                     streams.put(streamId, stream);\n+                    setIdle(false);\n                 }\n             }\n \n             spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot,\n                     requestHeaders);\n         }\n \n         return stream;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1bd9fefb5199d1499c8dac6c82c18c82e0678428": {
      "type": "Ybodychange",
      "commitMessage": "Implement flow control for the outgoing stream.\n\nWe had a bug where we were using spdy/2\u0027s layout for\nsetting frames rather than spdy/3\u0027s layout. I discovered\nthis when testing flow control against Chrome.\n\nThis fixes uploads greater than 64 KiB.\n",
      "commitDate": "2013-01-18, 3:50 p.m.",
      "commitName": "1bd9fefb5199d1499c8dac6c82c18c82e0678428",
      "commitAuthor": "jwilson",
      "commitDateOld": "2013-01-18, 12:52 p.m.",
      "commitNameOld": "b1c592d7c9013a0b5e18f83cd5bd4b56f420b37c",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 0.12,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n            throws IOException {\n        int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n        int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n        int priority \u003d 0; // TODO: permit the caller to specify a priority?\n        int slot \u003d 0; // TODO: permit the caller to specify a slot?\n        SpdyStream stream;\n        int streamId;\n\n        synchronized (spdyWriter) {\n            synchronized (this) {\n                if (shutdown) {\n                    throw new IOException(\"shutdown\");\n                }\n                streamId \u003d nextStreamId;\n                nextStreamId +\u003d 2;\n                stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders,\n                        settings);\n                if (stream.isOpen()) {\n                    streams.put(streamId, stream);\n                }\n            }\n\n            spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot,\n                    requestHeaders);\n        }\n\n        return stream;\n    }",
      "path": "src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 153,
      "functionName": "newStream",
      "diff": "@@ -1,28 +1,29 @@\n     public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n             throws IOException {\n         int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n         int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n         int priority \u003d 0; // TODO: permit the caller to specify a priority?\n         int slot \u003d 0; // TODO: permit the caller to specify a slot?\n         SpdyStream stream;\n         int streamId;\n \n         synchronized (spdyWriter) {\n             synchronized (this) {\n                 if (shutdown) {\n                     throw new IOException(\"shutdown\");\n                 }\n                 streamId \u003d nextStreamId;\n                 nextStreamId +\u003d 2;\n-                stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders);\n+                stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders,\n+                        settings);\n                 if (stream.isOpen()) {\n                     streams.put(streamId, stream);\n                 }\n             }\n \n             spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot,\n                     requestHeaders);\n         }\n \n         return stream;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "06579c5bfb6a051a9fbca5be2d15a52fcf77f38c": {
      "type": "Ybodychange",
      "commitMessage": "Upgrade from spdy/2 to spdy/3.\n",
      "commitDate": "2013-01-06, 6:30 p.m.",
      "commitName": "06579c5bfb6a051a9fbca5be2d15a52fcf77f38c",
      "commitAuthor": "jwilson",
      "commitDateOld": "2013-01-01, 10:50 p.m.",
      "commitNameOld": "689f66222bd8984dd69229a4ee9caf8da528ae12",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 4.82,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "    public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n            throws IOException {\n        int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n        int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n        int priority \u003d 0; // TODO: permit the caller to specify a priority?\n        int slot \u003d 0; // TODO: permit the caller to specify a slot?\n        SpdyStream stream;\n        int streamId;\n\n        synchronized (spdyWriter) {\n            synchronized (this) {\n                if (shutdown) {\n                    throw new IOException(\"shutdown\");\n                }\n                streamId \u003d nextStreamId;\n                nextStreamId +\u003d 2;\n                stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders);\n                if (stream.isOpen()) {\n                    streams.put(streamId, stream);\n                }\n            }\n\n            spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot,\n                    requestHeaders);\n        }\n\n        return stream;\n    }",
      "path": "src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 153,
      "functionName": "newStream",
      "diff": "@@ -1,26 +1,28 @@\n     public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n             throws IOException {\n         int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n-        int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream.\n-        int priority \u003d 0; // TODO: permit the caller to specify a priority.\n+        int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream?\n+        int priority \u003d 0; // TODO: permit the caller to specify a priority?\n+        int slot \u003d 0; // TODO: permit the caller to specify a slot?\n         SpdyStream stream;\n         int streamId;\n \n         synchronized (spdyWriter) {\n             synchronized (this) {\n                 if (shutdown) {\n                     throw new IOException(\"shutdown\");\n                 }\n                 streamId \u003d nextStreamId;\n                 nextStreamId +\u003d 2;\n-                stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n+                stream \u003d new SpdyStream(streamId, this, flags, priority, slot, requestHeaders);\n                 if (stream.isOpen()) {\n                     streams.put(streamId, stream);\n                 }\n             }\n \n-            spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n+            spdyWriter.synStream(flags, streamId, associatedStreamId, priority, slot,\n+                    requestHeaders);\n         }\n \n         return stream;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "689f66222bd8984dd69229a4ee9caf8da528ae12": {
      "type": "Yfilerename",
      "commitMessage": "Flatten internal packages and utility classes.\n\nThe previous structure had hierarchy that was useful\nfor libcore but overkill for OkHttp.\n",
      "commitDate": "2013-01-01, 10:50 p.m.",
      "commitName": "689f66222bd8984dd69229a4ee9caf8da528ae12",
      "commitAuthor": "jwilson",
      "commitDateOld": "2013-01-01, 10:27 p.m.",
      "commitNameOld": "73516e6ab1d336ffd520e845e14f80cf08657bd0",
      "commitAuthorOld": "Jake Wharton",
      "daysBetweenCommits": 0.02,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n            throws IOException {\n        int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n        int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream.\n        int priority \u003d 0; // TODO: permit the caller to specify a priority.\n        SpdyStream stream;\n        int streamId;\n\n        synchronized (spdyWriter) {\n            synchronized (this) {\n                if (shutdown) {\n                    throw new IOException(\"shutdown\");\n                }\n                streamId \u003d nextStreamId;\n                nextStreamId +\u003d 2;\n                stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n                if (stream.isOpen()) {\n                    streams.put(streamId, stream);\n                }\n            }\n\n            spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n        }\n\n        return stream;\n    }",
      "path": "src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java",
      "functionStartLine": 147,
      "functionName": "newStream",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyConnection.java",
        "newPath": "src/main/java/com/squareup/okhttp/internal/spdy/SpdyConnection.java"
      }
    },
    "7f4249625960b7f10dc61aae4d1896c2e126f538": {
      "type": "Ybodychange",
      "commitMessage": "Discard streams once they\u0027re no longer open.\n\nThis avoids a memory leak; we don\u0027t hold onto the input stream\nand it\u0027s large 64 KiB buffer long after that stream is done.\n\nIt also allows SpdyConnection to track how many streams are\ncurrently active. This will allow a follow up change to shut\ndown connections that don\u0027t host any streams.\n",
      "commitDate": "2012-12-31, 8:55 p.m.",
      "commitName": "7f4249625960b7f10dc61aae4d1896c2e126f538",
      "commitAuthor": "jwilson",
      "commitDateOld": "2012-12-31, 2:35 a.m.",
      "commitNameOld": "60d5852c6676ece85b0e3d0c6e45fb0186303f83",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 0.76,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n            throws IOException {\n        int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n        int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream.\n        int priority \u003d 0; // TODO: permit the caller to specify a priority.\n        SpdyStream stream;\n        int streamId;\n\n        synchronized (spdyWriter) {\n            synchronized (this) {\n                if (shutdown) {\n                    throw new IOException(\"shutdown\");\n                }\n                streamId \u003d nextStreamId;\n                nextStreamId +\u003d 2;\n                stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n                if (stream.isOpen()) {\n                    streams.put(streamId, stream);\n                }\n            }\n\n            spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n        }\n\n        return stream;\n    }",
      "path": "src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyConnection.java",
      "functionStartLine": 148,
      "functionName": "newStream",
      "diff": "@@ -1,24 +1,26 @@\n     public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n             throws IOException {\n         int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n         int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream.\n         int priority \u003d 0; // TODO: permit the caller to specify a priority.\n         SpdyStream stream;\n         int streamId;\n \n         synchronized (spdyWriter) {\n             synchronized (this) {\n                 if (shutdown) {\n                     throw new IOException(\"shutdown\");\n                 }\n                 streamId \u003d nextStreamId;\n                 nextStreamId +\u003d 2;\n                 stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n-                streams.put(streamId, stream);\n+                if (stream.isOpen()) {\n+                    streams.put(streamId, stream);\n+                }\n             }\n \n             spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n         }\n \n         return stream;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "60d5852c6676ece85b0e3d0c6e45fb0186303f83": {
      "type": "Ybodychange",
      "commitMessage": "Implement GOAWAY, for clean shutdowns of SPDY connections.\n\nAlso clean up some SPDY headers and improve error messages.\n",
      "commitDate": "2012-12-31, 2:35 a.m.",
      "commitName": "60d5852c6676ece85b0e3d0c6e45fb0186303f83",
      "commitAuthor": "jwilson",
      "commitDateOld": "2012-12-30, 12:36 a.m.",
      "commitNameOld": "768059cfc4c611f3212d0b92ff5073541a852faf",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 1.08,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n            throws IOException {\n        int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n        int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream.\n        int priority \u003d 0; // TODO: permit the caller to specify a priority.\n        SpdyStream stream;\n        int streamId;\n\n        synchronized (spdyWriter) {\n            synchronized (this) {\n                if (shutdown) {\n                    throw new IOException(\"shutdown\");\n                }\n                streamId \u003d nextStreamId;\n                nextStreamId +\u003d 2;\n                stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n                streams.put(streamId, stream);\n            }\n\n            spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n        }\n\n        return stream;\n    }",
      "path": "src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyConnection.java",
      "functionStartLine": 140,
      "functionName": "newStream",
      "diff": "@@ -1,21 +1,24 @@\n     public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n             throws IOException {\n         int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n         int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream.\n         int priority \u003d 0; // TODO: permit the caller to specify a priority.\n         SpdyStream stream;\n         int streamId;\n \n         synchronized (spdyWriter) {\n             synchronized (this) {\n+                if (shutdown) {\n+                    throw new IOException(\"shutdown\");\n+                }\n                 streamId \u003d nextStreamId;\n                 nextStreamId +\u003d 2;\n                 stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n                 streams.put(streamId, stream);\n             }\n \n             spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n         }\n \n         return stream;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "50999cceb5f5bcdaf79baa5ac7eeef90c72bda8d": {
      "type": "Yfilerename",
      "commitMessage": "Move out of the libcore package.\n\nTo promote the code into AOSP, we\u0027ll keep this package as-is\nand do the jarjar in Android instead.\n",
      "commitDate": "2012-12-15, 4:55 p.m.",
      "commitName": "50999cceb5f5bcdaf79baa5ac7eeef90c72bda8d",
      "commitAuthor": "jwilson",
      "commitDateOld": "2012-12-15, 4:17 p.m.",
      "commitNameOld": "7f7aa90bc5d41d8f818fc988d2a91d22393c7329",
      "commitAuthorOld": "jwilson",
      "daysBetweenCommits": 0.03,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n            throws IOException {\n        int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n        int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream.\n        int priority \u003d 0; // TODO: permit the caller to specify a priority.\n        SpdyStream stream;\n        int streamId;\n\n        synchronized (spdyWriter) {\n            synchronized (this) {\n                streamId \u003d nextStreamId;\n                nextStreamId +\u003d 2;\n                stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n                streams.put(streamId, stream);\n            }\n\n            spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n        }\n\n        return stream;\n    }",
      "path": "src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyConnection.java",
      "functionStartLine": 136,
      "functionName": "newStream",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/libcore/net/spdy/SpdyConnection.java",
        "newPath": "src/main/java/com/squareup/okhttp/internal/net/spdy/SpdyConnection.java"
      }
    },
    "853c4012b79711f123c0b9780e565062b32bf1c7": {
      "type": "Ybodychange",
      "commitMessage": "Abandon foolish consistency with SpdyReader for sending frames.\n\nSetting fields and then calling a method is just not as usable\nas calling a method that takes arguments.\n\nAlso move Settings into their own class, so we can sling them\naround without a bunch of ceremony.\n",
      "commitDate": "2012-09-26, 11:58 a.m.",
      "commitName": "853c4012b79711f123c0b9780e565062b32bf1c7",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "2012-09-25, 5:32 p.m.",
      "commitNameOld": "68ebb704fb73ad1545ae82287f8b2a5f68d8e69d",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.77,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n            throws IOException {\n        int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n        int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream.\n        int priority \u003d 0; // TODO: permit the caller to specify a priority.\n        SpdyStream stream;\n        int streamId;\n\n        synchronized (spdyWriter) {\n            synchronized (this) {\n                streamId \u003d nextStreamId;\n                nextStreamId +\u003d 2;\n                stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n                streams.put(streamId, stream);\n            }\n\n            spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n        }\n\n        return stream;\n    }",
      "path": "src/main/java/libcore/net/spdy/SpdyConnection.java",
      "functionStartLine": 151,
      "functionName": "newStream",
      "diff": "@@ -1,26 +1,21 @@\n     public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n             throws IOException {\n         int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n         int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream.\n         int priority \u003d 0; // TODO: permit the caller to specify a priority.\n         SpdyStream stream;\n         int streamId;\n \n         synchronized (spdyWriter) {\n             synchronized (this) {\n                 streamId \u003d nextStreamId;\n                 nextStreamId +\u003d 2;\n                 stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n                 streams.put(streamId, stream);\n             }\n \n-            spdyWriter.flags \u003d flags;\n-            spdyWriter.id \u003d streamId;\n-            spdyWriter.associatedId \u003d associatedStreamId;\n-            spdyWriter.priority \u003d priority;\n-            spdyWriter.nameValueBlock \u003d requestHeaders;\n-            spdyWriter.synStream();\n+            spdyWriter.synStream(flags, streamId, associatedStreamId, priority, requestHeaders);\n         }\n \n         return stream;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "68ebb704fb73ad1545ae82287f8b2a5f68d8e69d": {
      "type": "Ybodychange",
      "commitMessage": "Address some todos around stream failures and peer errors.\n",
      "commitDate": "2012-09-25, 5:32 p.m.",
      "commitName": "68ebb704fb73ad1545ae82287f8b2a5f68d8e69d",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "2012-09-25, 2:29 p.m.",
      "commitNameOld": "60b3a6dd6240f40c29fffd897c2dac314af49836",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 0.13,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n            throws IOException {\n        int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n        int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream.\n        int priority \u003d 0; // TODO: permit the caller to specify a priority.\n        SpdyStream stream;\n        int streamId;\n\n        synchronized (spdyWriter) {\n            synchronized (this) {\n                streamId \u003d nextStreamId;\n                nextStreamId +\u003d 2;\n                stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n                streams.put(streamId, stream);\n            }\n\n            spdyWriter.flags \u003d flags;\n            spdyWriter.id \u003d streamId;\n            spdyWriter.associatedId \u003d associatedStreamId;\n            spdyWriter.priority \u003d priority;\n            spdyWriter.nameValueBlock \u003d requestHeaders;\n            spdyWriter.synStream();\n        }\n\n        return stream;\n    }",
      "path": "src/main/java/libcore/net/spdy/SpdyConnection.java",
      "functionStartLine": 181,
      "functionName": "newStream",
      "diff": "@@ -1,26 +1,26 @@\n     public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n             throws IOException {\n         int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n-        int associatedStreamId \u003d 0;  // TODO\n-        int priority \u003d 0; // TODO\n+        int associatedStreamId \u003d 0;  // TODO: permit the caller to specify an associated stream.\n+        int priority \u003d 0; // TODO: permit the caller to specify a priority.\n         SpdyStream stream;\n         int streamId;\n \n         synchronized (spdyWriter) {\n             synchronized (this) {\n                 streamId \u003d nextStreamId;\n                 nextStreamId +\u003d 2;\n                 stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n                 streams.put(streamId, stream);\n             }\n \n             spdyWriter.flags \u003d flags;\n             spdyWriter.id \u003d streamId;\n             spdyWriter.associatedId \u003d associatedStreamId;\n             spdyWriter.priority \u003d priority;\n             spdyWriter.nameValueBlock \u003d requestHeaders;\n             spdyWriter.synStream();\n         }\n \n         return stream;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "60b3a6dd6240f40c29fffd897c2dac314af49836": {
      "type": "Ymultichange(Ymodifierchange,Ybodychange)",
      "commitMessage": "Be more careful about synchronization.\n\nSpdyConnection needs to guard its own state separately from\nthe SpdyWriter, which permits slow blocking calls. Split these\ninto multiple independent locks.\n\nAlso use independent right-sized thread pools for reading (exactly\none thread all the time) delayed writing (0 or 1 threads) and\ncallbacks (any number of threads).\n",
      "commitDate": "2012-09-25, 2:29 p.m.",
      "commitName": "60b3a6dd6240f40c29fffd897c2dac314af49836",
      "commitAuthor": "Jesse Wilson",
      "subchanges": [
        {
          "type": "Ymodifierchange",
          "commitMessage": "Be more careful about synchronization.\n\nSpdyConnection needs to guard its own state separately from\nthe SpdyWriter, which permits slow blocking calls. Split these\ninto multiple independent locks.\n\nAlso use independent right-sized thread pools for reading (exactly\none thread all the time) delayed writing (0 or 1 threads) and\ncallbacks (any number of threads).\n",
          "commitDate": "2012-09-25, 2:29 p.m.",
          "commitName": "60b3a6dd6240f40c29fffd897c2dac314af49836",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "2012-09-25, 12:34 a.m.",
          "commitNameOld": "2bd54fa72fe72f92212428a024050838c2b62d57",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "    public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n            throws IOException {\n        int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n        int associatedStreamId \u003d 0;  // TODO\n        int priority \u003d 0; // TODO\n        SpdyStream stream;\n        int streamId;\n\n        synchronized (spdyWriter) {\n            synchronized (this) {\n                streamId \u003d nextStreamId;\n                nextStreamId +\u003d 2;\n                stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n                streams.put(streamId, stream);\n            }\n\n            spdyWriter.flags \u003d flags;\n            spdyWriter.id \u003d streamId;\n            spdyWriter.associatedId \u003d associatedStreamId;\n            spdyWriter.priority \u003d priority;\n            spdyWriter.nameValueBlock \u003d requestHeaders;\n            spdyWriter.synStream();\n        }\n\n        return stream;\n    }",
          "path": "src/main/java/libcore/net/spdy/SpdyConnection.java",
          "functionStartLine": 185,
          "functionName": "newStream",
          "diff": "@@ -1,20 +1,26 @@\n-    public synchronized SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n+    public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n             throws IOException {\n-        int streamId \u003d nextStreamId; // TODO\n-        nextStreamId +\u003d 2;\n         int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n         int associatedStreamId \u003d 0;  // TODO\n         int priority \u003d 0; // TODO\n+        SpdyStream stream;\n+        int streamId;\n \n-        SpdyStream result \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n-        streams.put(streamId, result);\n+        synchronized (spdyWriter) {\n+            synchronized (this) {\n+                streamId \u003d nextStreamId;\n+                nextStreamId +\u003d 2;\n+                stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n+                streams.put(streamId, stream);\n+            }\n \n-        spdyWriter.flags \u003d flags;\n-        spdyWriter.id \u003d streamId;\n-        spdyWriter.associatedId \u003d associatedStreamId;\n-        spdyWriter.priority \u003d priority;\n-        spdyWriter.nameValueBlock \u003d requestHeaders;\n-        spdyWriter.synStream();\n+            spdyWriter.flags \u003d flags;\n+            spdyWriter.id \u003d streamId;\n+            spdyWriter.associatedId \u003d associatedStreamId;\n+            spdyWriter.priority \u003d priority;\n+            spdyWriter.nameValueBlock \u003d requestHeaders;\n+            spdyWriter.synStream();\n+        }\n \n-        return result;\n+        return stream;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[public, synchronized]",
            "newValue": "[public]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Be more careful about synchronization.\n\nSpdyConnection needs to guard its own state separately from\nthe SpdyWriter, which permits slow blocking calls. Split these\ninto multiple independent locks.\n\nAlso use independent right-sized thread pools for reading (exactly\none thread all the time) delayed writing (0 or 1 threads) and\ncallbacks (any number of threads).\n",
          "commitDate": "2012-09-25, 2:29 p.m.",
          "commitName": "60b3a6dd6240f40c29fffd897c2dac314af49836",
          "commitAuthor": "Jesse Wilson",
          "commitDateOld": "2012-09-25, 12:34 a.m.",
          "commitNameOld": "2bd54fa72fe72f92212428a024050838c2b62d57",
          "commitAuthorOld": "Jesse Wilson",
          "daysBetweenCommits": 0.58,
          "commitsBetweenForRepo": 2,
          "commitsBetweenForFile": 1,
          "actualSource": "    public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n            throws IOException {\n        int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n        int associatedStreamId \u003d 0;  // TODO\n        int priority \u003d 0; // TODO\n        SpdyStream stream;\n        int streamId;\n\n        synchronized (spdyWriter) {\n            synchronized (this) {\n                streamId \u003d nextStreamId;\n                nextStreamId +\u003d 2;\n                stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n                streams.put(streamId, stream);\n            }\n\n            spdyWriter.flags \u003d flags;\n            spdyWriter.id \u003d streamId;\n            spdyWriter.associatedId \u003d associatedStreamId;\n            spdyWriter.priority \u003d priority;\n            spdyWriter.nameValueBlock \u003d requestHeaders;\n            spdyWriter.synStream();\n        }\n\n        return stream;\n    }",
          "path": "src/main/java/libcore/net/spdy/SpdyConnection.java",
          "functionStartLine": 185,
          "functionName": "newStream",
          "diff": "@@ -1,20 +1,26 @@\n-    public synchronized SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n+    public SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n             throws IOException {\n-        int streamId \u003d nextStreamId; // TODO\n-        nextStreamId +\u003d 2;\n         int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n         int associatedStreamId \u003d 0;  // TODO\n         int priority \u003d 0; // TODO\n+        SpdyStream stream;\n+        int streamId;\n \n-        SpdyStream result \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n-        streams.put(streamId, result);\n+        synchronized (spdyWriter) {\n+            synchronized (this) {\n+                streamId \u003d nextStreamId;\n+                nextStreamId +\u003d 2;\n+                stream \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n+                streams.put(streamId, stream);\n+            }\n \n-        spdyWriter.flags \u003d flags;\n-        spdyWriter.id \u003d streamId;\n-        spdyWriter.associatedId \u003d associatedStreamId;\n-        spdyWriter.priority \u003d priority;\n-        spdyWriter.nameValueBlock \u003d requestHeaders;\n-        spdyWriter.synStream();\n+            spdyWriter.flags \u003d flags;\n+            spdyWriter.id \u003d streamId;\n+            spdyWriter.associatedId \u003d associatedStreamId;\n+            spdyWriter.priority \u003d priority;\n+            spdyWriter.nameValueBlock \u003d requestHeaders;\n+            spdyWriter.synStream();\n+        }\n \n-        return result;\n+        return stream;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "2bd54fa72fe72f92212428a024050838c2b62d57": {
      "type": "Ybodychange",
      "commitMessage": "Implement TYPE_PING.\n\nThough it isn\u0027t particularly useful in practice, it\u0027s\ngoing to be extremely handy for testing since it makes\na happens-before relationship very easy to create.\n",
      "commitDate": "2012-09-25, 12:34 a.m.",
      "commitName": "2bd54fa72fe72f92212428a024050838c2b62d57",
      "commitAuthor": "Jesse Wilson",
      "commitDateOld": "2012-09-21, 5:28 p.m.",
      "commitNameOld": "7a7ad1cdb22ed381c468ee38d757da03b4b1877a",
      "commitAuthorOld": "Jesse Wilson",
      "daysBetweenCommits": 3.3,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "    public synchronized SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n            throws IOException {\n        int streamId \u003d nextStreamId; // TODO\n        nextStreamId +\u003d 2;\n        int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n        int associatedStreamId \u003d 0;  // TODO\n        int priority \u003d 0; // TODO\n\n        SpdyStream result \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n        streams.put(streamId, result);\n\n        spdyWriter.flags \u003d flags;\n        spdyWriter.id \u003d streamId;\n        spdyWriter.associatedId \u003d associatedStreamId;\n        spdyWriter.priority \u003d priority;\n        spdyWriter.nameValueBlock \u003d requestHeaders;\n        spdyWriter.synStream();\n\n        return result;\n    }",
      "path": "src/main/java/libcore/net/spdy/SpdyConnection.java",
      "functionStartLine": 168,
      "functionName": "newStream",
      "diff": "@@ -1,20 +1,20 @@\n     public synchronized SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n             throws IOException {\n         int streamId \u003d nextStreamId; // TODO\n         nextStreamId +\u003d 2;\n         int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n         int associatedStreamId \u003d 0;  // TODO\n         int priority \u003d 0; // TODO\n \n         SpdyStream result \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n         streams.put(streamId, result);\n \n         spdyWriter.flags \u003d flags;\n-        spdyWriter.streamId \u003d streamId;\n-        spdyWriter.associatedStreamId \u003d associatedStreamId;\n+        spdyWriter.id \u003d streamId;\n+        spdyWriter.associatedId \u003d associatedStreamId;\n         spdyWriter.priority \u003d priority;\n         spdyWriter.nameValueBlock \u003d requestHeaders;\n         spdyWriter.synStream();\n \n         return result;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ea63463c2ff8a67f63e541036f0d5998b5bb1f3e": {
      "type": "Yintroduced",
      "commitMessage": "Initial import.\n\nThis is a fork of okhttp from http://code.google.com/p/okhttp.\nI\u0027m moving it to Github since that\u0027s where my code reviewers\nare. I\u0027ve renamed the core package from com.google.okhttp to\ncom.squareup.okhttp because Square is where I expect ongoing\ndevelopment of this project to take place.\n\nAll code in this project is subject to be contributed upstream\nto AOSP. In particular, all code in the libcore package is\nderived from AOSP and intended to be contributed back to AOSP\non an ongoing basis.\n",
      "commitDate": "2012-07-23, 10:02 a.m.",
      "commitName": "ea63463c2ff8a67f63e541036f0d5998b5bb1f3e",
      "commitAuthor": "Jesse Wilson",
      "diff": "@@ -0,0 +1,20 @@\n+    public synchronized SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n+            throws IOException {\n+        int streamId \u003d nextStreamId; // TODO\n+        nextStreamId +\u003d 2;\n+        int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n+        int associatedStreamId \u003d 0;  // TODO\n+        int priority \u003d 0; // TODO\n+\n+        SpdyStream result \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n+        streams.put(streamId, result);\n+\n+        spdyWriter.flags \u003d flags;\n+        spdyWriter.streamId \u003d streamId;\n+        spdyWriter.associatedStreamId \u003d associatedStreamId;\n+        spdyWriter.priority \u003d priority;\n+        spdyWriter.nameValueBlock \u003d requestHeaders;\n+        spdyWriter.synStream();\n+\n+        return result;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    public synchronized SpdyStream newStream(List\u003cString\u003e requestHeaders, boolean out, boolean in)\n            throws IOException {\n        int streamId \u003d nextStreamId; // TODO\n        nextStreamId +\u003d 2;\n        int flags \u003d (out ? 0 : FLAG_FIN) | (in ? 0 : FLAG_UNIDIRECTIONAL);\n        int associatedStreamId \u003d 0;  // TODO\n        int priority \u003d 0; // TODO\n\n        SpdyStream result \u003d new SpdyStream(streamId, this, requestHeaders, flags);\n        streams.put(streamId, result);\n\n        spdyWriter.flags \u003d flags;\n        spdyWriter.streamId \u003d streamId;\n        spdyWriter.associatedStreamId \u003d associatedStreamId;\n        spdyWriter.priority \u003d priority;\n        spdyWriter.nameValueBlock \u003d requestHeaders;\n        spdyWriter.synStream();\n\n        return result;\n    }",
      "path": "src/main/java/libcore/net/spdy/SpdyConnection.java",
      "functionStartLine": 113,
      "functionName": "newStream"
    }
  }
}