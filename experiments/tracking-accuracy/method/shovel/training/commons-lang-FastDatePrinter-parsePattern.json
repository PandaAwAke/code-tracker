{
  "origin": "codeshovel",
  "repositoryName": "commons-lang",
  "repositoryPath": "H:\\Projects\\apache\\commons-lang/.git",
  "startCommitName": "a36c903d4f1065bc59f5e6d2bb0f9d92a5e71d83",
  "sourceFileName": "FastDatePrinter.java",
  "functionName": "parsePattern",
  "functionId": "parsePattern",
  "sourceFilePath": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
  "functionStartLine": 181,
  "functionEndLine": 314,
  "numCommitsSeen": 111,
  "timeTaken": 3723,
  "changeHistory": [
    "4f82195afdc4279c05826fc20f8642bfdaaafec3",
    "afc942c7b2bc0317cb549a3fd05080646e7274fc",
    "1002c9e243883654f9c1e6beae643fb4e72fc172",
    "2fa0b168d62a07365b2787d0ed97fa1c2cfb673b",
    "2ebf9a21d2dc99ab2f434111cac9dcd6da99d574",
    "0add1e8975336c65513b26123d48b221e2515ddc",
    "bbfa8eb7df16baf17239b412ff7efa11c7e0926b",
    "22b6781a0b96418198dc9146e5191e51d381102f",
    "5292526e476ffbb19c6613a98464054236c86ace",
    "cc340ad2eb6a783f6abe8d02f2c32bb02b01505c",
    "34a6449c90a3b6074111a6bcbd31ad00ac1570f3",
    "9ef322c33c465d8ae9a1d854dfa977f47f629009",
    "fc5c081e22a61bb5a6810af302be3f22f7966df4",
    "debc02c6d9b94c717b4182ae4dd7a97d47293a52",
    "654fb75d80a63fa551ced73c3b652f4120573590",
    "3aab5ae02692d3ceac2618ec0b4514787f4b17d7",
    "247c97f507c7ce3556f040624b6af28e911e6dfb",
    "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
    "a99f7965b34b8dd0532c8d6f5e592d990ca220fc"
  ],
  "changeHistoryShort": {
    "4f82195afdc4279c05826fc20f8642bfdaaafec3": "Ybodychange",
    "afc942c7b2bc0317cb549a3fd05080646e7274fc": "Ybodychange",
    "1002c9e243883654f9c1e6beae643fb4e72fc172": "Ybodychange",
    "2fa0b168d62a07365b2787d0ed97fa1c2cfb673b": "Ybodychange",
    "2ebf9a21d2dc99ab2f434111cac9dcd6da99d574": "Ybodychange",
    "0add1e8975336c65513b26123d48b221e2515ddc": "Ybodychange",
    "bbfa8eb7df16baf17239b412ff7efa11c7e0926b": "Ybodychange",
    "22b6781a0b96418198dc9146e5191e51d381102f": "Ybodychange",
    "5292526e476ffbb19c6613a98464054236c86ace": "Ybodychange",
    "cc340ad2eb6a783f6abe8d02f2c32bb02b01505c": "Ymovefromfile",
    "34a6449c90a3b6074111a6bcbd31ad00ac1570f3": "Ybodychange",
    "9ef322c33c465d8ae9a1d854dfa977f47f629009": "Ybodychange",
    "fc5c081e22a61bb5a6810af302be3f22f7966df4": "Yfilerename",
    "debc02c6d9b94c717b4182ae4dd7a97d47293a52": "Yfilerename",
    "654fb75d80a63fa551ced73c3b652f4120573590": "Ymultichange(Yreturntypechange,Ybodychange)",
    "3aab5ae02692d3ceac2618ec0b4514787f4b17d7": "Ybodychange",
    "247c97f507c7ce3556f040624b6af28e911e6dfb": "Ybodychange",
    "73ee6c3d270a91bd447f732b24c4d65169b0c8d6": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
    "a99f7965b34b8dd0532c8d6f5e592d990ca220fc": "Yintroduced"
  },
  "changeHistoryDetails": {
    "4f82195afdc4279c05826fc20f8642bfdaaafec3": {
      "type": "Ybodychange",
      "commitMessage": "Remove redundant type arguments.",
      "commitDate": "2016-10-23, 1:52 p.m.",
      "commitName": "4f82195afdc4279c05826fc20f8642bfdaaafec3",
      "commitAuthor": "Gary Gregory",
      "commitDateOld": "2016-09-19, 7:21 a.m.",
      "commitNameOld": "0807eedad6aa9544d90b2e7cec103fb9c40b714d",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 34.27,
      "commitsBetweenForRepo": 62,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected List\u003cRule\u003e parsePattern() {\n        final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        final List\u003cRule\u003e rules \u003d new ArrayList\u003c\u003e();\n\n        final String[] ERAs \u003d symbols.getEras();\n        final String[] months \u003d symbols.getMonths();\n        final String[] shortMonths \u003d symbols.getShortMonths();\n        final String[] weekdays \u003d symbols.getWeekdays();\n        final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        final int length \u003d mPattern.length();\n        final int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            final String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            final int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            final char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n            case \u0027Y\u0027: // week year\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                if (c \u003d\u003d \u0027Y\u0027) {\n                    rule \u003d new WeekYear((NumberRule) rule);\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027u\u0027: // day in week (number)\n                rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027X\u0027: // ISO 8601 \n                rule \u003d Iso8601_Rule.getRule(tokenLen);\n                break;    \n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                final String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 181,
      "functionName": "parsePattern",
      "diff": "@@ -1,134 +1,134 @@\n     protected List\u003cRule\u003e parsePattern() {\n         final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n-        final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n+        final List\u003cRule\u003e rules \u003d new ArrayList\u003c\u003e();\n \n         final String[] ERAs \u003d symbols.getEras();\n         final String[] months \u003d symbols.getMonths();\n         final String[] shortMonths \u003d symbols.getShortMonths();\n         final String[] weekdays \u003d symbols.getWeekdays();\n         final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n         final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n         final int length \u003d mPattern.length();\n         final int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n             final String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n             final int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n             final char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n             case \u0027Y\u0027: // week year\n                 if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n                 if (c \u003d\u003d \u0027Y\u0027) {\n                     rule \u003d new WeekYear((NumberRule) rule);\n                 }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027u\u0027: // day in week (number)\n                 rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                 break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027X\u0027: // ISO 8601 \n                 rule \u003d Iso8601_Rule.getRule(tokenLen);\n                 break;    \n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027: // time zone (value)\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n                 final String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "afc942c7b2bc0317cb549a3fd05080646e7274fc": {
      "type": "Ybodychange",
      "commitMessage": "LANG-1192: FastDateFormat support of the week-year component (uppercase \u0027Y\u0027)\n",
      "commitDate": "2015-12-25, 3:44 p.m.",
      "commitName": "afc942c7b2bc0317cb549a3fd05080646e7274fc",
      "commitAuthor": "Chas Honton",
      "commitDateOld": "2015-12-17, 9:52 a.m.",
      "commitNameOld": "1002c9e243883654f9c1e6beae643fb4e72fc172",
      "commitAuthorOld": "Chas Honton",
      "daysBetweenCommits": 8.24,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected List\u003cRule\u003e parsePattern() {\n        final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n\n        final String[] ERAs \u003d symbols.getEras();\n        final String[] months \u003d symbols.getMonths();\n        final String[] shortMonths \u003d symbols.getShortMonths();\n        final String[] weekdays \u003d symbols.getWeekdays();\n        final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        final int length \u003d mPattern.length();\n        final int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            final String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            final int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            final char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n            case \u0027Y\u0027: // week year\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                if (c \u003d\u003d \u0027Y\u0027) {\n                    rule \u003d new WeekYear((NumberRule) rule);\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027u\u0027: // day in week (number)\n                rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027X\u0027: // ISO 8601 \n                rule \u003d Iso8601_Rule.getRule(tokenLen);\n                break;    \n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                final String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 181,
      "functionName": "parsePattern",
      "diff": "@@ -1,130 +1,134 @@\n     protected List\u003cRule\u003e parsePattern() {\n         final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n         final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n \n         final String[] ERAs \u003d symbols.getEras();\n         final String[] months \u003d symbols.getMonths();\n         final String[] shortMonths \u003d symbols.getShortMonths();\n         final String[] weekdays \u003d symbols.getWeekdays();\n         final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n         final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n         final int length \u003d mPattern.length();\n         final int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n             final String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n             final int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n             final char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n+            case \u0027Y\u0027: // week year\n                 if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n+                if (c \u003d\u003d \u0027Y\u0027) {\n+                    rule \u003d new WeekYear((NumberRule) rule);\n+                }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027u\u0027: // day in week (number)\n                 rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                 break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027X\u0027: // ISO 8601 \n                 rule \u003d Iso8601_Rule.getRule(tokenLen);\n                 break;    \n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027: // time zone (value)\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n                 final String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1002c9e243883654f9c1e6beae643fb4e72fc172": {
      "type": "Ybodychange",
      "commitMessage": "revert LANG-1192 while investigating travis failures\n",
      "commitDate": "2015-12-17, 9:52 a.m.",
      "commitName": "1002c9e243883654f9c1e6beae643fb4e72fc172",
      "commitAuthor": "Chas Honton",
      "commitDateOld": "2015-12-13, 7:38 p.m.",
      "commitNameOld": "2fa0b168d62a07365b2787d0ed97fa1c2cfb673b",
      "commitAuthorOld": "Chas Honton",
      "daysBetweenCommits": 3.59,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected List\u003cRule\u003e parsePattern() {\n        final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n\n        final String[] ERAs \u003d symbols.getEras();\n        final String[] months \u003d symbols.getMonths();\n        final String[] shortMonths \u003d symbols.getShortMonths();\n        final String[] weekdays \u003d symbols.getWeekdays();\n        final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        final int length \u003d mPattern.length();\n        final int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            final String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            final int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            final char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027u\u0027: // day in week (number)\n                rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027X\u0027: // ISO 8601 \n                rule \u003d Iso8601_Rule.getRule(tokenLen);\n                break;    \n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                final String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 182,
      "functionName": "parsePattern",
      "diff": "@@ -1,134 +1,130 @@\n     protected List\u003cRule\u003e parsePattern() {\n         final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n         final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n \n         final String[] ERAs \u003d symbols.getEras();\n         final String[] months \u003d symbols.getMonths();\n         final String[] shortMonths \u003d symbols.getShortMonths();\n         final String[] weekdays \u003d symbols.getWeekdays();\n         final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n         final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n         final int length \u003d mPattern.length();\n         final int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n             final String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n             final int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n             final char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n-            case \u0027Y\u0027: // week year\n                 if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n-                if (c \u003d\u003d \u0027Y\u0027) {\n-                    rule \u003d new WeekYear((NumberRule) rule);\n-                }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027u\u0027: // day in week (number)\n                 rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                 break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027X\u0027: // ISO 8601 \n                 rule \u003d Iso8601_Rule.getRule(tokenLen);\n                 break;    \n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027: // time zone (value)\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n                 final String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2fa0b168d62a07365b2787d0ed97fa1c2cfb673b": {
      "type": "Ybodychange",
      "commitMessage": "LANG-1192: FastDateFormat support of the week-year component (uppercase \u0027Y\u0027)\n",
      "commitDate": "2015-12-13, 7:38 p.m.",
      "commitName": "2fa0b168d62a07365b2787d0ed97fa1c2cfb673b",
      "commitAuthor": "Chas Honton",
      "commitDateOld": "2015-12-11, 11:36 p.m.",
      "commitNameOld": "2ebf9a21d2dc99ab2f434111cac9dcd6da99d574",
      "commitAuthorOld": "Chas Honton",
      "daysBetweenCommits": 1.83,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected List\u003cRule\u003e parsePattern() {\n        final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n\n        final String[] ERAs \u003d symbols.getEras();\n        final String[] months \u003d symbols.getMonths();\n        final String[] shortMonths \u003d symbols.getShortMonths();\n        final String[] weekdays \u003d symbols.getWeekdays();\n        final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        final int length \u003d mPattern.length();\n        final int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            final String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            final int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            final char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n            case \u0027Y\u0027: // week year\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                if (c \u003d\u003d \u0027Y\u0027) {\n                    rule \u003d new WeekYear((NumberRule) rule);\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027u\u0027: // day in week (number)\n                rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027X\u0027: // ISO 8601 \n                rule \u003d Iso8601_Rule.getRule(tokenLen);\n                break;    \n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                final String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 181,
      "functionName": "parsePattern",
      "diff": "@@ -1,130 +1,134 @@\n     protected List\u003cRule\u003e parsePattern() {\n         final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n         final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n \n         final String[] ERAs \u003d symbols.getEras();\n         final String[] months \u003d symbols.getMonths();\n         final String[] shortMonths \u003d symbols.getShortMonths();\n         final String[] weekdays \u003d symbols.getWeekdays();\n         final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n         final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n         final int length \u003d mPattern.length();\n         final int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n             final String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n             final int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n             final char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n+            case \u0027Y\u0027: // week year\n                 if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n+                if (c \u003d\u003d \u0027Y\u0027) {\n+                    rule \u003d new WeekYear((NumberRule) rule);\n+                }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027u\u0027: // day in week (number)\n                 rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                 break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027X\u0027: // ISO 8601 \n                 rule \u003d Iso8601_Rule.getRule(tokenLen);\n                 break;    \n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027: // time zone (value)\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n                 final String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "2ebf9a21d2dc99ab2f434111cac9dcd6da99d574": {
      "type": "Ybodychange",
      "commitMessage": "LANG-1192 partial: implement format \u0027u\u0027 for FastDateFormat, day number of week\n",
      "commitDate": "2015-12-11, 11:36 p.m.",
      "commitName": "2ebf9a21d2dc99ab2f434111cac9dcd6da99d574",
      "commitAuthor": "Chas Honton",
      "commitDateOld": "2015-10-14, 6:46 a.m.",
      "commitNameOld": "6d3796e64bdd5f3f4857bfca6982e6ecf98a2b33",
      "commitAuthorOld": "Michael Osipov",
      "daysBetweenCommits": 58.74,
      "commitsBetweenForRepo": 25,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected List\u003cRule\u003e parsePattern() {\n        final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n\n        final String[] ERAs \u003d symbols.getEras();\n        final String[] months \u003d symbols.getMonths();\n        final String[] shortMonths \u003d symbols.getShortMonths();\n        final String[] weekdays \u003d symbols.getWeekdays();\n        final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        final int length \u003d mPattern.length();\n        final int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            final String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            final int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            final char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027u\u0027: // day in week (number)\n                rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027X\u0027: // ISO 8601 \n                rule \u003d Iso8601_Rule.getRule(tokenLen);\n                break;    \n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                final String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 182,
      "functionName": "parsePattern",
      "diff": "@@ -1,127 +1,130 @@\n     protected List\u003cRule\u003e parsePattern() {\n         final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n         final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n \n         final String[] ERAs \u003d symbols.getEras();\n         final String[] months \u003d symbols.getMonths();\n         final String[] shortMonths \u003d symbols.getShortMonths();\n         final String[] weekdays \u003d symbols.getWeekdays();\n         final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n         final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n         final int length \u003d mPattern.length();\n         final int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n             final String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n             final int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n             final char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n                 if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n+            case \u0027u\u0027: // day in week (number)\n+                rule \u003d new DayInWeekField(selectNumberRule(Calendar.DAY_OF_WEEK, tokenLen));\n+                break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027X\u0027: // ISO 8601 \n                 rule \u003d Iso8601_Rule.getRule(tokenLen);\n                 break;    \n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027: // time zone (value)\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n                 final String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0add1e8975336c65513b26123d48b221e2515ddc": {
      "type": "Ybodychange",
      "commitMessage": "ZZ format not displaying Z for UTC with OpenJDK 6\n",
      "commitDate": "2015-05-02, 2:21 p.m.",
      "commitName": "0add1e8975336c65513b26123d48b221e2515ddc",
      "commitAuthor": "Chas Honton",
      "commitDateOld": "2015-04-30, 10:21 p.m.",
      "commitNameOld": "775203dd2cfce017910d04c58a0b1b4e0a64923c",
      "commitAuthorOld": "Chas Honton",
      "daysBetweenCommits": 1.67,
      "commitsBetweenForRepo": 16,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected List\u003cRule\u003e parsePattern() {\n        final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n\n        final String[] ERAs \u003d symbols.getEras();\n        final String[] months \u003d symbols.getMonths();\n        final String[] shortMonths \u003d symbols.getShortMonths();\n        final String[] weekdays \u003d symbols.getWeekdays();\n        final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        final int length \u003d mPattern.length();\n        final int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            final String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            final int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            final char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027X\u0027: // ISO 8601 \n                rule \u003d Iso8601_Rule.getRule(tokenLen);\n                break;    \n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                final String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 181,
      "functionName": "parsePattern",
      "diff": "@@ -1,127 +1,127 @@\n     protected List\u003cRule\u003e parsePattern() {\n         final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n         final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n \n         final String[] ERAs \u003d symbols.getEras();\n         final String[] months \u003d symbols.getMonths();\n         final String[] shortMonths \u003d symbols.getShortMonths();\n         final String[] weekdays \u003d symbols.getWeekdays();\n         final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n         final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n         final int length \u003d mPattern.length();\n         final int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n             final String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n             final int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n             final char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n                 if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027X\u0027: // ISO 8601 \n                 rule \u003d Iso8601_Rule.getRule(tokenLen);\n                 break;    \n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027: // time zone (value)\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen \u003d\u003d 2) {\n-                    rule \u003d TimeZoneNumberRule.INSTANCE_ISO_8601;\n+                    rule \u003d Iso8601_Rule.ISO8601_HOURS_COLON_MINUTES;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n                 final String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bbfa8eb7df16baf17239b412ff7efa11c7e0926b": {
      "type": "Ybodychange",
      "commitMessage": "LANG-1101 FastDateParser and FastDatePrinter support \u0027X\u0027 format\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1668511 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2015-03-22, 10:33 p.m.",
      "commitName": "bbfa8eb7df16baf17239b412ff7efa11c7e0926b",
      "commitAuthor": "Chas Honton",
      "commitDateOld": "2015-03-13, 4:29 p.m.",
      "commitNameOld": "8aa1b44ada759e7948f87f55bb29ab87b5eb5469",
      "commitAuthorOld": "Benedikt Ritter",
      "daysBetweenCommits": 9.25,
      "commitsBetweenForRepo": 13,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected List\u003cRule\u003e parsePattern() {\n        final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n\n        final String[] ERAs \u003d symbols.getEras();\n        final String[] months \u003d symbols.getMonths();\n        final String[] shortMonths \u003d symbols.getShortMonths();\n        final String[] weekdays \u003d symbols.getWeekdays();\n        final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        final int length \u003d mPattern.length();\n        final int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            final String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            final int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            final char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027X\u0027: // ISO 8601 \n            \trule \u003d Iso8601_Rule.getRule(tokenLen);\n                break;    \n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_ISO_8601;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                final String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 183,
      "functionName": "parsePattern",
      "diff": "@@ -1,124 +1,127 @@\n     protected List\u003cRule\u003e parsePattern() {\n         final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n         final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n \n         final String[] ERAs \u003d symbols.getEras();\n         final String[] months \u003d symbols.getMonths();\n         final String[] shortMonths \u003d symbols.getShortMonths();\n         final String[] weekdays \u003d symbols.getWeekdays();\n         final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n         final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n         final int length \u003d mPattern.length();\n         final int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n             final String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n             final int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n             final char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n                 if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n+            case \u0027X\u0027: // ISO 8601 \n+            \trule \u003d Iso8601_Rule.getRule(tokenLen);\n+                break;    \n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027: // time zone (value)\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_ISO_8601;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n                 final String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "22b6781a0b96418198dc9146e5191e51d381102f": {
      "type": "Ybodychange",
      "commitMessage": "Added missing support for ISO 8601 parsing and printing using \"ZZ\" pattern (code now matches Javadoc). Addresses LANG-1000.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1628061 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2014-09-28, 6:11 a.m.",
      "commitName": "22b6781a0b96418198dc9146e5191e51d381102f",
      "commitAuthor": "Duncan Jones",
      "commitDateOld": "2014-04-30, 5:49 p.m.",
      "commitNameOld": "b4b51a8fc9eed7274a045b2f3192d77782b0e4fa",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 150.52,
      "commitsBetweenForRepo": 91,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected List\u003cRule\u003e parsePattern() {\n        final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n\n        final String[] ERAs \u003d symbols.getEras();\n        final String[] months \u003d symbols.getMonths();\n        final String[] shortMonths \u003d symbols.getShortMonths();\n        final String[] weekdays \u003d symbols.getWeekdays();\n        final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        final int length \u003d mPattern.length();\n        final int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            final String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            final int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            final char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_ISO_8601;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                final String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 176,
      "functionName": "parsePattern",
      "diff": "@@ -1,122 +1,124 @@\n     protected List\u003cRule\u003e parsePattern() {\n         final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n         final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n \n         final String[] ERAs \u003d symbols.getEras();\n         final String[] months \u003d symbols.getMonths();\n         final String[] shortMonths \u003d symbols.getShortMonths();\n         final String[] weekdays \u003d symbols.getWeekdays();\n         final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n         final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n         final int length \u003d mPattern.length();\n         final int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n             final String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n             final int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n             final char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n                 if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027: // time zone (value)\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else if (tokenLen \u003d\u003d 2) {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_ISO_8601;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n                 final String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "5292526e476ffbb19c6613a98464054236c86ace": {
      "type": "Ybodychange",
      "commitMessage": "Add final modifier to local variables.\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1436770 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2013-01-22, 2:09 a.m.",
      "commitName": "5292526e476ffbb19c6613a98464054236c86ace",
      "commitAuthor": "Gary D. Gregory",
      "commitDateOld": "2013-01-22, 2:07 a.m.",
      "commitNameOld": "5bd622dab027ef37001a630a7c825c5b8c19d1db",
      "commitAuthorOld": "Gary D. Gregory",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected List\u003cRule\u003e parsePattern() {\n        final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n\n        final String[] ERAs \u003d symbols.getEras();\n        final String[] months \u003d symbols.getMonths();\n        final String[] shortMonths \u003d symbols.getShortMonths();\n        final String[] weekdays \u003d symbols.getWeekdays();\n        final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        final int length \u003d mPattern.length();\n        final int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            final String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            final int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            final char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                final String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 167,
      "functionName": "parsePattern",
      "diff": "@@ -1,122 +1,122 @@\n     protected List\u003cRule\u003e parsePattern() {\n-        DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n-        List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n+        final DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n+        final List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n \n-        String[] ERAs \u003d symbols.getEras();\n-        String[] months \u003d symbols.getMonths();\n-        String[] shortMonths \u003d symbols.getShortMonths();\n-        String[] weekdays \u003d symbols.getWeekdays();\n-        String[] shortWeekdays \u003d symbols.getShortWeekdays();\n-        String[] AmPmStrings \u003d symbols.getAmPmStrings();\n+        final String[] ERAs \u003d symbols.getEras();\n+        final String[] months \u003d symbols.getMonths();\n+        final String[] shortMonths \u003d symbols.getShortMonths();\n+        final String[] weekdays \u003d symbols.getWeekdays();\n+        final String[] shortWeekdays \u003d symbols.getShortWeekdays();\n+        final String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n-        int length \u003d mPattern.length();\n-        int[] indexRef \u003d new int[1];\n+        final int length \u003d mPattern.length();\n+        final int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n-            String token \u003d parseToken(mPattern, indexRef);\n+            final String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n-            int tokenLen \u003d token.length();\n+            final int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n-            char c \u003d token.charAt(0);\n+            final char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n                 if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 } else {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027: // time zone (value)\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n-                String sub \u003d token.substring(1);\n+                final String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "cc340ad2eb6a783f6abe8d02f2c32bb02b01505c": {
      "type": "Ymovefromfile",
      "commitMessage": "Applying Chas Honton\u0027s implementation of DateParser and subsequent integration into FastDateFormat and the time package. See LANG-462. \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1236055 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2012-01-26, 2:00 a.m.",
      "commitName": "cc340ad2eb6a783f6abe8d02f2c32bb02b01505c",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2012-01-23, 12:47 p.m.",
      "commitNameOld": "dfa6882a3b9ae6d17c386312ad5e5902d852fb4e",
      "commitAuthorOld": "Matthew Jason Benson",
      "daysBetweenCommits": 2.55,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected List\u003cRule\u003e parsePattern() {\n        DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n\n        String[] ERAs \u003d symbols.getEras();\n        String[] months \u003d symbols.getMonths();\n        String[] shortMonths \u003d symbols.getShortMonths();\n        String[] weekdays \u003d symbols.getWeekdays();\n        String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        int length \u003d mPattern.length();\n        int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
      "functionStartLine": 167,
      "functionName": "parsePattern",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "newPath": "src/main/java/org/apache/commons/lang3/time/FastDatePrinter.java",
        "oldMethodName": "parsePattern",
        "newMethodName": "parsePattern"
      }
    },
    "34a6449c90a3b6074111a6bcbd31ad00ac1570f3": {
      "type": "Ybodychange",
      "commitMessage": "Adjust FastDateFormat for Java 7 behavior regarding format of the year pattern (LANG-719).\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1146138 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2011-07-13, 1:01 p.m.",
      "commitName": "34a6449c90a3b6074111a6bcbd31ad00ac1570f3",
      "commitAuthor": "Joerg Schaible",
      "commitDateOld": "2011-05-04, 7:11 a.m.",
      "commitNameOld": "bfb76fae2f43d883d60b402e2114159cc198513d",
      "commitAuthorOld": "Sebastian Bazley",
      "daysBetweenCommits": 70.24,
      "commitsBetweenForRepo": 78,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected List\u003cRule\u003e parsePattern() {\n        DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n\n        String[] ERAs \u003d symbols.getEras();\n        String[] months \u003d symbols.getMonths();\n        String[] shortMonths \u003d symbols.getShortMonths();\n        String[] weekdays \u003d symbols.getWeekdays();\n        String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        int length \u003d mPattern.length();\n        int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                } else {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
      "functionStartLine": 463,
      "functionName": "parsePattern",
      "diff": "@@ -1,122 +1,122 @@\n     protected List\u003cRule\u003e parsePattern() {\n         DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n         List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n \n         String[] ERAs \u003d symbols.getEras();\n         String[] months \u003d symbols.getMonths();\n         String[] shortMonths \u003d symbols.getShortMonths();\n         String[] weekdays \u003d symbols.getWeekdays();\n         String[] shortWeekdays \u003d symbols.getShortWeekdays();\n         String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n         int length \u003d mPattern.length();\n         int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n             String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n             int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n-                if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n-                } else {\n+                if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n+                } else {\n+                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen \u003c 4 ? 4 : tokenLen);\n                 }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027: // time zone (value)\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9ef322c33c465d8ae9a1d854dfa977f47f629009": {
      "type": "Ybodychange",
      "commitMessage": "Refactoring FastDateFormat per LANG-462 to use the FormatCache class created for an upcoming DateParser functionality. I\u0027ve kept FormatCache package-private for now. \n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@1095299 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2011-04-20, 2:51 a.m.",
      "commitName": "9ef322c33c465d8ae9a1d854dfa977f47f629009",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2011-04-05, 1:31 a.m.",
      "commitNameOld": "3a0c152c22b6e96fc809fdee2d6ea5b816a139e6",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 15.06,
      "commitsBetweenForRepo": 88,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected List\u003cRule\u003e parsePattern() {\n        DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n\n        String[] ERAs \u003d symbols.getEras();\n        String[] months \u003d symbols.getMonths();\n        String[] shortMonths \u003d symbols.getShortMonths();\n        String[] weekdays \u003d symbols.getWeekdays();\n        String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        int length \u003d mPattern.length();\n        int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
      "functionStartLine": 457,
      "functionName": "parsePattern",
      "diff": "@@ -1,122 +1,122 @@\n     protected List\u003cRule\u003e parsePattern() {\n         DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n         List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n \n         String[] ERAs \u003d symbols.getEras();\n         String[] months \u003d symbols.getMonths();\n         String[] shortMonths \u003d symbols.getShortMonths();\n         String[] weekdays \u003d symbols.getWeekdays();\n         String[] shortWeekdays \u003d symbols.getShortWeekdays();\n         String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n         int length \u003d mPattern.length();\n         int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n             String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n             int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                 } else {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027: // time zone (value)\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "fc5c081e22a61bb5a6810af302be3f22f7966df4": {
      "type": "Yfilerename",
      "commitMessage": "Move main source to src/main/java\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@895322 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2010-01-02, 9:11 p.m.",
      "commitName": "fc5c081e22a61bb5a6810af302be3f22f7966df4",
      "commitAuthor": "Paul C. Benedict Jr",
      "commitDateOld": "2010-01-02, 9:09 p.m.",
      "commitNameOld": "6b32246f5f9f77c74b32a5290cdbdd4e0f5c71c6",
      "commitAuthorOld": "Paul C. Benedict Jr",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected List\u003cRule\u003e parsePattern() {\n        DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n\n        String[] ERAs \u003d symbols.getEras();\n        String[] months \u003d symbols.getMonths();\n        String[] shortMonths \u003d symbols.getShortMonths();\n        String[] weekdays \u003d symbols.getWeekdays();\n        String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        int length \u003d mPattern.length();\n        int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
      "path": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java",
      "functionStartLine": 577,
      "functionName": "parsePattern",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
        "newPath": "src/main/java/org/apache/commons/lang3/time/FastDateFormat.java"
      }
    },
    "debc02c6d9b94c717b4182ae4dd7a97d47293a52": {
      "type": "Yfilerename",
      "commitMessage": "Changing directory name from lang to lang3. Build will fail (probably) until Java code is changed in subsequent commit. LANG-563\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@889202 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2009-12-10, 6:33 a.m.",
      "commitName": "debc02c6d9b94c717b4182ae4dd7a97d47293a52",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2009-12-10, 6:31 a.m.",
      "commitNameOld": "375d7d0954cae60c4c7292cc65abbc972178857c",
      "commitAuthorOld": "Henri Yandell",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected List\u003cRule\u003e parsePattern() {\n        DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n\n        String[] ERAs \u003d symbols.getEras();\n        String[] months \u003d symbols.getMonths();\n        String[] shortMonths \u003d symbols.getShortMonths();\n        String[] weekdays \u003d symbols.getWeekdays();\n        String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        int length \u003d mPattern.length();\n        int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
      "path": "src/java/org/apache/commons/lang3/time/FastDateFormat.java",
      "functionStartLine": 577,
      "functionName": "parsePattern",
      "diff": "",
      "extendedDetails": {
        "oldPath": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
        "newPath": "src/java/org/apache/commons/lang3/time/FastDateFormat.java"
      }
    },
    "654fb75d80a63fa551ced73c3b652f4120573590": {
      "type": "Ymultichange(Yreturntypechange,Ybodychange)",
      "commitMessage": "Genericize some more classes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@754810 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2009-03-15, 11:35 p.m.",
      "commitName": "654fb75d80a63fa551ced73c3b652f4120573590",
      "commitAuthor": "Sebastian Bazley",
      "subchanges": [
        {
          "type": "Yreturntypechange",
          "commitMessage": "Genericize some more classes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@754810 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2009-03-15, 11:35 p.m.",
          "commitName": "654fb75d80a63fa551ced73c3b652f4120573590",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "2009-03-14, 10:57 a.m.",
          "commitNameOld": "7585da946c5bab3fd60188718d0be17ee6fa59e2",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 1.53,
          "commitsBetweenForRepo": 47,
          "commitsBetweenForFile": 1,
          "actualSource": "    protected List\u003cRule\u003e parsePattern() {\n        DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n\n        String[] ERAs \u003d symbols.getEras();\n        String[] months \u003d symbols.getMonths();\n        String[] shortMonths \u003d symbols.getShortMonths();\n        String[] weekdays \u003d symbols.getWeekdays();\n        String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        int length \u003d mPattern.length();\n        int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 577,
          "functionName": "parsePattern",
          "diff": "@@ -1,122 +1,122 @@\n-    protected List parsePattern() {\n+    protected List\u003cRule\u003e parsePattern() {\n         DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n-        List rules \u003d new ArrayList();\n+        List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n \n         String[] ERAs \u003d symbols.getEras();\n         String[] months \u003d symbols.getMonths();\n         String[] shortMonths \u003d symbols.getShortMonths();\n         String[] weekdays \u003d symbols.getWeekdays();\n         String[] shortWeekdays \u003d symbols.getShortWeekdays();\n         String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n         int length \u003d mPattern.length();\n         int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n             String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n             int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                 } else {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027: // time zone (value)\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "List",
            "newValue": "List\u003cRule\u003e"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Genericize some more classes\n\ngit-svn-id: https://svn.apache.org/repos/asf/commons/proper/lang/trunk@754810 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2009-03-15, 11:35 p.m.",
          "commitName": "654fb75d80a63fa551ced73c3b652f4120573590",
          "commitAuthor": "Sebastian Bazley",
          "commitDateOld": "2009-03-14, 10:57 a.m.",
          "commitNameOld": "7585da946c5bab3fd60188718d0be17ee6fa59e2",
          "commitAuthorOld": "Sebastian Bazley",
          "daysBetweenCommits": 1.53,
          "commitsBetweenForRepo": 47,
          "commitsBetweenForFile": 1,
          "actualSource": "    protected List\u003cRule\u003e parsePattern() {\n        DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n\n        String[] ERAs \u003d symbols.getEras();\n        String[] months \u003d symbols.getMonths();\n        String[] shortMonths \u003d symbols.getShortMonths();\n        String[] weekdays \u003d symbols.getWeekdays();\n        String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        int length \u003d mPattern.length();\n        int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 577,
          "functionName": "parsePattern",
          "diff": "@@ -1,122 +1,122 @@\n-    protected List parsePattern() {\n+    protected List\u003cRule\u003e parsePattern() {\n         DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n-        List rules \u003d new ArrayList();\n+        List\u003cRule\u003e rules \u003d new ArrayList\u003cRule\u003e();\n \n         String[] ERAs \u003d symbols.getEras();\n         String[] months \u003d symbols.getMonths();\n         String[] shortMonths \u003d symbols.getShortMonths();\n         String[] weekdays \u003d symbols.getWeekdays();\n         String[] shortWeekdays \u003d symbols.getShortWeekdays();\n         String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n         int length \u003d mPattern.length();\n         int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n             String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n             int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                 } else {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027: // time zone (value)\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "3aab5ae02692d3ceac2618ec0b4514787f4b17d7": {
      "type": "Ybodychange",
      "commitMessage": "Fix for zero-padding of years.\n\nA commented out set of failing tests are added to the Unit Test and need to be addressed.\n\nSubmitted by:\tJerson Chua\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137932 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2004-09-12, 1:03 a.m.",
      "commitName": "3aab5ae02692d3ceac2618ec0b4514787f4b17d7",
      "commitAuthor": "Henri Yandell",
      "commitDateOld": "2004-07-05, 6:37 p.m.",
      "commitNameOld": "4301e384b8773c427609fdd2b38b8db2c78e10d6",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 68.27,
      "commitsBetweenForRepo": 61,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected List parsePattern() {\n        DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        List rules \u003d new ArrayList();\n\n        String[] ERAs \u003d symbols.getEras();\n        String[] months \u003d symbols.getMonths();\n        String[] shortMonths \u003d symbols.getShortMonths();\n        String[] weekdays \u003d symbols.getWeekdays();\n        String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        int length \u003d mPattern.length();\n        int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
      "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
      "functionStartLine": 561,
      "functionName": "parsePattern",
      "diff": "@@ -1,122 +1,122 @@\n     protected List parsePattern() {\n         DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n         List rules \u003d new ArrayList();\n \n         String[] ERAs \u003d symbols.getEras();\n         String[] months \u003d symbols.getMonths();\n         String[] shortMonths \u003d symbols.getShortMonths();\n         String[] weekdays \u003d symbols.getWeekdays();\n         String[] shortWeekdays \u003d symbols.getShortWeekdays();\n         String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n         int length \u003d mPattern.length();\n         int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n             String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n             int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n+                    rule \u003d selectNumberRule(Calendar.YEAR, tokenLen);\n                 } else {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027: // time zone (value)\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "247c97f507c7ce3556f040624b6af28e911e6dfb": {
      "type": "Ybodychange",
      "commitMessage": "Remove unneeded String constructor as found by findBugs\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137495 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2003-07-25, 6:53 p.m.",
      "commitName": "247c97f507c7ce3556f040624b6af28e911e6dfb",
      "commitAuthor": "Stephen Colebourne",
      "commitDateOld": "2003-07-21, 8:09 p.m.",
      "commitNameOld": "e00c4a254616e100b02b0877f13077a30edca0ae",
      "commitAuthorOld": "Stephen Colebourne",
      "daysBetweenCommits": 3.95,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected List parsePattern() {\n        DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        List rules \u003d new ArrayList();\n\n        String[] ERAs \u003d symbols.getEras();\n        String[] months \u003d symbols.getMonths();\n        String[] shortMonths \u003d symbols.getShortMonths();\n        String[] weekdays \u003d symbols.getWeekdays();\n        String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        int length \u003d mPattern.length();\n        int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(sub);\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
      "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
      "functionStartLine": 465,
      "functionName": "parsePattern",
      "diff": "@@ -1,122 +1,122 @@\n     protected List parsePattern() {\n         DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n         List rules \u003d new ArrayList();\n \n         String[] ERAs \u003d symbols.getEras();\n         String[] months \u003d symbols.getMonths();\n         String[] shortMonths \u003d symbols.getShortMonths();\n         String[] weekdays \u003d symbols.getWeekdays();\n         String[] shortWeekdays \u003d symbols.getShortWeekdays();\n         String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n         int length \u003d mPattern.length();\n         int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n             String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n             int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n                     rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n                     rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n                     rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n                     rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                 }\n                 break;\n             case \u0027Z\u0027: // time zone (value)\n                 if (tokenLen \u003d\u003d 1) {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                 } else {\n                     rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n-                    rule \u003d new StringLiteral(new String(sub));\n+                    rule \u003d new StringLiteral(sub);\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "73ee6c3d270a91bd447f732b24c4d65169b0c8d6": {
      "type": "Ymultichange(Yrename,Yparameterchange,Ymodifierchange,Ybodychange)",
      "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2003-06-08, 7:14 p.m.",
      "commitName": "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
      "commitAuthor": "Stephen Colebourne",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2003-06-08, 7:14 p.m.",
          "commitName": "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2003-05-21, 7:39 p.m.",
          "commitNameOld": "6d4516cccc1cd836e6a594e2df9a3c920ef177df",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "    protected List parsePattern() {\n        DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        List rules \u003d new ArrayList();\n\n        String[] ERAs \u003d symbols.getEras();\n        String[] months \u003d symbols.getMonths();\n        String[] shortMonths \u003d symbols.getShortMonths();\n        String[] weekdays \u003d symbols.getWeekdays();\n        String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        int length \u003d mPattern.length();\n        int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 409,
          "functionName": "parsePattern",
          "diff": "@@ -1,114 +1,122 @@\n-    private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+    protected List parsePattern() {\n+        DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n         List rules \u003d new ArrayList();\n \n         String[] ERAs \u003d symbols.getEras();\n         String[] months \u003d symbols.getMonths();\n         String[] shortMonths \u003d symbols.getShortMonths();\n         String[] weekdays \u003d symbols.getWeekdays();\n         String[] shortWeekdays \u003d symbols.getShortWeekdays();\n         String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n-        int length \u003d pattern.length();\n+        int length \u003d mPattern.length();\n         int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n-            String token \u003d parseToken(pattern, indexRef);\n+            String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n             int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n+                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n-                    rule \u003d new TwoDigitYearField();\n+                    rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n-                    rule \u003d new TwoDigitMonthField();\n+                    rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n-                    rule \u003d new UnpaddedMonthField();\n+                    rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                }\n+                break;\n+            case \u0027Z\u0027: // time zone (value)\n+                if (tokenLen \u003d\u003d 1) {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(new String(sub));\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "parse",
            "newValue": "parsePattern"
          }
        },
        {
          "type": "Yparameterchange",
          "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2003-06-08, 7:14 p.m.",
          "commitName": "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2003-05-21, 7:39 p.m.",
          "commitNameOld": "6d4516cccc1cd836e6a594e2df9a3c920ef177df",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "    protected List parsePattern() {\n        DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        List rules \u003d new ArrayList();\n\n        String[] ERAs \u003d symbols.getEras();\n        String[] months \u003d symbols.getMonths();\n        String[] shortMonths \u003d symbols.getShortMonths();\n        String[] weekdays \u003d symbols.getWeekdays();\n        String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        int length \u003d mPattern.length();\n        int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 409,
          "functionName": "parsePattern",
          "diff": "@@ -1,114 +1,122 @@\n-    private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+    protected List parsePattern() {\n+        DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n         List rules \u003d new ArrayList();\n \n         String[] ERAs \u003d symbols.getEras();\n         String[] months \u003d symbols.getMonths();\n         String[] shortMonths \u003d symbols.getShortMonths();\n         String[] weekdays \u003d symbols.getWeekdays();\n         String[] shortWeekdays \u003d symbols.getShortWeekdays();\n         String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n-        int length \u003d pattern.length();\n+        int length \u003d mPattern.length();\n         int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n-            String token \u003d parseToken(pattern, indexRef);\n+            String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n             int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n+                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n-                    rule \u003d new TwoDigitYearField();\n+                    rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n-                    rule \u003d new TwoDigitMonthField();\n+                    rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n-                    rule \u003d new UnpaddedMonthField();\n+                    rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                }\n+                break;\n+            case \u0027Z\u0027: // time zone (value)\n+                if (tokenLen \u003d\u003d 1) {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(new String(sub));\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[pattern-String, timeZone-TimeZone, locale-Locale, symbols-DateFormatSymbols]",
            "newValue": "[]"
          }
        },
        {
          "type": "Ymodifierchange",
          "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2003-06-08, 7:14 p.m.",
          "commitName": "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2003-05-21, 7:39 p.m.",
          "commitNameOld": "6d4516cccc1cd836e6a594e2df9a3c920ef177df",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "    protected List parsePattern() {\n        DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        List rules \u003d new ArrayList();\n\n        String[] ERAs \u003d symbols.getEras();\n        String[] months \u003d symbols.getMonths();\n        String[] shortMonths \u003d symbols.getShortMonths();\n        String[] weekdays \u003d symbols.getWeekdays();\n        String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        int length \u003d mPattern.length();\n        int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 409,
          "functionName": "parsePattern",
          "diff": "@@ -1,114 +1,122 @@\n-    private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+    protected List parsePattern() {\n+        DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n         List rules \u003d new ArrayList();\n \n         String[] ERAs \u003d symbols.getEras();\n         String[] months \u003d symbols.getMonths();\n         String[] shortMonths \u003d symbols.getShortMonths();\n         String[] weekdays \u003d symbols.getWeekdays();\n         String[] shortWeekdays \u003d symbols.getShortWeekdays();\n         String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n-        int length \u003d pattern.length();\n+        int length \u003d mPattern.length();\n         int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n-            String token \u003d parseToken(pattern, indexRef);\n+            String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n             int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n+                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n-                    rule \u003d new TwoDigitYearField();\n+                    rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n-                    rule \u003d new TwoDigitMonthField();\n+                    rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n-                    rule \u003d new UnpaddedMonthField();\n+                    rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                }\n+                break;\n+            case \u0027Z\u0027: // time zone (value)\n+                if (tokenLen \u003d\u003d 1) {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(new String(sub));\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[private, static]",
            "newValue": "[protected]"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "Rework time package in preparation for 2.0 release\nDateUtils split to DateFormatUtils and DurationFormatUtils\nCalendarUtils renamed to DateUtils\nStopWatch time format method moved to DurationFormatUtils\nTests updated and pass\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137361 13f79535-47bb-0310-9956-ffa450edef68\n",
          "commitDate": "2003-06-08, 7:14 p.m.",
          "commitName": "73ee6c3d270a91bd447f732b24c4d65169b0c8d6",
          "commitAuthor": "Stephen Colebourne",
          "commitDateOld": "2003-05-21, 7:39 p.m.",
          "commitNameOld": "6d4516cccc1cd836e6a594e2df9a3c920ef177df",
          "commitAuthorOld": "Stephen Colebourne",
          "daysBetweenCommits": 17.98,
          "commitsBetweenForRepo": 35,
          "commitsBetweenForFile": 1,
          "actualSource": "    protected List parsePattern() {\n        DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n        List rules \u003d new ArrayList();\n\n        String[] ERAs \u003d symbols.getEras();\n        String[] months \u003d symbols.getMonths();\n        String[] shortMonths \u003d symbols.getShortMonths();\n        String[] weekdays \u003d symbols.getWeekdays();\n        String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        int length \u003d mPattern.length();\n        int[] indexRef \u003d new int[1];\n\n        for (int i \u003d 0; i \u003c length; i++) {\n            indexRef[0] \u003d i;\n            String token \u003d parseToken(mPattern, indexRef);\n            i \u003d indexRef[0];\n\n            int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                } else {\n                    rule \u003d TwoDigitYearField.INSTANCE;\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                } else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                } else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d TwoDigitMonthField.INSTANCE;\n                } else {\n                    rule \u003d UnpaddedMonthField.INSTANCE;\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                } else {\n                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027Z\u0027: // time zone (value)\n                if (tokenLen \u003d\u003d 1) {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n                } else {\n                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                } else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
          "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
          "functionStartLine": 409,
          "functionName": "parsePattern",
          "diff": "@@ -1,114 +1,122 @@\n-    private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+    protected List parsePattern() {\n+        DateFormatSymbols symbols \u003d new DateFormatSymbols(mLocale);\n         List rules \u003d new ArrayList();\n \n         String[] ERAs \u003d symbols.getEras();\n         String[] months \u003d symbols.getMonths();\n         String[] shortMonths \u003d symbols.getShortMonths();\n         String[] weekdays \u003d symbols.getWeekdays();\n         String[] shortWeekdays \u003d symbols.getShortWeekdays();\n         String[] AmPmStrings \u003d symbols.getAmPmStrings();\n \n-        int length \u003d pattern.length();\n+        int length \u003d mPattern.length();\n         int[] indexRef \u003d new int[1];\n \n         for (int i \u003d 0; i \u003c length; i++) {\n             indexRef[0] \u003d i;\n-            String token \u003d parseToken(pattern, indexRef);\n+            String token \u003d parseToken(mPattern, indexRef);\n             i \u003d indexRef[0];\n \n             int tokenLen \u003d token.length();\n             if (tokenLen \u003d\u003d 0) {\n                 break;\n             }\n \n             Rule rule;\n             char c \u003d token.charAt(0);\n \n             switch (c) {\n             case \u0027G\u0027: // era designator (text)\n                 rule \u003d new TextField(Calendar.ERA, ERAs);\n                 break;\n             case \u0027y\u0027: // year (number)\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n+                    rule \u003d UnpaddedNumberField.INSTANCE_YEAR;\n                 } else {\n-                    rule \u003d new TwoDigitYearField();\n+                    rule \u003d TwoDigitYearField.INSTANCE;\n                 }\n                 break;\n             case \u0027M\u0027: // month in year (text and number)\n                 if (tokenLen \u003e\u003d 4) {\n                     rule \u003d new TextField(Calendar.MONTH, months);\n                 } else if (tokenLen \u003d\u003d 3) {\n                     rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                 } else if (tokenLen \u003d\u003d 2) {\n-                    rule \u003d new TwoDigitMonthField();\n+                    rule \u003d TwoDigitMonthField.INSTANCE;\n                 } else {\n-                    rule \u003d new UnpaddedMonthField();\n+                    rule \u003d UnpaddedMonthField.INSTANCE;\n                 }\n                 break;\n             case \u0027d\u0027: // day in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                 break;\n             case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                 rule \u003d new TwelveHourField(selectNumberRule(Calendar.HOUR, tokenLen));\n                 break;\n             case \u0027H\u0027: // hour in day (number, 0..23)\n                 rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                 break;\n             case \u0027m\u0027: // minute in hour (number)\n                 rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                 break;\n             case \u0027s\u0027: // second in minute (number)\n                 rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                 break;\n             case \u0027S\u0027: // millisecond (number)\n                 rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                 break;\n             case \u0027E\u0027: // day in week (text)\n                 rule \u003d new TextField(Calendar.DAY_OF_WEEK, tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                 break;\n             case \u0027D\u0027: // day in year (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                 break;\n             case \u0027F\u0027: // day of week in month (number)\n                 rule \u003d selectNumberRule(Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                 break;\n             case \u0027w\u0027: // week in year (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                 break;\n             case \u0027W\u0027: // week in month (number)\n                 rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                 break;\n             case \u0027a\u0027: // am/pm marker (text)\n                 rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                 break;\n             case \u0027k\u0027: // hour in day (1..24)\n                 rule \u003d new TwentyFourHourField(selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                 break;\n             case \u0027K\u0027: // hour in am/pm (0..11)\n                 rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                 break;\n             case \u0027z\u0027: // time zone (text)\n                 if (tokenLen \u003e\u003d 4) {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.LONG);\n                 } else {\n-                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                    rule \u003d new TimeZoneNameRule(mTimeZone, mTimeZoneForced, mLocale, TimeZone.SHORT);\n+                }\n+                break;\n+            case \u0027Z\u0027: // time zone (value)\n+                if (tokenLen \u003d\u003d 1) {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_NO_COLON;\n+                } else {\n+                    rule \u003d TimeZoneNumberRule.INSTANCE_COLON;\n                 }\n                 break;\n             case \u0027\\\u0027\u0027: // literal text\n                 String sub \u003d token.substring(1);\n                 if (sub.length() \u003d\u003d 1) {\n                     rule \u003d new CharacterLiteral(sub.charAt(0));\n                 } else {\n                     rule \u003d new StringLiteral(new String(sub));\n                 }\n                 break;\n             default:\n                 throw new IllegalArgumentException(\"Illegal pattern component: \" + token);\n             }\n \n             rules.add(rule);\n         }\n \n         return rules;\n     }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        }
      ]
    },
    "a99f7965b34b8dd0532c8d6f5e592d990ca220fc": {
      "type": "Yintroduced",
      "commitMessage": "A thread-safe, faster version of java.text\u0027s DateFormat. While JODA contains\nbetter, this version is religion-free.\n\nPermission given by Brian S O\u0027Neill:\nhttp://archives.apache.org/eyebrowse/ReadMsg?listName\u003dcommons-dev@jakarta.apache.org\u0026msgNo\u003d20612\n\nSubmitted by:\tSean Schofield\n\n\ngit-svn-id: https://svn.apache.org/repos/asf/jakarta/commons/proper/lang/trunk@137221 13f79535-47bb-0310-9956-ffa450edef68\n",
      "commitDate": "2003-01-07, 2:55 p.m.",
      "commitName": "a99f7965b34b8dd0532c8d6f5e592d990ca220fc",
      "commitAuthor": "Henri Yandell",
      "diff": "@@ -0,0 +1,126 @@\n+    private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n+        List rules \u003d new ArrayList();\n+\n+        String[] ERAs \u003d symbols.getEras();\n+        String[] months \u003d symbols.getMonths();\n+        String[] shortMonths \u003d symbols.getShortMonths();\n+        String[] weekdays \u003d symbols.getWeekdays();\n+        String[] shortWeekdays \u003d symbols.getShortWeekdays();\n+        String[] AmPmStrings \u003d symbols.getAmPmStrings();\n+\n+        int length \u003d pattern.length();\n+        int[] indexRef \u003d new int[1];\n+\n+        for (int i\u003d0; i\u003clength; i++) {\n+            indexRef[0] \u003d i;\n+            String token \u003d parseToken(pattern, indexRef);\n+            i \u003d indexRef[0];\n+\n+            int tokenLen \u003d token.length();\n+            if (tokenLen \u003d\u003d 0) {\n+                break;\n+            }\n+\n+            Rule rule;\n+            char c \u003d token.charAt(0);\n+\n+            switch (c) {\n+            case \u0027G\u0027: // era designator (text)\n+                rule \u003d new TextField(Calendar.ERA, ERAs);\n+                break;\n+            case \u0027y\u0027: // year (number)\n+                if (tokenLen \u003e\u003d 4) {\n+                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n+                }\n+                else {\n+                    rule \u003d new TwoDigitYearField();\n+                }\n+                break;\n+            case \u0027M\u0027: // month in year (text and number)\n+                if (tokenLen \u003e\u003d 4) {\n+                    rule \u003d new TextField(Calendar.MONTH, months);\n+                }\n+                else if (tokenLen \u003d\u003d 3) {\n+                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n+                }\n+                else if (tokenLen \u003d\u003d 2) {\n+                    rule \u003d new TwoDigitMonthField();\n+                }\n+                else {\n+                    rule \u003d new UnpaddedMonthField();\n+                }\n+                break;\n+            case \u0027d\u0027: // day in month (number)\n+                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n+                break;\n+            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n+                rule \u003d new TwelveHourField\n+                    (selectNumberRule(Calendar.HOUR, tokenLen));\n+                break;\n+            case \u0027H\u0027: // hour in day (number, 0..23)\n+                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n+                break;\n+            case \u0027m\u0027: // minute in hour (number)\n+                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n+                break;\n+            case \u0027s\u0027: // second in minute (number)\n+                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n+                break;\n+            case \u0027S\u0027: // millisecond (number)\n+                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n+                break;\n+            case \u0027E\u0027: // day in week (text)\n+                rule \u003d new TextField\n+                    (Calendar.DAY_OF_WEEK,\n+                     tokenLen \u003c 4 ? shortWeekdays : weekdays);\n+                break;\n+            case \u0027D\u0027: // day in year (number)\n+                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n+                break;\n+            case \u0027F\u0027: // day of week in month (number)\n+                rule \u003d selectNumberRule\n+                    (Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n+                break;\n+            case \u0027w\u0027: // week in year (number)\n+                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n+                break;\n+            case \u0027W\u0027: // week in month (number)\n+                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n+                break;\n+            case \u0027a\u0027: // am/pm marker (text)\n+                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n+                break;\n+            case \u0027k\u0027: // hour in day (1..24)\n+                rule \u003d new TwentyFourHourField\n+                    (selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n+                break;\n+            case \u0027K\u0027: // hour in am/pm (0..11)\n+                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n+                break;\n+            case \u0027z\u0027: // time zone (text)\n+                if (tokenLen \u003e\u003d 4) {\n+                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n+                }\n+                else {\n+                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n+                }\n+                break;\n+            case \u0027\\\u0027\u0027: // literal text\n+                String sub \u003d token.substring(1);\n+                if (sub.length() \u003d\u003d 1) {\n+                    rule \u003d new CharacterLiteral(sub.charAt(0));\n+                }\n+                else {\n+                    rule \u003d new StringLiteral(new String(sub));\n+                }\n+                break;\n+            default:\n+                throw new IllegalArgumentException\n+                    (\"Illegal pattern component: \" + token);\n+            }\n+\n+            rules.add(rule);\n+        }\n+\n+        return rules;\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    private static List parse(String pattern, TimeZone timeZone, Locale locale, DateFormatSymbols symbols) {\n        List rules \u003d new ArrayList();\n\n        String[] ERAs \u003d symbols.getEras();\n        String[] months \u003d symbols.getMonths();\n        String[] shortMonths \u003d symbols.getShortMonths();\n        String[] weekdays \u003d symbols.getWeekdays();\n        String[] shortWeekdays \u003d symbols.getShortWeekdays();\n        String[] AmPmStrings \u003d symbols.getAmPmStrings();\n\n        int length \u003d pattern.length();\n        int[] indexRef \u003d new int[1];\n\n        for (int i\u003d0; i\u003clength; i++) {\n            indexRef[0] \u003d i;\n            String token \u003d parseToken(pattern, indexRef);\n            i \u003d indexRef[0];\n\n            int tokenLen \u003d token.length();\n            if (tokenLen \u003d\u003d 0) {\n                break;\n            }\n\n            Rule rule;\n            char c \u003d token.charAt(0);\n\n            switch (c) {\n            case \u0027G\u0027: // era designator (text)\n                rule \u003d new TextField(Calendar.ERA, ERAs);\n                break;\n            case \u0027y\u0027: // year (number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new UnpaddedNumberField(Calendar.YEAR);\n                }\n                else {\n                    rule \u003d new TwoDigitYearField();\n                }\n                break;\n            case \u0027M\u0027: // month in year (text and number)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TextField(Calendar.MONTH, months);\n                }\n                else if (tokenLen \u003d\u003d 3) {\n                    rule \u003d new TextField(Calendar.MONTH, shortMonths);\n                }\n                else if (tokenLen \u003d\u003d 2) {\n                    rule \u003d new TwoDigitMonthField();\n                }\n                else {\n                    rule \u003d new UnpaddedMonthField();\n                }\n                break;\n            case \u0027d\u0027: // day in month (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_MONTH, tokenLen);\n                break;\n            case \u0027h\u0027: // hour in am/pm (number, 1..12)\n                rule \u003d new TwelveHourField\n                    (selectNumberRule(Calendar.HOUR, tokenLen));\n                break;\n            case \u0027H\u0027: // hour in day (number, 0..23)\n                rule \u003d selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen);\n                break;\n            case \u0027m\u0027: // minute in hour (number)\n                rule \u003d selectNumberRule(Calendar.MINUTE, tokenLen);\n                break;\n            case \u0027s\u0027: // second in minute (number)\n                rule \u003d selectNumberRule(Calendar.SECOND, tokenLen);\n                break;\n            case \u0027S\u0027: // millisecond (number)\n                rule \u003d selectNumberRule(Calendar.MILLISECOND, tokenLen);\n                break;\n            case \u0027E\u0027: // day in week (text)\n                rule \u003d new TextField\n                    (Calendar.DAY_OF_WEEK,\n                     tokenLen \u003c 4 ? shortWeekdays : weekdays);\n                break;\n            case \u0027D\u0027: // day in year (number)\n                rule \u003d selectNumberRule(Calendar.DAY_OF_YEAR, tokenLen);\n                break;\n            case \u0027F\u0027: // day of week in month (number)\n                rule \u003d selectNumberRule\n                    (Calendar.DAY_OF_WEEK_IN_MONTH, tokenLen);\n                break;\n            case \u0027w\u0027: // week in year (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_YEAR, tokenLen);\n                break;\n            case \u0027W\u0027: // week in month (number)\n                rule \u003d selectNumberRule(Calendar.WEEK_OF_MONTH, tokenLen);\n                break;\n            case \u0027a\u0027: // am/pm marker (text)\n                rule \u003d new TextField(Calendar.AM_PM, AmPmStrings);\n                break;\n            case \u0027k\u0027: // hour in day (1..24)\n                rule \u003d new TwentyFourHourField\n                    (selectNumberRule(Calendar.HOUR_OF_DAY, tokenLen));\n                break;\n            case \u0027K\u0027: // hour in am/pm (0..11)\n                rule \u003d selectNumberRule(Calendar.HOUR, tokenLen);\n                break;\n            case \u0027z\u0027: // time zone (text)\n                if (tokenLen \u003e\u003d 4) {\n                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.LONG);\n                }\n                else {\n                    rule \u003d new TimeZoneRule(timeZone, locale, TimeZone.SHORT);\n                }\n                break;\n            case \u0027\\\u0027\u0027: // literal text\n                String sub \u003d token.substring(1);\n                if (sub.length() \u003d\u003d 1) {\n                    rule \u003d new CharacterLiteral(sub.charAt(0));\n                }\n                else {\n                    rule \u003d new StringLiteral(new String(sub));\n                }\n                break;\n            default:\n                throw new IllegalArgumentException\n                    (\"Illegal pattern component: \" + token);\n            }\n\n            rules.add(rule);\n        }\n\n        return rules;\n    }",
      "path": "src/java/org/apache/commons/lang/time/FastDateFormat.java",
      "functionStartLine": 371,
      "functionName": "parse"
    }
  }
}