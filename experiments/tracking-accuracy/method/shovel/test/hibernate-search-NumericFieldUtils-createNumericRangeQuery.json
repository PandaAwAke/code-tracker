{
  "origin": "codeshovel",
  "repositoryName": "hibernate-search",
  "repositoryPath": "H:\\Projects\\hibernate\\hibernate-search/.git",
  "startCommitName": "5b778035965d7588ad1d1ae522c4bafebd3a0e16",
  "sourceFileName": "NumericFieldUtils.java",
  "functionName": "createNumericRangeQuery",
  "functionId": "createNumericRangeQuery___fieldName-String__from-Object__to-Object__includeLower-boolean__includeUpper-boolean",
  "sourceFilePath": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
  "functionStartLine": 36,
  "functionEndLine": 96,
  "numCommitsSeen": 37,
  "timeTaken": 1715,
  "changeHistory": [
    "0e8203f804d5a84f1d85267893bc827f75529584",
    "4c0415c1f11b7e26fdc4dc95f4b822bf9e983139",
    "a6ae926eea1ff68d4f0a7058863cb3cb0c9c36af",
    "23b523bdc8847b9f40a69e50b8acb09e4e464eec",
    "1f2600dedf2f75379ceb45e9f99103814f902c28",
    "3d93af0a91221be6d3e3b145061eec7c7a833bde",
    "b52a248717a2f3aaa873fcb577c558172574baa7",
    "bb3f94df96e6e487ba231e4e201064cbb850aa02",
    "428fae5def27fc3724bfbd7558db241e2aa8efdb",
    "a51e16bca141c7be80f8e6ead072d1313e21b34b",
    "ab8faa8701ffd68414db07a18cc9dcfd30b46874",
    "354f2cadec6dee7d4dde2250e13f468e2d93cd27",
    "02b8eb4f6017e7fb44bee6013d7f8bf1ae23a7b1",
    "36fc8ecc219c7c843ca2359ee54acef23d10ec3b",
    "f957df8e5d4706c6efe9296eb81fe1eeb92a1fd8",
    "dd12cc91851ebe085215a11a33316918259a2b14"
  ],
  "changeHistoryShort": {
    "0e8203f804d5a84f1d85267893bc827f75529584": "Ybodychange",
    "4c0415c1f11b7e26fdc4dc95f4b822bf9e983139": "Ybodychange",
    "a6ae926eea1ff68d4f0a7058863cb3cb0c9c36af": "Ybodychange",
    "23b523bdc8847b9f40a69e50b8acb09e4e464eec": "Ybodychange",
    "1f2600dedf2f75379ceb45e9f99103814f902c28": "Ybodychange",
    "3d93af0a91221be6d3e3b145061eec7c7a833bde": "Ybodychange",
    "b52a248717a2f3aaa873fcb577c558172574baa7": "Ybodychange",
    "bb3f94df96e6e487ba231e4e201064cbb850aa02": "Ybodychange",
    "428fae5def27fc3724bfbd7558db241e2aa8efdb": "Ybodychange",
    "a51e16bca141c7be80f8e6ead072d1313e21b34b": "Ybodychange",
    "ab8faa8701ffd68414db07a18cc9dcfd30b46874": "Ybodychange",
    "354f2cadec6dee7d4dde2250e13f468e2d93cd27": "Yfilerename",
    "02b8eb4f6017e7fb44bee6013d7f8bf1ae23a7b1": "Yfilerename",
    "36fc8ecc219c7c843ca2359ee54acef23d10ec3b": "Ybodychange",
    "f957df8e5d4706c6efe9296eb81fe1eeb92a1fd8": "Yfilerename",
    "dd12cc91851ebe085215a11a33316918259a2b14": "Yintroduced"
  },
  "changeHistoryDetails": {
    "0e8203f804d5a84f1d85267893bc827f75529584": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-2722 Remove conditions around Java 8 specific code\n",
      "commitDate": "2017-05-12, 12:04 p.m.",
      "commitName": "0e8203f804d5a84f1d85267893bc827f75529584",
      "commitAuthor": "Yoann Rodière",
      "commitDateOld": "2016-12-19, 5:39 p.m.",
      "commitNameOld": "b5f54ad3660586711ec15d150cabbc0472f5fb9b",
      "commitAuthorOld": "Yoann Rodière",
      "daysBetweenCommits": 143.73,
      "commitsBetweenForRepo": 502,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n\t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n\n\t\tClass\u003c?\u003e numericClass;\n\n\t\tif ( from !\u003d null ) {\n\t\t\tnumericClass \u003d from.getClass();\n\t\t}\n\t\telse if ( to !\u003d null ) {\n\t\t\tnumericClass \u003d to.getClass();\n\t\t}\n\t\telse {\n\t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n\t\t}\n\n\t\tif ( Double.class.isAssignableFrom( numericClass ) ) {\n\t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( Byte.class.isAssignableFrom( numericClass ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Byte) from ).intValue(), ( (Byte) to ).intValue(), includeLower, includeUpper );\n\t\t}\n\t\tif ( Short.class.isAssignableFrom( numericClass ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Short) from ).intValue(), ( (Short) to ).intValue(), includeLower, includeUpper );\n\t\t}\n\t\tif ( Long.class.isAssignableFrom( numericClass ) ) {\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( Integer.class.isAssignableFrom( numericClass ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( Float.class.isAssignableFrom( numericClass ) ) {\n\t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( Date.class.isAssignableFrom( numericClass ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( Calendar.class.isAssignableFrom( numericClass ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( java.time.Duration.class.isAssignableFrom( numericClass ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ( (java.time.Duration) from ).toNanos() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ( (java.time.Duration) to ).toNanos() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( java.time.Year.class.isAssignableFrom( numericClass ) ) {\n\t\t\tInteger fromValue \u003d from !\u003d null ? ( (java.time.Year) from ).getValue() : null;\n\t\t\tInteger toValue \u003d to !\u003d null ? ( (java.time.Year) to ).getValue() : null;\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( java.time.Instant.class.isAssignableFrom( numericClass ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ( (java.time.Instant) from ).toEpochMilli() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ( (java.time.Instant) to ).toEpochMilli() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\n\t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n\t}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 35,
      "functionName": "createNumericRangeQuery",
      "diff": "@@ -1,63 +1,61 @@\n \tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n \t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n \n \t\tClass\u003c?\u003e numericClass;\n \n \t\tif ( from !\u003d null ) {\n \t\t\tnumericClass \u003d from.getClass();\n \t\t}\n \t\telse if ( to !\u003d null ) {\n \t\t\tnumericClass \u003d to.getClass();\n \t\t}\n \t\telse {\n \t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n \t\t}\n \n \t\tif ( Double.class.isAssignableFrom( numericClass ) ) {\n \t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( Byte.class.isAssignableFrom( numericClass ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Byte) from ).intValue(), ( (Byte) to ).intValue(), includeLower, includeUpper );\n \t\t}\n \t\tif ( Short.class.isAssignableFrom( numericClass ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Short) from ).intValue(), ( (Short) to ).intValue(), includeLower, includeUpper );\n \t\t}\n \t\tif ( Long.class.isAssignableFrom( numericClass ) ) {\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( Integer.class.isAssignableFrom( numericClass ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( Float.class.isAssignableFrom( numericClass ) ) {\n \t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( Date.class.isAssignableFrom( numericClass ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n \t\tif ( Calendar.class.isAssignableFrom( numericClass ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n-\t\tif ( JavaTimeBridgeProvider.isActive() ) {\n-\t\t\tif ( java.time.Duration.class.isAssignableFrom( numericClass ) ) {\n-\t\t\t\tLong fromValue \u003d from !\u003d null ? ( (java.time.Duration) from ).toNanos() : null;\n-\t\t\t\tLong toValue \u003d to !\u003d null ? ( (java.time.Duration) to ).toNanos() : null;\n-\t\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n-\t\t\t}\n-\t\t\tif ( java.time.Year.class.isAssignableFrom( numericClass ) ) {\n-\t\t\t\tInteger fromValue \u003d from !\u003d null ? ( (java.time.Year) from ).getValue() : null;\n-\t\t\t\tInteger toValue \u003d to !\u003d null ? ( (java.time.Year) to ).getValue() : null;\n-\t\t\t\treturn NumericRangeQuery.newIntRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n-\t\t\t}\n-\t\t\tif ( java.time.Instant.class.isAssignableFrom( numericClass ) ) {\n-\t\t\t\tLong fromValue \u003d from !\u003d null ? ( (java.time.Instant) from ).toEpochMilli() : null;\n-\t\t\t\tLong toValue \u003d to !\u003d null ? ( (java.time.Instant) to ).toEpochMilli() : null;\n-\t\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n-\t\t\t}\n+\t\tif ( java.time.Duration.class.isAssignableFrom( numericClass ) ) {\n+\t\t\tLong fromValue \u003d from !\u003d null ? ( (java.time.Duration) from ).toNanos() : null;\n+\t\t\tLong toValue \u003d to !\u003d null ? ( (java.time.Duration) to ).toNanos() : null;\n+\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n+\t\t}\n+\t\tif ( java.time.Year.class.isAssignableFrom( numericClass ) ) {\n+\t\t\tInteger fromValue \u003d from !\u003d null ? ( (java.time.Year) from ).getValue() : null;\n+\t\t\tInteger toValue \u003d to !\u003d null ? ( (java.time.Year) to ).getValue() : null;\n+\t\t\treturn NumericRangeQuery.newIntRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n+\t\t}\n+\t\tif ( java.time.Instant.class.isAssignableFrom( numericClass ) ) {\n+\t\t\tLong fromValue \u003d from !\u003d null ? ( (java.time.Instant) from ).toEpochMilli() : null;\n+\t\t\tLong toValue \u003d to !\u003d null ? ( (java.time.Instant) to ).toEpochMilli() : null;\n+\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n \n \t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4c0415c1f11b7e26fdc4dc95f4b822bf9e983139": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-1870 Fix isAssignableFrom invokation in NumericFieldUtils\n",
      "commitDate": "2015-09-11, 12:05 p.m.",
      "commitName": "4c0415c1f11b7e26fdc4dc95f4b822bf9e983139",
      "commitAuthor": "Davide D\u0027Alto",
      "commitDateOld": "2015-09-11, 10:59 a.m.",
      "commitNameOld": "a6ae926eea1ff68d4f0a7058863cb3cb0c9c36af",
      "commitAuthorOld": "Davide D\u0027Alto",
      "daysBetweenCommits": 0.05,
      "commitsBetweenForRepo": 2,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n\t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n\n\t\tClass\u003c?\u003e numericClass;\n\n\t\tif ( from !\u003d null ) {\n\t\t\tnumericClass \u003d from.getClass();\n\t\t}\n\t\telse if ( to !\u003d null ) {\n\t\t\tnumericClass \u003d to.getClass();\n\t\t}\n\t\telse {\n\t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n\t\t}\n\n\t\tif ( Double.class.isAssignableFrom( numericClass ) ) {\n\t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( Byte.class.isAssignableFrom( numericClass ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Byte) from ).intValue(), ( (Byte) to ).intValue(), includeLower, includeUpper );\n\t\t}\n\t\tif ( Short.class.isAssignableFrom( numericClass ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Short) from ).intValue(), ( (Short) to ).intValue(), includeLower, includeUpper );\n\t\t}\n\t\tif ( Long.class.isAssignableFrom( numericClass ) ) {\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( Integer.class.isAssignableFrom( numericClass ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( Float.class.isAssignableFrom( numericClass ) ) {\n\t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( Date.class.isAssignableFrom( numericClass ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( Calendar.class.isAssignableFrom( numericClass ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( JavaTimeBridgeProvider.isActive() ) {\n\t\t\tif ( java.time.Duration.class.isAssignableFrom( numericClass ) ) {\n\t\t\t\tLong fromValue \u003d from !\u003d null ? ( (java.time.Duration) from ).toNanos() : null;\n\t\t\t\tLong toValue \u003d to !\u003d null ? ( (java.time.Duration) to ).toNanos() : null;\n\t\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t\t}\n\t\t\tif ( java.time.Year.class.isAssignableFrom( numericClass ) ) {\n\t\t\t\tInteger fromValue \u003d from !\u003d null ? ( (java.time.Year) from ).getValue() : null;\n\t\t\t\tInteger toValue \u003d to !\u003d null ? ( (java.time.Year) to ).getValue() : null;\n\t\t\t\treturn NumericRangeQuery.newIntRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t\t}\n\t\t\tif ( java.time.Instant.class.isAssignableFrom( numericClass ) ) {\n\t\t\t\tLong fromValue \u003d from !\u003d null ? ( (java.time.Instant) from ).toEpochMilli() : null;\n\t\t\t\tLong toValue \u003d to !\u003d null ? ( (java.time.Instant) to ).toEpochMilli() : null;\n\t\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t\t}\n\t\t}\n\n\t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n\t}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 32,
      "functionName": "createNumericRangeQuery",
      "diff": "@@ -1,63 +1,63 @@\n \tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n \t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n \n \t\tClass\u003c?\u003e numericClass;\n \n \t\tif ( from !\u003d null ) {\n \t\t\tnumericClass \u003d from.getClass();\n \t\t}\n \t\telse if ( to !\u003d null ) {\n \t\t\tnumericClass \u003d to.getClass();\n \t\t}\n \t\telse {\n \t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n \t\t}\n \n-\t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n+\t\tif ( Double.class.isAssignableFrom( numericClass ) ) {\n \t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n \t\t}\n-\t\tif ( numericClass.isAssignableFrom( Byte.class ) ) {\n+\t\tif ( Byte.class.isAssignableFrom( numericClass ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Byte) from ).intValue(), ( (Byte) to ).intValue(), includeLower, includeUpper );\n \t\t}\n-\t\tif ( numericClass.isAssignableFrom( Short.class ) ) {\n+\t\tif ( Short.class.isAssignableFrom( numericClass ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Short) from ).intValue(), ( (Short) to ).intValue(), includeLower, includeUpper );\n \t\t}\n-\t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n+\t\tif ( Long.class.isAssignableFrom( numericClass ) ) {\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n \t\t}\n-\t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n+\t\tif ( Integer.class.isAssignableFrom( numericClass ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n \t\t}\n-\t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n+\t\tif ( Float.class.isAssignableFrom( numericClass ) ) {\n \t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n \t\t}\n-\t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n+\t\tif ( Date.class.isAssignableFrom( numericClass ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n \t\tif ( Calendar.class.isAssignableFrom( numericClass ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n \t\tif ( JavaTimeBridgeProvider.isActive() ) {\n-\t\t\tif ( numericClass.isAssignableFrom( java.time.Duration.class ) ) {\n+\t\t\tif ( java.time.Duration.class.isAssignableFrom( numericClass ) ) {\n \t\t\t\tLong fromValue \u003d from !\u003d null ? ( (java.time.Duration) from ).toNanos() : null;\n \t\t\t\tLong toValue \u003d to !\u003d null ? ( (java.time.Duration) to ).toNanos() : null;\n \t\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t\t}\n-\t\t\tif ( numericClass.isAssignableFrom( java.time.Year.class ) ) {\n+\t\t\tif ( java.time.Year.class.isAssignableFrom( numericClass ) ) {\n \t\t\t\tInteger fromValue \u003d from !\u003d null ? ( (java.time.Year) from ).getValue() : null;\n \t\t\t\tInteger toValue \u003d to !\u003d null ? ( (java.time.Year) to ).getValue() : null;\n \t\t\t\treturn NumericRangeQuery.newIntRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t\t}\n-\t\t\tif ( numericClass.isAssignableFrom( java.time.Instant.class ) ) {\n+\t\t\tif ( java.time.Instant.class.isAssignableFrom( numericClass ) ) {\n \t\t\t\tLong fromValue \u003d from !\u003d null ? ( (java.time.Instant) from ).toEpochMilli() : null;\n \t\t\t\tLong toValue \u003d to !\u003d null ? ( (java.time.Instant) to ).toEpochMilli() : null;\n \t\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t\t}\n \t\t}\n \n \t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a6ae926eea1ff68d4f0a7058863cb3cb0c9c36af": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-1870 Make it possible to use Date and Calendar with the DSL\n",
      "commitDate": "2015-09-11, 10:59 a.m.",
      "commitName": "a6ae926eea1ff68d4f0a7058863cb3cb0c9c36af",
      "commitAuthor": "Davide D\u0027Alto",
      "commitDateOld": "2015-09-10, 12:34 p.m.",
      "commitNameOld": "23b523bdc8847b9f40a69e50b8acb09e4e464eec",
      "commitAuthorOld": "Davide D\u0027Alto",
      "daysBetweenCommits": 0.93,
      "commitsBetweenForRepo": 5,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n\t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n\n\t\tClass\u003c?\u003e numericClass;\n\n\t\tif ( from !\u003d null ) {\n\t\t\tnumericClass \u003d from.getClass();\n\t\t}\n\t\telse if ( to !\u003d null ) {\n\t\t\tnumericClass \u003d to.getClass();\n\t\t}\n\t\telse {\n\t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n\t\t}\n\n\t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n\t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Byte.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Byte) from ).intValue(), ( (Byte) to ).intValue(), includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Short.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Short) from ).intValue(), ( (Short) to ).intValue(), includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n\t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( Calendar.class.isAssignableFrom( numericClass ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( JavaTimeBridgeProvider.isActive() ) {\n\t\t\tif ( numericClass.isAssignableFrom( java.time.Duration.class ) ) {\n\t\t\t\tLong fromValue \u003d from !\u003d null ? ( (java.time.Duration) from ).toNanos() : null;\n\t\t\t\tLong toValue \u003d to !\u003d null ? ( (java.time.Duration) to ).toNanos() : null;\n\t\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t\t}\n\t\t\tif ( numericClass.isAssignableFrom( java.time.Year.class ) ) {\n\t\t\t\tInteger fromValue \u003d from !\u003d null ? ( (java.time.Year) from ).getValue() : null;\n\t\t\t\tInteger toValue \u003d to !\u003d null ? ( (java.time.Year) to ).getValue() : null;\n\t\t\t\treturn NumericRangeQuery.newIntRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t\t}\n\t\t\tif ( numericClass.isAssignableFrom( java.time.Instant.class ) ) {\n\t\t\t\tLong fromValue \u003d from !\u003d null ? ( (java.time.Instant) from ).toEpochMilli() : null;\n\t\t\t\tLong toValue \u003d to !\u003d null ? ( (java.time.Instant) to ).toEpochMilli() : null;\n\t\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t\t}\n\t\t}\n\n\t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n\t}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 32,
      "functionName": "createNumericRangeQuery",
      "diff": "@@ -1,63 +1,63 @@\n \tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n \t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n \n \t\tClass\u003c?\u003e numericClass;\n \n \t\tif ( from !\u003d null ) {\n \t\t\tnumericClass \u003d from.getClass();\n \t\t}\n \t\telse if ( to !\u003d null ) {\n \t\t\tnumericClass \u003d to.getClass();\n \t\t}\n \t\telse {\n \t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n \t\t}\n \n \t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n \t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Byte.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Byte) from ).intValue(), ( (Byte) to ).intValue(), includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Short.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Short) from ).intValue(), ( (Short) to ).intValue(), includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n \t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n-\t\tif ( numericClass.isAssignableFrom( Calendar.class ) ) {\n+\t\tif ( Calendar.class.isAssignableFrom( numericClass ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n \t\tif ( JavaTimeBridgeProvider.isActive() ) {\n \t\t\tif ( numericClass.isAssignableFrom( java.time.Duration.class ) ) {\n \t\t\t\tLong fromValue \u003d from !\u003d null ? ( (java.time.Duration) from ).toNanos() : null;\n \t\t\t\tLong toValue \u003d to !\u003d null ? ( (java.time.Duration) to ).toNanos() : null;\n \t\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t\t}\n \t\t\tif ( numericClass.isAssignableFrom( java.time.Year.class ) ) {\n \t\t\t\tInteger fromValue \u003d from !\u003d null ? ( (java.time.Year) from ).getValue() : null;\n \t\t\t\tInteger toValue \u003d to !\u003d null ? ( (java.time.Year) to ).getValue() : null;\n \t\t\t\treturn NumericRangeQuery.newIntRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t\t}\n \t\t\tif ( numericClass.isAssignableFrom( java.time.Instant.class ) ) {\n \t\t\t\tLong fromValue \u003d from !\u003d null ? ( (java.time.Instant) from ).toEpochMilli() : null;\n \t\t\t\tLong toValue \u003d to !\u003d null ? ( (java.time.Instant) to ).toEpochMilli() : null;\n \t\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t\t}\n \t\t}\n \n \t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "23b523bdc8847b9f40a69e50b8acb09e4e464eec": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-1997 Avoid checking for Java8 time classes multiple times\n",
      "commitDate": "2015-09-10, 12:34 p.m.",
      "commitName": "23b523bdc8847b9f40a69e50b8acb09e4e464eec",
      "commitAuthor": "Davide D\u0027Alto",
      "commitDateOld": "2015-09-08, 10:28 a.m.",
      "commitNameOld": "1f2600dedf2f75379ceb45e9f99103814f902c28",
      "commitAuthorOld": "Davide D\u0027Alto",
      "daysBetweenCommits": 2.09,
      "commitsBetweenForRepo": 15,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n\t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n\n\t\tClass\u003c?\u003e numericClass;\n\n\t\tif ( from !\u003d null ) {\n\t\t\tnumericClass \u003d from.getClass();\n\t\t}\n\t\telse if ( to !\u003d null ) {\n\t\t\tnumericClass \u003d to.getClass();\n\t\t}\n\t\telse {\n\t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n\t\t}\n\n\t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n\t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Byte.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Byte) from ).intValue(), ( (Byte) to ).intValue(), includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Short.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Short) from ).intValue(), ( (Short) to ).intValue(), includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n\t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Calendar.class ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( JavaTimeBridgeProvider.isActive() ) {\n\t\t\tif ( numericClass.isAssignableFrom( java.time.Duration.class ) ) {\n\t\t\t\tLong fromValue \u003d from !\u003d null ? ( (java.time.Duration) from ).toNanos() : null;\n\t\t\t\tLong toValue \u003d to !\u003d null ? ( (java.time.Duration) to ).toNanos() : null;\n\t\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t\t}\n\t\t\tif ( numericClass.isAssignableFrom( java.time.Year.class ) ) {\n\t\t\t\tInteger fromValue \u003d from !\u003d null ? ( (java.time.Year) from ).getValue() : null;\n\t\t\t\tInteger toValue \u003d to !\u003d null ? ( (java.time.Year) to ).getValue() : null;\n\t\t\t\treturn NumericRangeQuery.newIntRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t\t}\n\t\t\tif ( numericClass.isAssignableFrom( java.time.Instant.class ) ) {\n\t\t\t\tLong fromValue \u003d from !\u003d null ? ( (java.time.Instant) from ).toEpochMilli() : null;\n\t\t\t\tLong toValue \u003d to !\u003d null ? ( (java.time.Instant) to ).toEpochMilli() : null;\n\t\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t\t}\n\t\t}\n\n\t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n\t}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 32,
      "functionName": "createNumericRangeQuery",
      "diff": "@@ -1,61 +1,63 @@\n \tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n \t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n \n \t\tClass\u003c?\u003e numericClass;\n \n \t\tif ( from !\u003d null ) {\n \t\t\tnumericClass \u003d from.getClass();\n \t\t}\n \t\telse if ( to !\u003d null ) {\n \t\t\tnumericClass \u003d to.getClass();\n \t\t}\n \t\telse {\n \t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n \t\t}\n \n \t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n \t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Byte.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Byte) from ).intValue(), ( (Byte) to ).intValue(), includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Short.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Short) from ).intValue(), ( (Short) to ).intValue(), includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n \t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Calendar.class ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n-\t\tif ( isAssignableFrom( numericClass, JAVA_TIME_DURATION ) ) {\n-\t\t\tLong fromValue \u003d from !\u003d null ? ( (Duration) from ).toNanos() : null;\n-\t\t\tLong toValue \u003d to !\u003d null ? ( (Duration) to ).toNanos() : null;\n-\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n-\t\t}\n-\t\tif ( isAssignableFrom( numericClass, JAVA_TIME_YEAR ) ) {\n-\t\t\tInteger fromValue \u003d from !\u003d null ? ( (Year) from ).getValue() : null;\n-\t\t\tInteger toValue \u003d to !\u003d null ? ( (Year) to ).getValue() : null;\n-\t\t\treturn NumericRangeQuery.newIntRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n-\t\t}\n-\t\tif ( isAssignableFrom( numericClass, JAVA_TIME_INSTANT ) ) {\n-\t\t\tLong fromValue \u003d from !\u003d null ? ( (Instant) from ).toEpochMilli() : null;\n-\t\t\tLong toValue \u003d to !\u003d null ? ( (Instant) to ).toEpochMilli() : null;\n-\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n+\t\tif ( JavaTimeBridgeProvider.isActive() ) {\n+\t\t\tif ( numericClass.isAssignableFrom( java.time.Duration.class ) ) {\n+\t\t\t\tLong fromValue \u003d from !\u003d null ? ( (java.time.Duration) from ).toNanos() : null;\n+\t\t\t\tLong toValue \u003d to !\u003d null ? ( (java.time.Duration) to ).toNanos() : null;\n+\t\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n+\t\t\t}\n+\t\t\tif ( numericClass.isAssignableFrom( java.time.Year.class ) ) {\n+\t\t\t\tInteger fromValue \u003d from !\u003d null ? ( (java.time.Year) from ).getValue() : null;\n+\t\t\t\tInteger toValue \u003d to !\u003d null ? ( (java.time.Year) to ).getValue() : null;\n+\t\t\t\treturn NumericRangeQuery.newIntRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n+\t\t\t}\n+\t\t\tif ( numericClass.isAssignableFrom( java.time.Instant.class ) ) {\n+\t\t\t\tLong fromValue \u003d from !\u003d null ? ( (java.time.Instant) from ).toEpochMilli() : null;\n+\t\t\t\tLong toValue \u003d to !\u003d null ? ( (java.time.Instant) to ).toEpochMilli() : null;\n+\t\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n+\t\t\t}\n \t\t}\n \n \t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "1f2600dedf2f75379ceb45e9f99103814f902c28": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-1942 Make Instant a numeric field value\n",
      "commitDate": "2015-09-08, 10:28 a.m.",
      "commitName": "1f2600dedf2f75379ceb45e9f99103814f902c28",
      "commitAuthor": "Davide D\u0027Alto",
      "commitDateOld": "2015-09-08, 10:28 a.m.",
      "commitNameOld": "3d93af0a91221be6d3e3b145061eec7c7a833bde",
      "commitAuthorOld": "Davide D\u0027Alto",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n\t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n\n\t\tClass\u003c?\u003e numericClass;\n\n\t\tif ( from !\u003d null ) {\n\t\t\tnumericClass \u003d from.getClass();\n\t\t}\n\t\telse if ( to !\u003d null ) {\n\t\t\tnumericClass \u003d to.getClass();\n\t\t}\n\t\telse {\n\t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n\t\t}\n\n\t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n\t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Byte.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Byte) from ).intValue(), ( (Byte) to ).intValue(), includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Short.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Short) from ).intValue(), ( (Short) to ).intValue(), includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n\t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Calendar.class ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( isAssignableFrom( numericClass, JAVA_TIME_DURATION ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ( (Duration) from ).toNanos() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ( (Duration) to ).toNanos() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( isAssignableFrom( numericClass, JAVA_TIME_YEAR ) ) {\n\t\t\tInteger fromValue \u003d from !\u003d null ? ( (Year) from ).getValue() : null;\n\t\t\tInteger toValue \u003d to !\u003d null ? ( (Year) to ).getValue() : null;\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( isAssignableFrom( numericClass, JAVA_TIME_INSTANT ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ( (Instant) from ).toEpochMilli() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ( (Instant) to ).toEpochMilli() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\n\t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n\t}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 38,
      "functionName": "createNumericRangeQuery",
      "diff": "@@ -1,56 +1,61 @@\n \tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n \t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n \n \t\tClass\u003c?\u003e numericClass;\n \n \t\tif ( from !\u003d null ) {\n \t\t\tnumericClass \u003d from.getClass();\n \t\t}\n \t\telse if ( to !\u003d null ) {\n \t\t\tnumericClass \u003d to.getClass();\n \t\t}\n \t\telse {\n \t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n \t\t}\n \n \t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n \t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Byte.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Byte) from ).intValue(), ( (Byte) to ).intValue(), includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Short.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Short) from ).intValue(), ( (Short) to ).intValue(), includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n \t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Calendar.class ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n \t\tif ( isAssignableFrom( numericClass, JAVA_TIME_DURATION ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ( (Duration) from ).toNanos() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ( (Duration) to ).toNanos() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n \t\tif ( isAssignableFrom( numericClass, JAVA_TIME_YEAR ) ) {\n \t\t\tInteger fromValue \u003d from !\u003d null ? ( (Year) from ).getValue() : null;\n \t\t\tInteger toValue \u003d to !\u003d null ? ( (Year) to ).getValue() : null;\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n+\t\tif ( isAssignableFrom( numericClass, JAVA_TIME_INSTANT ) ) {\n+\t\t\tLong fromValue \u003d from !\u003d null ? ( (Instant) from ).toEpochMilli() : null;\n+\t\t\tLong toValue \u003d to !\u003d null ? ( (Instant) to ).toEpochMilli() : null;\n+\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n+\t\t}\n \n \t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "3d93af0a91221be6d3e3b145061eec7c7a833bde": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-1947 Make Duration and Year numeric fields\n",
      "commitDate": "2015-09-08, 10:28 a.m.",
      "commitName": "3d93af0a91221be6d3e3b145061eec7c7a833bde",
      "commitAuthor": "Davide D\u0027Alto",
      "commitDateOld": "2015-01-22, 1:24 p.m.",
      "commitNameOld": "b52a248717a2f3aaa873fcb577c558172574baa7",
      "commitAuthorOld": "Gunnar Morling",
      "daysBetweenCommits": 228.84,
      "commitsBetweenForRepo": 470,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n\t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n\n\t\tClass\u003c?\u003e numericClass;\n\n\t\tif ( from !\u003d null ) {\n\t\t\tnumericClass \u003d from.getClass();\n\t\t}\n\t\telse if ( to !\u003d null ) {\n\t\t\tnumericClass \u003d to.getClass();\n\t\t}\n\t\telse {\n\t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n\t\t}\n\n\t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n\t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Byte.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Byte) from ).intValue(), ( (Byte) to ).intValue(), includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Short.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Short) from ).intValue(), ( (Short) to ).intValue(), includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n\t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Calendar.class ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( isAssignableFrom( numericClass, JAVA_TIME_DURATION ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ( (Duration) from ).toNanos() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ( (Duration) to ).toNanos() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( isAssignableFrom( numericClass, JAVA_TIME_YEAR ) ) {\n\t\t\tInteger fromValue \u003d from !\u003d null ? ( (Year) from ).getValue() : null;\n\t\t\tInteger toValue \u003d to !\u003d null ? ( (Year) to ).getValue() : null;\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\n\t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n\t}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 36,
      "functionName": "createNumericRangeQuery",
      "diff": "@@ -1,46 +1,56 @@\n \tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n \t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n \n \t\tClass\u003c?\u003e numericClass;\n \n \t\tif ( from !\u003d null ) {\n \t\t\tnumericClass \u003d from.getClass();\n \t\t}\n \t\telse if ( to !\u003d null ) {\n \t\t\tnumericClass \u003d to.getClass();\n \t\t}\n \t\telse {\n \t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n \t\t}\n \n \t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n \t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Byte.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Byte) from ).intValue(), ( (Byte) to ).intValue(), includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Short.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Short) from ).intValue(), ( (Short) to ).intValue(), includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n \t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Calendar.class ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n+\t\tif ( isAssignableFrom( numericClass, JAVA_TIME_DURATION ) ) {\n+\t\t\tLong fromValue \u003d from !\u003d null ? ( (Duration) from ).toNanos() : null;\n+\t\t\tLong toValue \u003d to !\u003d null ? ( (Duration) to ).toNanos() : null;\n+\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n+\t\t}\n+\t\tif ( isAssignableFrom( numericClass, JAVA_TIME_YEAR ) ) {\n+\t\t\tInteger fromValue \u003d from !\u003d null ? ( (Year) from ).getValue() : null;\n+\t\t\tInteger toValue \u003d to !\u003d null ? ( (Year) to ).getValue() : null;\n+\t\t\treturn NumericRangeQuery.newIntRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n+\t\t}\n \n \t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "b52a248717a2f3aaa873fcb577c558172574baa7": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-997 Adding byte numeric bridge\n",
      "commitDate": "2015-01-22, 1:24 p.m.",
      "commitName": "b52a248717a2f3aaa873fcb577c558172574baa7",
      "commitAuthor": "Gunnar Morling",
      "commitDateOld": "2015-01-22, 1:24 p.m.",
      "commitNameOld": "bb3f94df96e6e487ba231e4e201064cbb850aa02",
      "commitAuthorOld": "Gunnar Morling",
      "daysBetweenCommits": 0.0,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n\t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n\n\t\tClass\u003c?\u003e numericClass;\n\n\t\tif ( from !\u003d null ) {\n\t\t\tnumericClass \u003d from.getClass();\n\t\t}\n\t\telse if ( to !\u003d null ) {\n\t\t\tnumericClass \u003d to.getClass();\n\t\t}\n\t\telse {\n\t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n\t\t}\n\n\t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n\t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Byte.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Byte) from ).intValue(), ( (Byte) to ).intValue(), includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Short.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Short) from ).intValue(), ( (Short) to ).intValue(), includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n\t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Calendar.class ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\n\t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n\t}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 31,
      "functionName": "createNumericRangeQuery",
      "diff": "@@ -1,43 +1,46 @@\n \tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n \t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n \n \t\tClass\u003c?\u003e numericClass;\n \n \t\tif ( from !\u003d null ) {\n \t\t\tnumericClass \u003d from.getClass();\n \t\t}\n \t\telse if ( to !\u003d null ) {\n \t\t\tnumericClass \u003d to.getClass();\n \t\t}\n \t\telse {\n \t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n \t\t}\n \n \t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n \t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n \t\t}\n+\t\tif ( numericClass.isAssignableFrom( Byte.class ) ) {\n+\t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Byte) from ).intValue(), ( (Byte) to ).intValue(), includeLower, includeUpper );\n+\t\t}\n \t\tif ( numericClass.isAssignableFrom( Short.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Short) from ).intValue(), ( (Short) to ).intValue(), includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n \t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Calendar.class ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n \n \t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "bb3f94df96e6e487ba231e4e201064cbb850aa02": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-997 Adding short numeric bridge\n",
      "commitDate": "2015-01-22, 1:24 p.m.",
      "commitName": "bb3f94df96e6e487ba231e4e201064cbb850aa02",
      "commitAuthor": "Gunnar Morling",
      "commitDateOld": "2014-12-15, 12:19 p.m.",
      "commitNameOld": "428fae5def27fc3724bfbd7558db241e2aa8efdb",
      "commitAuthorOld": "Sanne Grinovero",
      "daysBetweenCommits": 38.05,
      "commitsBetweenForRepo": 20,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n\t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n\n\t\tClass\u003c?\u003e numericClass;\n\n\t\tif ( from !\u003d null ) {\n\t\t\tnumericClass \u003d from.getClass();\n\t\t}\n\t\telse if ( to !\u003d null ) {\n\t\t\tnumericClass \u003d to.getClass();\n\t\t}\n\t\telse {\n\t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n\t\t}\n\n\t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n\t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Short.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Short) from ).intValue(), ( (Short) to ).intValue(), includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n\t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Calendar.class ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\n\t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n\t}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 31,
      "functionName": "createNumericRangeQuery",
      "diff": "@@ -1,40 +1,43 @@\n \tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n \t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n \n \t\tClass\u003c?\u003e numericClass;\n \n \t\tif ( from !\u003d null ) {\n \t\t\tnumericClass \u003d from.getClass();\n \t\t}\n \t\telse if ( to !\u003d null ) {\n \t\t\tnumericClass \u003d to.getClass();\n \t\t}\n \t\telse {\n \t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n \t\t}\n \n \t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n \t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n \t\t}\n+\t\tif ( numericClass.isAssignableFrom( Short.class ) ) {\n+\t\t\treturn NumericRangeQuery.newIntRange( fieldName, ( (Short) from ).intValue(), ( (Short) to ).intValue(), includeLower, includeUpper );\n+\t\t}\n \t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n \t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Calendar.class ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n \n \t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "428fae5def27fc3724bfbd7558db241e2aa8efdb": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-1758 Fallback strategy for NumericRange queries applied to unknown fields should pick the NumericRange for certain types\n",
      "commitDate": "2014-12-15, 12:19 p.m.",
      "commitName": "428fae5def27fc3724bfbd7558db241e2aa8efdb",
      "commitAuthor": "Sanne Grinovero",
      "commitDateOld": "2014-12-07, 4:57 p.m.",
      "commitNameOld": "a51e16bca141c7be80f8e6ead072d1313e21b34b",
      "commitAuthorOld": "Hardy Ferentschik",
      "daysBetweenCommits": 7.81,
      "commitsBetweenForRepo": 30,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n\t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n\n\t\tClass\u003c?\u003e numericClass;\n\n\t\tif ( from !\u003d null ) {\n\t\t\tnumericClass \u003d from.getClass();\n\t\t}\n\t\telse if ( to !\u003d null ) {\n\t\t\tnumericClass \u003d to.getClass();\n\t\t}\n\t\telse {\n\t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n\t\t}\n\n\t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n\t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n\t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Calendar.class ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\n\t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n\t}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 32,
      "functionName": "createNumericRangeQuery",
      "diff": "@@ -1,45 +1,40 @@\n \tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n \t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n \n \t\tClass\u003c?\u003e numericClass;\n \n \t\tif ( from !\u003d null ) {\n \t\t\tnumericClass \u003d from.getClass();\n \t\t}\n \t\telse if ( to !\u003d null ) {\n \t\t\tnumericClass \u003d to.getClass();\n \t\t}\n \t\telse {\n \t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n \t\t}\n \n \t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n \t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n \t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n-\t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n-\t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n-\t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n-\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n-\t\t}\n \t\tif ( numericClass.isAssignableFrom( Calendar.class ) ) {\n \t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n \t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n \t\t}\n \n \t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "a51e16bca141c7be80f8e6ead072d1313e21b34b": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-968 Indexing Dates and Calendar instances numerically\n\nIntroducing a new option to @DateBridge and @CalendarBridge to determine encoding type\n",
      "commitDate": "2014-12-07, 4:57 p.m.",
      "commitName": "a51e16bca141c7be80f8e6ead072d1313e21b34b",
      "commitAuthor": "Hardy Ferentschik",
      "commitDateOld": "2014-12-04, 3:37 p.m.",
      "commitNameOld": "ab8faa8701ffd68414db07a18cc9dcfd30b46874",
      "commitAuthorOld": "Hardy Ferentschik",
      "daysBetweenCommits": 3.06,
      "commitsBetweenForRepo": 8,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n\t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n\n\t\tClass\u003c?\u003e numericClass;\n\n\t\tif ( from !\u003d null ) {\n\t\t\tnumericClass \u003d from.getClass();\n\t\t}\n\t\telse if ( to !\u003d null ) {\n\t\t\tnumericClass \u003d to.getClass();\n\t\t}\n\t\telse {\n\t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n\t\t}\n\n\t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n\t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n\t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Calendar.class ) ) {\n\t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n\t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n\t\t}\n\n\t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n\t}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 32,
      "functionName": "createNumericRangeQuery",
      "diff": "@@ -1,34 +1,45 @@\n \tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n \t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n \n \t\tClass\u003c?\u003e numericClass;\n \n \t\tif ( from !\u003d null ) {\n \t\t\tnumericClass \u003d from.getClass();\n \t\t}\n \t\telse if ( to !\u003d null ) {\n \t\t\tnumericClass \u003d to.getClass();\n \t\t}\n \t\telse {\n-\t\t\tthrow new SearchException(\n-\t\t\t\t\"Cannot create numeric range query for field \" + fieldName + \", since from and to values are \" +\n-\t\t\t\t\t\t\"null\");\n+\t\t\tthrow log.rangeQueryWithNullToAndFromValue( fieldName );\n \t\t}\n \n \t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n \t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n \t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n \t\t}\n-\t\t// TODO: check for type before in the mapping\n-\t\tthrow new SearchException(\n-\t\t\t\t\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" +\n-\t\t\t\t\t\t\"(int, long, short or double) \");\n+\t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n+\t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n+\t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n+\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n+\t\t}\n+\t\tif ( numericClass.isAssignableFrom( Date.class ) ) {\n+\t\t\tLong fromValue \u003d from !\u003d null ? ((Date) from).getTime() : null;\n+\t\t\tLong toValue \u003d to !\u003d null ? ((Date) to).getTime() : null;\n+\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n+\t\t}\n+\t\tif ( numericClass.isAssignableFrom( Calendar.class ) ) {\n+\t\t\tLong fromValue \u003d from !\u003d null ? ((Calendar) from).getTime().getTime() : null;\n+\t\t\tLong toValue \u003d to !\u003d null ? ((Calendar) to).getTime().getTime() : null;\n+\t\t\treturn NumericRangeQuery.newLongRange( fieldName, fromValue, toValue, includeLower, includeUpper );\n+\t\t}\n+\n+\t\tthrow log.numericRangeQueryWithNonNumericToAndFromValues( fieldName );\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ab8faa8701ffd68414db07a18cc9dcfd30b46874": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-763 Cleanup. Fixed formatting, javadocs and unnecessay value boxing\n",
      "commitDate": "2014-12-04, 3:37 p.m.",
      "commitName": "ab8faa8701ffd68414db07a18cc9dcfd30b46874",
      "commitAuthor": "Hardy Ferentschik",
      "commitDateOld": "2014-05-15, 5:54 a.m.",
      "commitNameOld": "5a9396f82246f74a76d3fea15d712711662f11ec",
      "commitAuthorOld": "Hardy Ferentschik",
      "daysBetweenCommits": 203.45,
      "commitsBetweenForRepo": 213,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n\t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n\n\t\tClass\u003c?\u003e numericClass;\n\n\t\tif ( from !\u003d null ) {\n\t\t\tnumericClass \u003d from.getClass();\n\t\t}\n\t\telse if ( to !\u003d null ) {\n\t\t\tnumericClass \u003d to.getClass();\n\t\t}\n\t\telse {\n\t\t\tthrow new SearchException(\n\t\t\t\t\"Cannot create numeric range query for field \" + fieldName + \", since from and to values are \" +\n\t\t\t\t\t\t\"null\");\n\t\t}\n\n\t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n\t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n\t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n\t\t}\n\t\t// TODO: check for type before in the mapping\n\t\tthrow new SearchException(\n\t\t\t\t\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" +\n\t\t\t\t\t\t\"(int, long, short or double) \");\n\t}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 25,
      "functionName": "createNumericRangeQuery",
      "diff": "@@ -1,34 +1,34 @@\n \tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n \t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n \n-\t\tClass numericClass;\n+\t\tClass\u003c?\u003e numericClass;\n \n \t\tif ( from !\u003d null ) {\n \t\t\tnumericClass \u003d from.getClass();\n \t\t}\n \t\telse if ( to !\u003d null ) {\n \t\t\tnumericClass \u003d to.getClass();\n \t\t}\n \t\telse {\n \t\t\tthrow new SearchException(\n \t\t\t\t\"Cannot create numeric range query for field \" + fieldName + \", since from and to values are \" +\n \t\t\t\t\t\t\"null\");\n \t\t}\n \n \t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n \t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n \t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n \t\t}\n \t\t// TODO: check for type before in the mapping\n \t\tthrow new SearchException(\n \t\t\t\t\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" +\n-\t\t\t\t\t\t\"(int,long, short or double) \");\n+\t\t\t\t\t\t\"(int, long, short or double) \");\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "354f2cadec6dee7d4dde2250e13f468e2d93cd27": {
      "type": "Yfilerename",
      "commitMessage": "HSEARCH-1310 Dropping the hibernate-search directory prefix, renaming hibernate-search into legacy\n",
      "commitDate": "2013-04-23, 1:02 p.m.",
      "commitName": "354f2cadec6dee7d4dde2250e13f468e2d93cd27",
      "commitAuthor": "Hardy Ferentschik",
      "commitDateOld": "2013-04-23, 9:27 a.m.",
      "commitNameOld": "29a168b99657e8cc302bbb487a67a4ea3856c3a3",
      "commitAuthorOld": "Sanne Grinovero",
      "daysBetweenCommits": 0.15,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n\t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n\n\t\tClass numericClass;\n\n\t\tif ( from !\u003d null ) {\n\t\t\tnumericClass \u003d from.getClass();\n\t\t}\n\t\telse if ( to !\u003d null ) {\n\t\t\tnumericClass \u003d to.getClass();\n\t\t}\n\t\telse {\n\t\t\tthrow new SearchException(\n\t\t\t\t\"Cannot create numeric range query for field \" + fieldName + \", since from and to values are \" +\n\t\t\t\t\t\t\"null\");\n\t\t}\n\n\t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n\t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n\t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n\t\t}\n\t\t// TODO: check for type before in the mapping\n\t\tthrow new SearchException(\n\t\t\t\t\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" +\n\t\t\t\t\t\t\"(int,long, short or double) \");\n\t}",
      "path": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 35,
      "functionName": "createNumericRangeQuery",
      "diff": "",
      "extendedDetails": {
        "oldPath": "hibernate-search-engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
        "newPath": "engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java"
      }
    },
    "02b8eb4f6017e7fb44bee6013d7f8bf1ae23a7b1": {
      "type": "Yfilerename",
      "commitMessage": "HSEARCH-677 renaming directory hibernate-search to hibernate-search-engine\n",
      "commitDate": "2011-09-27, 6:03 p.m.",
      "commitName": "02b8eb4f6017e7fb44bee6013d7f8bf1ae23a7b1",
      "commitAuthor": "Sanne Grinovero",
      "commitDateOld": "2011-09-27, 1:39 p.m.",
      "commitNameOld": "7505d6fbbf06c479d98555dc237eaa62eb83c4a2",
      "commitAuthorOld": "Sanne Grinovero",
      "daysBetweenCommits": 0.18,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n\t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n\n\t\tClass numericClass;\n\n\t\tif ( from !\u003d null ) {\n\t\t\tnumericClass \u003d from.getClass();\n\t\t}\n\t\telse if ( to !\u003d null ) {\n\t\t\tnumericClass \u003d to.getClass();\n\t\t}\n\t\telse {\n\t\t\tthrow new SearchException(\n\t\t\t\t\"Cannot create numeric range query for field \" + fieldName + \", since from and to values are \" +\n\t\t\t\t\t\t\"null\");\n\t\t}\n\n\t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n\t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n\t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n\t\t}\n\t\t// TODO: check for type before in the mapping\n\t\tthrow new SearchException(\n\t\t\t\t\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" +\n\t\t\t\t\t\t\"(int,long, short or double) \");\n\t}",
      "path": "hibernate-search-engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 15,
      "functionName": "createNumericRangeQuery",
      "diff": "",
      "extendedDetails": {
        "oldPath": "hibernate-search/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
        "newPath": "hibernate-search-engine/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java"
      }
    },
    "36fc8ecc219c7c843ca2359ee54acef23d10ec3b": {
      "type": "Ybodychange",
      "commitMessage": "HSEARCH-744 Fix usage of range query while searching for values below a given boundary\n",
      "commitDate": "2011-07-10, 12:16 p.m.",
      "commitName": "36fc8ecc219c7c843ca2359ee54acef23d10ec3b",
      "commitAuthor": "Mathieu Perez",
      "commitDateOld": "2011-07-04, 10:44 a.m.",
      "commitNameOld": "f957df8e5d4706c6efe9296eb81fe1eeb92a1fd8",
      "commitAuthorOld": "Emmanuel Bernard",
      "daysBetweenCommits": 6.06,
      "commitsBetweenForRepo": 49,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n\t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n\n\t\tClass numericClass;\n\n\t\tif ( from !\u003d null ) {\n\t\t\tnumericClass \u003d from.getClass();\n\t\t}\n\t\telse if ( to !\u003d null ) {\n\t\t\tnumericClass \u003d to.getClass();\n\t\t}\n\t\telse {\n\t\t\tthrow new SearchException(\n\t\t\t\t\"Cannot create numeric range query for field \" + fieldName + \", since from and to values are \" +\n\t\t\t\t\t\t\"null\");\n\t\t}\n\n\t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n\t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n\t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n\t\t}\n\t\t// TODO: check for type before in the mapping\n\t\tthrow new SearchException(\n\t\t\t\t\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" +\n\t\t\t\t\t\t\"(int,long, short or double) \");\n\t}",
      "path": "hibernate-search/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 15,
      "functionName": "createNumericRangeQuery",
      "diff": "@@ -1,20 +1,34 @@\n \tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n \t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n-\t\tClass numericClass \u003d from.getClass();\n+\n+\t\tClass numericClass;\n+\n+\t\tif ( from !\u003d null ) {\n+\t\t\tnumericClass \u003d from.getClass();\n+\t\t}\n+\t\telse if ( to !\u003d null ) {\n+\t\t\tnumericClass \u003d to.getClass();\n+\t\t}\n+\t\telse {\n+\t\t\tthrow new SearchException(\n+\t\t\t\t\"Cannot create numeric range query for field \" + fieldName + \", since from and to values are \" +\n+\t\t\t\t\t\t\"null\");\n+\t\t}\n+\n \t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n \t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n \t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n \t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n \t\t}\n \t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n \t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n \t\t}\n \t\t// TODO: check for type before in the mapping\n \t\tthrow new SearchException(\n \t\t\t\t\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" +\n \t\t\t\t\t\t\"(int,long, short or double) \");\n \t}\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f957df8e5d4706c6efe9296eb81fe1eeb92a1fd8": {
      "type": "Yfilerename",
      "commitMessage": "HSEARCH-746 Move NumericFieldUtils to impl package\n",
      "commitDate": "2011-07-04, 10:44 a.m.",
      "commitName": "f957df8e5d4706c6efe9296eb81fe1eeb92a1fd8",
      "commitAuthor": "Emmanuel Bernard",
      "commitDateOld": "2011-07-01, 12:51 p.m.",
      "commitNameOld": "04d0ced8d950d09a91ec0f5ca534f64fc5c28a0e",
      "commitAuthorOld": "Sanne Grinovero",
      "daysBetweenCommits": 2.91,
      "commitsBetweenForRepo": 1,
      "commitsBetweenForFile": 1,
      "actualSource": "\tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n\t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n\t\tClass numericClass \u003d from.getClass();\n\t\tif ( numericClass.isAssignableFrom( Double.class ) ) {\n\t\t\treturn NumericRangeQuery.newDoubleRange( fieldName, (Double) from, (Double) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Long.class ) ) {\n\t\t\treturn NumericRangeQuery.newLongRange( fieldName, (Long) from, (Long) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Integer.class ) ) {\n\t\t\treturn NumericRangeQuery.newIntRange( fieldName, (Integer) from, (Integer) to, includeLower, includeUpper );\n\t\t}\n\t\tif ( numericClass.isAssignableFrom( Float.class ) ) {\n\t\t\treturn NumericRangeQuery.newFloatRange( fieldName, (Float) from, (Float) to, includeLower, includeUpper );\n\t\t}\n\t\t// TODO: check for type before in the mapping\n\t\tthrow new SearchException(\n\t\t\t\t\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" +\n\t\t\t\t\t\t\"(int,long, short or double) \");\n\t}",
      "path": "hibernate-search/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java",
      "functionStartLine": 15,
      "functionName": "createNumericRangeQuery",
      "diff": "",
      "extendedDetails": {
        "oldPath": "hibernate-search/src/main/java/org/hibernate/search/bridge/util/NumericFieldUtils.java",
        "newPath": "hibernate-search/src/main/java/org/hibernate/search/bridge/util/impl/NumericFieldUtils.java"
      }
    },
    "dd12cc91851ebe085215a11a33316918259a2b14": {
      "type": "Yintroduced",
      "commitMessage": "HSEARCH-434 Support for NumericFields via annotations, programmatic configuration, DSL\n",
      "commitDate": "2010-11-01, 8:35 a.m.",
      "commitName": "dd12cc91851ebe085215a11a33316918259a2b14",
      "commitAuthor": "Gustavo Fernandes",
      "diff": "@@ -0,0 +1,20 @@\n+\tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n+\t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n+\t\tClass numericClass \u003d from.getClass();\n+\t\tif (numericClass.isAssignableFrom(Double.class)) {\n+\t\t\treturn NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n+\t\t}\n+\t\tif (numericClass.isAssignableFrom(Long.class)) {\n+\t\t\treturn NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n+\t\t}\n+\t\tif (numericClass.isAssignableFrom(Integer.class)) {\n+\t\t\treturn NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n+\t\t}\n+\t\tif (numericClass.isAssignableFrom(Float.class)) {\n+\t\t\treturn NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n+\t\t}\n+\t\t// TODO: check for type before in the mapping\n+\t\tthrow new SearchException(\n+\t\t\t\t\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" +\n+\t\t\t\t\t\t\"(int,long, short or double) \");\n+\t}\n\\ No newline at end of file\n",
      "actualSource": "\tpublic static Query createNumericRangeQuery(String fieldName, Object from, Object to,\n\t\t\t\t\t\t\t\t\t\t\t\tboolean includeLower, boolean includeUpper) {\n\t\tClass numericClass \u003d from.getClass();\n\t\tif (numericClass.isAssignableFrom(Double.class)) {\n\t\t\treturn NumericRangeQuery.newDoubleRange(fieldName, (Double) from, (Double) to, includeLower, includeUpper);\n\t\t}\n\t\tif (numericClass.isAssignableFrom(Long.class)) {\n\t\t\treturn NumericRangeQuery.newLongRange(fieldName, (Long) from, (Long) to, includeLower, includeUpper);\n\t\t}\n\t\tif (numericClass.isAssignableFrom(Integer.class)) {\n\t\t\treturn NumericRangeQuery.newIntRange(fieldName, (Integer) from, (Integer) to, includeLower, includeUpper);\n\t\t}\n\t\tif (numericClass.isAssignableFrom(Float.class)) {\n\t\t\treturn NumericRangeQuery.newFloatRange(fieldName, (Float) from, (Float) to, includeLower, includeUpper);\n\t\t}\n\t\t// TODO: check for type before in the mapping\n\t\tthrow new SearchException(\n\t\t\t\t\"Cannot create numeric range query for field \" + fieldName + \", since values are not numeric \" +\n\t\t\t\t\t\t\"(int,long, short or double) \");\n\t}",
      "path": "hibernate-search/src/main/java/org/hibernate/search/bridge/util/NumericFieldUtils.java",
      "functionStartLine": 18,
      "functionName": "createNumericRangeQuery"
    }
  }
}