{
  "origin": "codeshovel",
  "repositoryName": "intellij-community",
  "repositoryPath": "H:\\Projects\\JetBrains\\intellij-community/.git",
  "startCommitName": "ecb1bb9d4d484ae63ee77f8ad45bdce154db9356",
  "sourceFileName": "PositionManagerImpl.java",
  "functionName": "createPrepareRequests",
  "functionId": "createPrepareRequests___requestor-ClassPrepareRequestor(annotations-@NotNull__modifiers-final)__position-SourcePosition(annotations-@NotNull__modifiers-final)",
  "sourceFilePath": "java/debugger/impl/src/com/intellij/debugger/engine/PositionManagerImpl.java",
  "functionStartLine": 77,
  "functionEndLine": 109,
  "numCommitsSeen": 99,
  "timeTaken": 25420,
  "changeHistory": [
    "561723ced5dc8f77d755a70a2a32658ca44c3871",
    "30d75936da65ff547ae190c720c49589489277ef",
    "4480f300a784e763d922b59884fdc04487a5dd4d",
    "ad2cbbecc3e17963bbe15c631baf6ef4dc26bf99",
    "47efd29972ed029a88ef422ef1f61aa7daab279d",
    "80c77df962bb961b09efa4ca4652fb1018316723",
    "78293368c3cc317ee4a019456c3a320272dfa5f0"
  ],
  "changeHistoryShort": {
    "561723ced5dc8f77d755a70a2a32658ca44c3871": "Ybodychange",
    "30d75936da65ff547ae190c720c49589489277ef": "Ybodychange",
    "4480f300a784e763d922b59884fdc04487a5dd4d": "Ybodychange",
    "ad2cbbecc3e17963bbe15c631baf6ef4dc26bf99": "Ybodychange",
    "47efd29972ed029a88ef422ef1f61aa7daab279d": "Ybodychange",
    "80c77df962bb961b09efa4ca4652fb1018316723": "Ybodychange",
    "78293368c3cc317ee4a019456c3a320272dfa5f0": "Yintroduced"
  },
  "changeHistoryDetails": {
    "561723ced5dc8f77d755a70a2a32658ca44c3871": {
      "type": "Ybodychange",
      "commitMessage": "cleanup: use ReadAction\n",
      "commitDate": "2017-04-10, 12:15 p.m.",
      "commitName": "561723ced5dc8f77d755a70a2a32658ca44c3871",
      "commitAuthor": "Egor.Ushakov",
      "commitDateOld": "2017-04-05, 8:04 a.m.",
      "commitNameOld": "04a549e4bb6aeadb4ae7309be4c9c6cae531bae4",
      "commitAuthorOld": "Egor.Ushakov",
      "daysBetweenCommits": 5.17,
      "commitsBetweenForRepo": 314,
      "commitsBetweenForFile": 1,
      "actualSource": "  public List\u003cClassPrepareRequest\u003e createPrepareRequests(@NotNull final ClassPrepareRequestor requestor, @NotNull final SourcePosition position)\n    throws NoDataException {\n    return ReadAction.compute(() -\u003e {\n      List\u003cClassPrepareRequest\u003e res \u003d new ArrayList\u003c\u003e();\n      for (PsiClass psiClass : getLineClasses(position.getFile(), position.getLine())) {\n        ClassPrepareRequestor prepareRequestor \u003d requestor;\n        String classPattern \u003d JVMNameUtil.getNonAnonymousClassName(psiClass);\n        if (classPattern \u003d\u003d null) {\n          final PsiClass parent \u003d JVMNameUtil.getTopLevelParentClass(psiClass);\n          if (parent \u003d\u003d null) {\n            continue;\n          }\n          final String parentQName \u003d JVMNameUtil.getNonAnonymousClassName(parent);\n          if (parentQName \u003d\u003d null) {\n            continue;\n          }\n          classPattern \u003d parentQName + \"*\";\n          prepareRequestor \u003d new ClassPrepareRequestor() {\n            public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {\n              if (((DebugProcessImpl)debuggerProcess).getPositionManager().getAllClasses(position).contains(referenceType)) {\n                requestor.processClassPrepare(debuggerProcess, referenceType);\n              }\n            }\n          };\n        }\n        ClassPrepareRequest request \u003d myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor, classPattern);\n        if (request !\u003d null) {\n          res.add(request);\n        }\n      }\n      return res;\n    });\n  }",
      "path": "java/debugger/impl/src/com/intellij/debugger/engine/PositionManagerImpl.java",
      "functionStartLine": 92,
      "functionName": "createPrepareRequests",
      "diff": "@@ -1,36 +1,33 @@\n   public List\u003cClassPrepareRequest\u003e createPrepareRequests(@NotNull final ClassPrepareRequestor requestor, @NotNull final SourcePosition position)\n     throws NoDataException {\n-    return ApplicationManager.getApplication().runReadAction(new Computable\u003cList\u003cClassPrepareRequest\u003e\u003e() {\n-      @Override\n-      public List\u003cClassPrepareRequest\u003e compute() {\n-        List\u003cClassPrepareRequest\u003e res \u003d new ArrayList\u003c\u003e();\n-        for (PsiClass psiClass : getLineClasses(position.getFile(), position.getLine())) {\n-          ClassPrepareRequestor prepareRequestor \u003d requestor;\n-          String classPattern \u003d JVMNameUtil.getNonAnonymousClassName(psiClass);\n-          if (classPattern \u003d\u003d null) {\n-            final PsiClass parent \u003d JVMNameUtil.getTopLevelParentClass(psiClass);\n-            if (parent \u003d\u003d null) {\n-              continue;\n-            }\n-            final String parentQName \u003d JVMNameUtil.getNonAnonymousClassName(parent);\n-            if (parentQName \u003d\u003d null) {\n-              continue;\n-            }\n-            classPattern \u003d parentQName + \"*\";\n-            prepareRequestor \u003d new ClassPrepareRequestor() {\n-              public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {\n-                if (((DebugProcessImpl)debuggerProcess).getPositionManager().getAllClasses(position).contains(referenceType)) {\n-                  requestor.processClassPrepare(debuggerProcess, referenceType);\n-                }\n+    return ReadAction.compute(() -\u003e {\n+      List\u003cClassPrepareRequest\u003e res \u003d new ArrayList\u003c\u003e();\n+      for (PsiClass psiClass : getLineClasses(position.getFile(), position.getLine())) {\n+        ClassPrepareRequestor prepareRequestor \u003d requestor;\n+        String classPattern \u003d JVMNameUtil.getNonAnonymousClassName(psiClass);\n+        if (classPattern \u003d\u003d null) {\n+          final PsiClass parent \u003d JVMNameUtil.getTopLevelParentClass(psiClass);\n+          if (parent \u003d\u003d null) {\n+            continue;\n+          }\n+          final String parentQName \u003d JVMNameUtil.getNonAnonymousClassName(parent);\n+          if (parentQName \u003d\u003d null) {\n+            continue;\n+          }\n+          classPattern \u003d parentQName + \"*\";\n+          prepareRequestor \u003d new ClassPrepareRequestor() {\n+            public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {\n+              if (((DebugProcessImpl)debuggerProcess).getPositionManager().getAllClasses(position).contains(referenceType)) {\n+                requestor.processClassPrepare(debuggerProcess, referenceType);\n               }\n-            };\n-          }\n-          ClassPrepareRequest request \u003d myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor, classPattern);\n-          if (request !\u003d null) {\n-            res.add(request);\n-          }\n+            }\n+          };\n         }\n-        return res;\n+        ClassPrepareRequest request \u003d myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor, classPattern);\n+        if (request !\u003d null) {\n+          res.add(request);\n+        }\n       }\n+      return res;\n     });\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "30d75936da65ff547ae190c720c49589489277ef": {
      "type": "Ybodychange",
      "commitMessage": "EA-86445 - NPE: Breakpoint.createOrWaitPrepare\n",
      "commitDate": "2016-09-22, 5:49 a.m.",
      "commitName": "30d75936da65ff547ae190c720c49589489277ef",
      "commitAuthor": "Egor.Ushakov",
      "commitDateOld": "2016-09-05, 11:50 a.m.",
      "commitNameOld": "01913a50e5f3b7694675b77ed5659b8fb17f5229",
      "commitAuthorOld": "Egor.Ushakov",
      "daysBetweenCommits": 16.75,
      "commitsBetweenForRepo": 1114,
      "commitsBetweenForFile": 1,
      "actualSource": "  public List\u003cClassPrepareRequest\u003e createPrepareRequests(@NotNull final ClassPrepareRequestor requestor, @NotNull final SourcePosition position)\n    throws NoDataException {\n    return ApplicationManager.getApplication().runReadAction(new Computable\u003cList\u003cClassPrepareRequest\u003e\u003e() {\n      @Override\n      public List\u003cClassPrepareRequest\u003e compute() {\n        List\u003cClassPrepareRequest\u003e res \u003d new ArrayList\u003c\u003e();\n        for (PsiClass psiClass : getLineClasses(position.getFile(), position.getLine())) {\n          ClassPrepareRequestor prepareRequestor \u003d requestor;\n          String classPattern \u003d JVMNameUtil.getNonAnonymousClassName(psiClass);\n          if (classPattern \u003d\u003d null) {\n            final PsiClass parent \u003d JVMNameUtil.getTopLevelParentClass(psiClass);\n            if (parent \u003d\u003d null) {\n              continue;\n            }\n            final String parentQName \u003d JVMNameUtil.getNonAnonymousClassName(parent);\n            if (parentQName \u003d\u003d null) {\n              continue;\n            }\n            classPattern \u003d parentQName + \"*\";\n            prepareRequestor \u003d new ClassPrepareRequestor() {\n              public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {\n                if (((DebugProcessImpl)debuggerProcess).getPositionManager().getAllClasses(position).contains(referenceType)) {\n                  requestor.processClassPrepare(debuggerProcess, referenceType);\n                }\n              }\n            };\n          }\n          ClassPrepareRequest request \u003d myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor, classPattern);\n          if (request !\u003d null) {\n            res.add(request);\n          }\n        }\n        return res;\n      }\n    });\n  }",
      "path": "java/debugger/impl/src/com/intellij/debugger/engine/PositionManagerImpl.java",
      "functionStartLine": 91,
      "functionName": "createPrepareRequests",
      "diff": "@@ -1,38 +1,36 @@\n   public List\u003cClassPrepareRequest\u003e createPrepareRequests(@NotNull final ClassPrepareRequestor requestor, @NotNull final SourcePosition position)\n     throws NoDataException {\n     return ApplicationManager.getApplication().runReadAction(new Computable\u003cList\u003cClassPrepareRequest\u003e\u003e() {\n       @Override\n       public List\u003cClassPrepareRequest\u003e compute() {\n         List\u003cClassPrepareRequest\u003e res \u003d new ArrayList\u003c\u003e();\n         for (PsiClass psiClass : getLineClasses(position.getFile(), position.getLine())) {\n           ClassPrepareRequestor prepareRequestor \u003d requestor;\n           String classPattern \u003d JVMNameUtil.getNonAnonymousClassName(psiClass);\n           if (classPattern \u003d\u003d null) {\n             final PsiClass parent \u003d JVMNameUtil.getTopLevelParentClass(psiClass);\n             if (parent \u003d\u003d null) {\n               continue;\n             }\n             final String parentQName \u003d JVMNameUtil.getNonAnonymousClassName(parent);\n             if (parentQName \u003d\u003d null) {\n               continue;\n             }\n             classPattern \u003d parentQName + \"*\";\n             prepareRequestor \u003d new ClassPrepareRequestor() {\n               public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {\n-                final CompoundPositionManager positionManager \u003d ((DebugProcessImpl)debuggerProcess).getPositionManager();\n-                final List\u003cReferenceType\u003e positionClasses \u003d positionManager.getAllClasses(position);\n-                if (positionClasses.contains(referenceType)) {\n+                if (((DebugProcessImpl)debuggerProcess).getPositionManager().getAllClasses(position).contains(referenceType)) {\n                   requestor.processClassPrepare(debuggerProcess, referenceType);\n                 }\n               }\n             };\n           }\n           ClassPrepareRequest request \u003d myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor, classPattern);\n           if (request !\u003d null) {\n             res.add(request);\n           }\n         }\n         return res;\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "4480f300a784e763d922b59884fdc04487a5dd4d": {
      "type": "Ybodychange",
      "commitMessage": "use diamond operators\n",
      "commitDate": "2016-02-09, 8:40 a.m.",
      "commitName": "4480f300a784e763d922b59884fdc04487a5dd4d",
      "commitAuthor": "Egor.Ushakov",
      "commitDateOld": "2016-02-08, 8:01 a.m.",
      "commitNameOld": "024fa6709c78153a5196ceb020290547a6cb93a9",
      "commitAuthorOld": "Egor.Ushakov",
      "daysBetweenCommits": 1.03,
      "commitsBetweenForRepo": 70,
      "commitsBetweenForFile": 1,
      "actualSource": "  public List\u003cClassPrepareRequest\u003e createPrepareRequests(@NotNull final ClassPrepareRequestor requestor, @NotNull final SourcePosition position)\n    throws NoDataException {\n    return ApplicationManager.getApplication().runReadAction(new Computable\u003cList\u003cClassPrepareRequest\u003e\u003e() {\n      @Override\n      public List\u003cClassPrepareRequest\u003e compute() {\n        List\u003cClassPrepareRequest\u003e res \u003d new ArrayList\u003c\u003e();\n        for (PsiClass psiClass : getLineClasses(position.getFile(), position.getLine())) {\n          ClassPrepareRequestor prepareRequestor \u003d requestor;\n          String classPattern \u003d JVMNameUtil.getNonAnonymousClassName(psiClass);\n          if (classPattern \u003d\u003d null) {\n            final PsiClass parent \u003d JVMNameUtil.getTopLevelParentClass(psiClass);\n            if (parent \u003d\u003d null) {\n              continue;\n            }\n            final String parentQName \u003d JVMNameUtil.getNonAnonymousClassName(parent);\n            if (parentQName \u003d\u003d null) {\n              continue;\n            }\n            classPattern \u003d parentQName + \"*\";\n            prepareRequestor \u003d new ClassPrepareRequestor() {\n              public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {\n                final CompoundPositionManager positionManager \u003d ((DebugProcessImpl)debuggerProcess).getPositionManager();\n                final List\u003cReferenceType\u003e positionClasses \u003d positionManager.getAllClasses(position);\n                if (positionClasses.contains(referenceType)) {\n                  requestor.processClassPrepare(debuggerProcess, referenceType);\n                }\n              }\n            };\n          }\n          ClassPrepareRequest request \u003d myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor, classPattern);\n          if (request !\u003d null) {\n            res.add(request);\n          }\n        }\n        return res;\n      }\n    });\n  }",
      "path": "java/debugger/impl/src/com/intellij/debugger/engine/PositionManagerImpl.java",
      "functionStartLine": 90,
      "functionName": "createPrepareRequests",
      "diff": "@@ -1,38 +1,38 @@\n   public List\u003cClassPrepareRequest\u003e createPrepareRequests(@NotNull final ClassPrepareRequestor requestor, @NotNull final SourcePosition position)\n     throws NoDataException {\n     return ApplicationManager.getApplication().runReadAction(new Computable\u003cList\u003cClassPrepareRequest\u003e\u003e() {\n       @Override\n       public List\u003cClassPrepareRequest\u003e compute() {\n-        List\u003cClassPrepareRequest\u003e res \u003d new ArrayList\u003cClassPrepareRequest\u003e();\n+        List\u003cClassPrepareRequest\u003e res \u003d new ArrayList\u003c\u003e();\n         for (PsiClass psiClass : getLineClasses(position.getFile(), position.getLine())) {\n           ClassPrepareRequestor prepareRequestor \u003d requestor;\n           String classPattern \u003d JVMNameUtil.getNonAnonymousClassName(psiClass);\n           if (classPattern \u003d\u003d null) {\n             final PsiClass parent \u003d JVMNameUtil.getTopLevelParentClass(psiClass);\n             if (parent \u003d\u003d null) {\n               continue;\n             }\n             final String parentQName \u003d JVMNameUtil.getNonAnonymousClassName(parent);\n             if (parentQName \u003d\u003d null) {\n               continue;\n             }\n             classPattern \u003d parentQName + \"*\";\n             prepareRequestor \u003d new ClassPrepareRequestor() {\n               public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {\n                 final CompoundPositionManager positionManager \u003d ((DebugProcessImpl)debuggerProcess).getPositionManager();\n                 final List\u003cReferenceType\u003e positionClasses \u003d positionManager.getAllClasses(position);\n                 if (positionClasses.contains(referenceType)) {\n                   requestor.processClassPrepare(debuggerProcess, referenceType);\n                 }\n               }\n             };\n           }\n           ClassPrepareRequest request \u003d myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor, classPattern);\n           if (request !\u003d null) {\n             res.add(request);\n           }\n         }\n         return res;\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ad2cbbecc3e17963bbe15c631baf6ef4dc26bf99": {
      "type": "Ybodychange",
      "commitMessage": "take 3: augmenting IDEA-148802 Java Scratch files debugging: debugger ignores breakpoints in module classes and doesn\u0027t show their sources\n",
      "commitDate": "2015-12-03, 7:53 a.m.",
      "commitName": "ad2cbbecc3e17963bbe15c631baf6ef4dc26bf99",
      "commitAuthor": "Eugene Zhuravlev",
      "commitDateOld": "2015-12-03, 6:14 a.m.",
      "commitNameOld": "47efd29972ed029a88ef422ef1f61aa7daab279d",
      "commitAuthorOld": "Eugene Zhuravlev",
      "daysBetweenCommits": 0.07,
      "commitsBetweenForRepo": 7,
      "commitsBetweenForFile": 1,
      "actualSource": "  public List\u003cClassPrepareRequest\u003e createPrepareRequests(@NotNull final ClassPrepareRequestor requestor, @NotNull final SourcePosition position)\n    throws NoDataException {\n    return ApplicationManager.getApplication().runReadAction(new Computable\u003cList\u003cClassPrepareRequest\u003e\u003e() {\n      @Override\n      public List\u003cClassPrepareRequest\u003e compute() {\n        List\u003cClassPrepareRequest\u003e res \u003d new ArrayList\u003cClassPrepareRequest\u003e();\n        for (PsiClass psiClass : getLineClasses(position.getFile(), position.getLine())) {\n          ClassPrepareRequestor prepareRequestor \u003d requestor;\n          String classPattern \u003d JVMNameUtil.getNonAnonymousClassName(psiClass);\n          if (classPattern \u003d\u003d null) {\n            final PsiClass parent \u003d JVMNameUtil.getTopLevelParentClass(psiClass);\n            if (parent \u003d\u003d null) {\n              continue;\n            }\n            final String parentQName \u003d JVMNameUtil.getNonAnonymousClassName(parent);\n            if (parentQName \u003d\u003d null) {\n              continue;\n            }\n            classPattern \u003d parentQName + \"*\";\n            prepareRequestor \u003d new ClassPrepareRequestor() {\n              public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {\n                final CompoundPositionManager positionManager \u003d ((DebugProcessImpl)debuggerProcess).getPositionManager();\n                final List\u003cReferenceType\u003e positionClasses \u003d positionManager.getAllClasses(position);\n                if (positionClasses.contains(referenceType)) {\n                  requestor.processClassPrepare(debuggerProcess, referenceType);\n                }\n              }\n            };\n          }\n          ClassPrepareRequest request \u003d myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor, classPattern);\n          if (request !\u003d null) {\n            res.add(request);\n          }\n        }\n        return res;\n      }\n    });\n  }",
      "path": "java/debugger/impl/src/com/intellij/debugger/engine/PositionManagerImpl.java",
      "functionStartLine": 89,
      "functionName": "createPrepareRequests",
      "diff": "@@ -1,43 +1,38 @@\n   public List\u003cClassPrepareRequest\u003e createPrepareRequests(@NotNull final ClassPrepareRequestor requestor, @NotNull final SourcePosition position)\n     throws NoDataException {\n-    final List\u003cClassPrepareRequest\u003e requests \u003d\n-      ApplicationManager.getApplication().runReadAction(new Computable\u003cList\u003cClassPrepareRequest\u003e\u003e() {\n-        @Override\n-        public List\u003cClassPrepareRequest\u003e compute() {\n-          List\u003cClassPrepareRequest\u003e res \u003d new ArrayList\u003cClassPrepareRequest\u003e();\n-          for (PsiClass psiClass : getLineClasses(position.getFile(), position.getLine())) {\n-            ClassPrepareRequestor prepareRequestor \u003d requestor;\n-            String classPattern \u003d JVMNameUtil.getNonAnonymousClassName(psiClass);\n-            if (classPattern \u003d\u003d null) {\n-              final PsiClass parent \u003d JVMNameUtil.getTopLevelParentClass(psiClass);\n-              if (parent \u003d\u003d null) {\n-                continue;\n-              }\n-              final String parentQName \u003d JVMNameUtil.getNonAnonymousClassName(parent);\n-              if (parentQName \u003d\u003d null) {\n-                continue;\n-              }\n-              classPattern \u003d parentQName + \"*\";\n-              prepareRequestor \u003d new ClassPrepareRequestor() {\n-                public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {\n-                  final CompoundPositionManager positionManager \u003d ((DebugProcessImpl)debuggerProcess).getPositionManager();\n-                  final List\u003cReferenceType\u003e positionClasses \u003d positionManager.getAllClasses(position);\n-                  if (positionClasses.contains(referenceType)) {\n-                    requestor.processClassPrepare(debuggerProcess, referenceType);\n-                  }\n+    return ApplicationManager.getApplication().runReadAction(new Computable\u003cList\u003cClassPrepareRequest\u003e\u003e() {\n+      @Override\n+      public List\u003cClassPrepareRequest\u003e compute() {\n+        List\u003cClassPrepareRequest\u003e res \u003d new ArrayList\u003cClassPrepareRequest\u003e();\n+        for (PsiClass psiClass : getLineClasses(position.getFile(), position.getLine())) {\n+          ClassPrepareRequestor prepareRequestor \u003d requestor;\n+          String classPattern \u003d JVMNameUtil.getNonAnonymousClassName(psiClass);\n+          if (classPattern \u003d\u003d null) {\n+            final PsiClass parent \u003d JVMNameUtil.getTopLevelParentClass(psiClass);\n+            if (parent \u003d\u003d null) {\n+              continue;\n+            }\n+            final String parentQName \u003d JVMNameUtil.getNonAnonymousClassName(parent);\n+            if (parentQName \u003d\u003d null) {\n+              continue;\n+            }\n+            classPattern \u003d parentQName + \"*\";\n+            prepareRequestor \u003d new ClassPrepareRequestor() {\n+              public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {\n+                final CompoundPositionManager positionManager \u003d ((DebugProcessImpl)debuggerProcess).getPositionManager();\n+                final List\u003cReferenceType\u003e positionClasses \u003d positionManager.getAllClasses(position);\n+                if (positionClasses.contains(referenceType)) {\n+                  requestor.processClassPrepare(debuggerProcess, referenceType);\n                 }\n-              };\n-            }\n-            ClassPrepareRequest request \u003d myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor, classPattern);\n-            if (request !\u003d null) {\n-              res.add(request);\n-            }\n+              }\n+            };\n           }\n-          return res;\n+          ClassPrepareRequest request \u003d myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor, classPattern);\n+          if (request !\u003d null) {\n+            res.add(request);\n+          }\n         }\n-      });\n-    if (requests.isEmpty()) {\n-      throw NoDataException.INSTANCE;\n-    }\n-    return requests;\n+        return res;\n+      }\n+    });\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "47efd29972ed029a88ef422ef1f61aa7daab279d": {
      "type": "Ybodychange",
      "commitMessage": "augmenting IDEA-148802 Java Scratch files debugging: debugger ignores breakpoints in module classes and doesn\u0027t show their sources\n",
      "commitDate": "2015-12-03, 6:14 a.m.",
      "commitName": "47efd29972ed029a88ef422ef1f61aa7daab279d",
      "commitAuthor": "Eugene Zhuravlev",
      "commitDateOld": "2015-12-03, 3:55 a.m.",
      "commitNameOld": "7014f9fc684261dc9c9906ec92f91b3f28f81e99",
      "commitAuthorOld": "Egor.Ushakov",
      "daysBetweenCommits": 0.1,
      "commitsBetweenForRepo": 18,
      "commitsBetweenForFile": 1,
      "actualSource": "  public List\u003cClassPrepareRequest\u003e createPrepareRequests(@NotNull final ClassPrepareRequestor requestor, @NotNull final SourcePosition position)\n    throws NoDataException {\n    final List\u003cClassPrepareRequest\u003e requests \u003d\n      ApplicationManager.getApplication().runReadAction(new Computable\u003cList\u003cClassPrepareRequest\u003e\u003e() {\n        @Override\n        public List\u003cClassPrepareRequest\u003e compute() {\n          List\u003cClassPrepareRequest\u003e res \u003d new ArrayList\u003cClassPrepareRequest\u003e();\n          for (PsiClass psiClass : getLineClasses(position.getFile(), position.getLine())) {\n            ClassPrepareRequestor prepareRequestor \u003d requestor;\n            String classPattern \u003d JVMNameUtil.getNonAnonymousClassName(psiClass);\n            if (classPattern \u003d\u003d null) {\n              final PsiClass parent \u003d JVMNameUtil.getTopLevelParentClass(psiClass);\n              if (parent \u003d\u003d null) {\n                continue;\n              }\n              final String parentQName \u003d JVMNameUtil.getNonAnonymousClassName(parent);\n              if (parentQName \u003d\u003d null) {\n                continue;\n              }\n              classPattern \u003d parentQName + \"*\";\n              prepareRequestor \u003d new ClassPrepareRequestor() {\n                public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {\n                  final CompoundPositionManager positionManager \u003d ((DebugProcessImpl)debuggerProcess).getPositionManager();\n                  final List\u003cReferenceType\u003e positionClasses \u003d positionManager.getAllClasses(position);\n                  if (positionClasses.contains(referenceType)) {\n                    requestor.processClassPrepare(debuggerProcess, referenceType);\n                  }\n                }\n              };\n            }\n            ClassPrepareRequest request \u003d myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor, classPattern);\n            if (request !\u003d null) {\n              res.add(request);\n            }\n          }\n          return res;\n        }\n      });\n    if (requests.isEmpty()) {\n      throw NoDataException.INSTANCE;\n    }\n    return requests;\n  }",
      "path": "java/debugger/impl/src/com/intellij/debugger/engine/PositionManagerImpl.java",
      "functionStartLine": 89,
      "functionName": "createPrepareRequests",
      "diff": "@@ -1,38 +1,43 @@\n   public List\u003cClassPrepareRequest\u003e createPrepareRequests(@NotNull final ClassPrepareRequestor requestor, @NotNull final SourcePosition position)\n     throws NoDataException {\n-    return ApplicationManager.getApplication().runReadAction(new Computable\u003cList\u003cClassPrepareRequest\u003e\u003e() {\n-      @Override\n-      public List\u003cClassPrepareRequest\u003e compute() {\n-        List\u003cClassPrepareRequest\u003e res \u003d new ArrayList\u003cClassPrepareRequest\u003e();\n-        for (PsiClass psiClass : getLineClasses(position.getFile(), position.getLine())) {\n-          ClassPrepareRequestor prepareRequestor \u003d requestor;\n-          String classPattern \u003d JVMNameUtil.getNonAnonymousClassName(psiClass);\n-          if (classPattern \u003d\u003d null) {\n-            final PsiClass parent \u003d JVMNameUtil.getTopLevelParentClass(psiClass);\n-            if (parent \u003d\u003d null) {\n-              continue;\n-            }\n-            final String parentQName \u003d JVMNameUtil.getNonAnonymousClassName(parent);\n-            if (parentQName \u003d\u003d null) {\n-              continue;\n-            }\n-            classPattern \u003d parentQName + \"*\";\n-            prepareRequestor \u003d new ClassPrepareRequestor() {\n-              public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {\n-                final CompoundPositionManager positionManager \u003d ((DebugProcessImpl)debuggerProcess).getPositionManager();\n-                final List\u003cReferenceType\u003e positionClasses \u003d positionManager.getAllClasses(position);\n-                if (positionClasses.contains(referenceType)) {\n-                  requestor.processClassPrepare(debuggerProcess, referenceType);\n-                }\n+    final List\u003cClassPrepareRequest\u003e requests \u003d\n+      ApplicationManager.getApplication().runReadAction(new Computable\u003cList\u003cClassPrepareRequest\u003e\u003e() {\n+        @Override\n+        public List\u003cClassPrepareRequest\u003e compute() {\n+          List\u003cClassPrepareRequest\u003e res \u003d new ArrayList\u003cClassPrepareRequest\u003e();\n+          for (PsiClass psiClass : getLineClasses(position.getFile(), position.getLine())) {\n+            ClassPrepareRequestor prepareRequestor \u003d requestor;\n+            String classPattern \u003d JVMNameUtil.getNonAnonymousClassName(psiClass);\n+            if (classPattern \u003d\u003d null) {\n+              final PsiClass parent \u003d JVMNameUtil.getTopLevelParentClass(psiClass);\n+              if (parent \u003d\u003d null) {\n+                continue;\n               }\n-            };\n+              final String parentQName \u003d JVMNameUtil.getNonAnonymousClassName(parent);\n+              if (parentQName \u003d\u003d null) {\n+                continue;\n+              }\n+              classPattern \u003d parentQName + \"*\";\n+              prepareRequestor \u003d new ClassPrepareRequestor() {\n+                public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {\n+                  final CompoundPositionManager positionManager \u003d ((DebugProcessImpl)debuggerProcess).getPositionManager();\n+                  final List\u003cReferenceType\u003e positionClasses \u003d positionManager.getAllClasses(position);\n+                  if (positionClasses.contains(referenceType)) {\n+                    requestor.processClassPrepare(debuggerProcess, referenceType);\n+                  }\n+                }\n+              };\n+            }\n+            ClassPrepareRequest request \u003d myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor, classPattern);\n+            if (request !\u003d null) {\n+              res.add(request);\n+            }\n           }\n-          ClassPrepareRequest request \u003d myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor, classPattern);\n-          if (request !\u003d null) {\n-            res.add(request);\n-          }\n+          return res;\n         }\n-        return res;\n-      }\n-    });\n+      });\n+    if (requests.isEmpty()) {\n+      throw NoDataException.INSTANCE;\n+    }\n+    return requests;\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "80c77df962bb961b09efa4ca4652fb1018316723": {
      "type": "Ybodychange",
      "commitMessage": "EA-70326 - NPE: RequestManagerImpl.createClassPrepareRequest\n",
      "commitDate": "2015-09-01, 9:59 a.m.",
      "commitName": "80c77df962bb961b09efa4ca4652fb1018316723",
      "commitAuthor": "Egor.Ushakov",
      "commitDateOld": "2015-07-23, 9:20 a.m.",
      "commitNameOld": "4bd81f0d56b2a798d2e4f79eae8e9befd7f31ffb",
      "commitAuthorOld": "Egor.Ushakov",
      "daysBetweenCommits": 40.03,
      "commitsBetweenForRepo": 2198,
      "commitsBetweenForFile": 1,
      "actualSource": "  public List\u003cClassPrepareRequest\u003e createPrepareRequests(@NotNull final ClassPrepareRequestor requestor, @NotNull final SourcePosition position)\n    throws NoDataException {\n    return ApplicationManager.getApplication().runReadAction(new Computable\u003cList\u003cClassPrepareRequest\u003e\u003e() {\n      @Override\n      public List\u003cClassPrepareRequest\u003e compute() {\n        List\u003cClassPrepareRequest\u003e res \u003d new ArrayList\u003cClassPrepareRequest\u003e();\n        for (PsiClass psiClass : getLineClasses(position.getFile(), position.getLine())) {\n          ClassPrepareRequestor prepareRequestor \u003d requestor;\n          String classPattern \u003d JVMNameUtil.getNonAnonymousClassName(psiClass);\n          if (classPattern \u003d\u003d null) {\n            final PsiClass parent \u003d JVMNameUtil.getTopLevelParentClass(psiClass);\n            if (parent \u003d\u003d null) {\n              continue;\n            }\n            final String parentQName \u003d JVMNameUtil.getNonAnonymousClassName(parent);\n            if (parentQName \u003d\u003d null) {\n              continue;\n            }\n            classPattern \u003d parentQName + \"*\";\n            prepareRequestor \u003d new ClassPrepareRequestor() {\n              public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {\n                final CompoundPositionManager positionManager \u003d ((DebugProcessImpl)debuggerProcess).getPositionManager();\n                final List\u003cReferenceType\u003e positionClasses \u003d positionManager.getAllClasses(position);\n                if (positionClasses.contains(referenceType)) {\n                  requestor.processClassPrepare(debuggerProcess, referenceType);\n                }\n              }\n            };\n          }\n          ClassPrepareRequest request \u003d myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor, classPattern);\n          if (request !\u003d null) {\n            res.add(request);\n          }\n        }\n        return res;\n      }\n    });\n  }",
      "path": "java/debugger/impl/src/com/intellij/debugger/engine/PositionManagerImpl.java",
      "functionStartLine": 89,
      "functionName": "createPrepareRequests",
      "diff": "@@ -1,35 +1,38 @@\n   public List\u003cClassPrepareRequest\u003e createPrepareRequests(@NotNull final ClassPrepareRequestor requestor, @NotNull final SourcePosition position)\n     throws NoDataException {\n     return ApplicationManager.getApplication().runReadAction(new Computable\u003cList\u003cClassPrepareRequest\u003e\u003e() {\n       @Override\n       public List\u003cClassPrepareRequest\u003e compute() {\n         List\u003cClassPrepareRequest\u003e res \u003d new ArrayList\u003cClassPrepareRequest\u003e();\n         for (PsiClass psiClass : getLineClasses(position.getFile(), position.getLine())) {\n           ClassPrepareRequestor prepareRequestor \u003d requestor;\n           String classPattern \u003d JVMNameUtil.getNonAnonymousClassName(psiClass);\n           if (classPattern \u003d\u003d null) {\n             final PsiClass parent \u003d JVMNameUtil.getTopLevelParentClass(psiClass);\n             if (parent \u003d\u003d null) {\n               continue;\n             }\n             final String parentQName \u003d JVMNameUtil.getNonAnonymousClassName(parent);\n             if (parentQName \u003d\u003d null) {\n               continue;\n             }\n             classPattern \u003d parentQName + \"*\";\n             prepareRequestor \u003d new ClassPrepareRequestor() {\n               public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {\n                 final CompoundPositionManager positionManager \u003d ((DebugProcessImpl)debuggerProcess).getPositionManager();\n                 final List\u003cReferenceType\u003e positionClasses \u003d positionManager.getAllClasses(position);\n                 if (positionClasses.contains(referenceType)) {\n                   requestor.processClassPrepare(debuggerProcess, referenceType);\n                 }\n               }\n             };\n           }\n-          res.add(myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor, classPattern));\n+          ClassPrepareRequest request \u003d myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor, classPattern);\n+          if (request !\u003d null) {\n+            res.add(request);\n+          }\n         }\n         return res;\n       }\n     });\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "78293368c3cc317ee4a019456c3a320272dfa5f0": {
      "type": "Yintroduced",
      "commitMessage": "IDEA-137957 Unable to set a breakpoint on anonymous class method invocation\n",
      "commitDate": "2015-04-27, 12:43 p.m.",
      "commitName": "78293368c3cc317ee4a019456c3a320272dfa5f0",
      "commitAuthor": "Egor.Ushakov",
      "diff": "@@ -0,0 +1,35 @@\n+  public List\u003cClassPrepareRequest\u003e createPrepareRequests(@NotNull final ClassPrepareRequestor requestor, @NotNull final SourcePosition position)\n+    throws NoDataException {\n+    return ApplicationManager.getApplication().runReadAction(new Computable\u003cList\u003cClassPrepareRequest\u003e\u003e() {\n+      @Override\n+      public List\u003cClassPrepareRequest\u003e compute() {\n+        List\u003cClassPrepareRequest\u003e res \u003d new ArrayList\u003cClassPrepareRequest\u003e();\n+        for (PsiClass psiClass : getLineClasses(position.getFile(), position.getLine())) {\n+          ClassPrepareRequestor prepareRequestor \u003d requestor;\n+          String classPattern \u003d JVMNameUtil.getNonAnonymousClassName(psiClass);\n+          if (classPattern \u003d\u003d null) {\n+            final PsiClass parent \u003d JVMNameUtil.getTopLevelParentClass(psiClass);\n+            if (parent \u003d\u003d null) {\n+              continue;\n+            }\n+            final String parentQName \u003d JVMNameUtil.getNonAnonymousClassName(parent);\n+            if (parentQName \u003d\u003d null) {\n+              continue;\n+            }\n+            classPattern \u003d parentQName + \"*\";\n+            prepareRequestor \u003d new ClassPrepareRequestor() {\n+              public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {\n+                final CompoundPositionManager positionManager \u003d ((DebugProcessImpl)debuggerProcess).getPositionManager();\n+                final List\u003cReferenceType\u003e positionClasses \u003d positionManager.getAllClasses(position);\n+                if (positionClasses.contains(referenceType)) {\n+                  requestor.processClassPrepare(debuggerProcess, referenceType);\n+                }\n+              }\n+            };\n+          }\n+          res.add(myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor, classPattern));\n+        }\n+        return res;\n+      }\n+    });\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public List\u003cClassPrepareRequest\u003e createPrepareRequests(@NotNull final ClassPrepareRequestor requestor, @NotNull final SourcePosition position)\n    throws NoDataException {\n    return ApplicationManager.getApplication().runReadAction(new Computable\u003cList\u003cClassPrepareRequest\u003e\u003e() {\n      @Override\n      public List\u003cClassPrepareRequest\u003e compute() {\n        List\u003cClassPrepareRequest\u003e res \u003d new ArrayList\u003cClassPrepareRequest\u003e();\n        for (PsiClass psiClass : getLineClasses(position.getFile(), position.getLine())) {\n          ClassPrepareRequestor prepareRequestor \u003d requestor;\n          String classPattern \u003d JVMNameUtil.getNonAnonymousClassName(psiClass);\n          if (classPattern \u003d\u003d null) {\n            final PsiClass parent \u003d JVMNameUtil.getTopLevelParentClass(psiClass);\n            if (parent \u003d\u003d null) {\n              continue;\n            }\n            final String parentQName \u003d JVMNameUtil.getNonAnonymousClassName(parent);\n            if (parentQName \u003d\u003d null) {\n              continue;\n            }\n            classPattern \u003d parentQName + \"*\";\n            prepareRequestor \u003d new ClassPrepareRequestor() {\n              public void processClassPrepare(DebugProcess debuggerProcess, ReferenceType referenceType) {\n                final CompoundPositionManager positionManager \u003d ((DebugProcessImpl)debuggerProcess).getPositionManager();\n                final List\u003cReferenceType\u003e positionClasses \u003d positionManager.getAllClasses(position);\n                if (positionClasses.contains(referenceType)) {\n                  requestor.processClassPrepare(debuggerProcess, referenceType);\n                }\n              }\n            };\n          }\n          res.add(myDebugProcess.getRequestsManager().createClassPrepareRequest(prepareRequestor, classPattern));\n        }\n        return res;\n      }\n    });\n  }",
      "path": "java/debugger/impl/src/com/intellij/debugger/engine/PositionManagerImpl.java",
      "functionStartLine": 85,
      "functionName": "createPrepareRequests"
    }
  }
}