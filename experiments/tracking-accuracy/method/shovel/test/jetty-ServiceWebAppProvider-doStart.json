{
  "origin": "codeshovel",
  "repositoryName": "jetty.project",
  "repositoryPath": "H:\\Projects\\eclipse\\jetty.project/.git",
  "startCommitName": "fc5dd874f3deda71e6cd42af994a5af5cb6be4af",
  "sourceFileName": "ServiceWebAppProvider.java",
  "functionName": "doStart",
  "functionId": "doStart",
  "sourceFilePath": "jetty-osgi/jetty-osgi-boot/src/main/java/org/eclipse/jetty/osgi/boot/ServiceWebAppProvider.java",
  "functionStartLine": 267,
  "functionEndLine": 283,
  "numCommitsSeen": 17,
  "timeTaken": 1683,
  "changeHistory": [
    "96218e8bc42390c9ff6bb3c72f7deb6c5a0a7880",
    "05e2527b5c781db8c7179a134ac1bf800e830580",
    "37fa778ea03aba953712348426393136e2314658",
    "9af433473961dab9f5d534031fe0a6daa615a2a6"
  ],
  "changeHistoryShort": {
    "96218e8bc42390c9ff6bb3c72f7deb6c5a0a7880": "Ybodychange",
    "05e2527b5c781db8c7179a134ac1bf800e830580": "Ybodychange",
    "37fa778ea03aba953712348426393136e2314658": "Ybodychange",
    "9af433473961dab9f5d534031fe0a6daa615a2a6": "Yintroduced"
  },
  "changeHistoryDetails": {
    "96218e8bc42390c9ff6bb3c72f7deb6c5a0a7880": {
      "type": "Ybodychange",
      "commitMessage": "Fix typos detected by github.com/client9/misspell\n\nSigned-off-by: Kazuhiro Sera \u003cseratch@gmail.com\u003e\n",
      "commitDate": "2018-08-10, 10:52 a.m.",
      "commitName": "96218e8bc42390c9ff6bb3c72f7deb6c5a0a7880",
      "commitAuthor": "Kazuhiro Sera",
      "commitDateOld": "2018-03-01, 1:35 a.m.",
      "commitNameOld": "1ff2c691bae7cc47c0d8f386d311e03764cbf26c",
      "commitAuthorOld": "",
      "daysBetweenCommits": 162.35,
      "commitsBetweenForRepo": 507,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected void doStart() throws Exception\n    {\n        BundleContext bundleContext \u003d FrameworkUtil.getBundle(this.getClass()).getBundleContext();\n\n        //Start a tracker to find webapps that are osgi services that are targeted to my server name\n        webappTracker \u003d new WebAppTracker (bundleContext, \n                                            Util.createFilter(bundleContext, WebAppContext.class.getName(), getServerInstanceWrapper().getManagedServerName()));\n        webappTracker.open();\n        \n        //register as an osgi service for deploying bundles, advertising the name of the jetty Server instance we are related to\n        Dictionary\u003cString,String\u003e properties \u003d new Hashtable\u003c\u003e();\n        properties.put(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME, getServerInstanceWrapper().getManagedServerName());\n       \n        //register as an osgi service for deploying contexts (discovered as osgi services), advertising the name of the jetty Server instance we are related to\n        _serviceRegForServices \u003d FrameworkUtil.getBundle(this.getClass()).getBundleContext().registerService(ServiceProvider.class.getName(), this, properties);\n        super.doStart();\n    }",
      "path": "jetty-osgi/jetty-osgi-boot/src/main/java/org/eclipse/jetty/osgi/boot/ServiceWebAppProvider.java",
      "functionStartLine": 267,
      "functionName": "doStart",
      "diff": "@@ -1,17 +1,17 @@\n     protected void doStart() throws Exception\n     {\n         BundleContext bundleContext \u003d FrameworkUtil.getBundle(this.getClass()).getBundleContext();\n \n-        //Start a tracker to find webapps that are osgi services that are targetted to my server name\n+        //Start a tracker to find webapps that are osgi services that are targeted to my server name\n         webappTracker \u003d new WebAppTracker (bundleContext, \n                                             Util.createFilter(bundleContext, WebAppContext.class.getName(), getServerInstanceWrapper().getManagedServerName()));\n         webappTracker.open();\n         \n         //register as an osgi service for deploying bundles, advertising the name of the jetty Server instance we are related to\n         Dictionary\u003cString,String\u003e properties \u003d new Hashtable\u003c\u003e();\n         properties.put(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME, getServerInstanceWrapper().getManagedServerName());\n        \n         //register as an osgi service for deploying contexts (discovered as osgi services), advertising the name of the jetty Server instance we are related to\n         _serviceRegForServices \u003d FrameworkUtil.getBundle(this.getClass()).getBundleContext().registerService(ServiceProvider.class.getName(), this, properties);\n         super.doStart();\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "05e2527b5c781db8c7179a134ac1bf800e830580": {
      "type": "Ybodychange",
      "commitMessage": "Issue #2262 Sanitize osgi code\n\nSigned-off-by: Jan Bartel \u003cjanb@webtide.com\u003e\n",
      "commitDate": "2018-03-01, 1:31 a.m.",
      "commitName": "05e2527b5c781db8c7179a134ac1bf800e830580",
      "commitAuthor": "Jan Bartel",
      "commitDateOld": "2018-01-09, 10:37 a.m.",
      "commitNameOld": "41ed9f29f41263c9facede20bddfaafa669b43c5",
      "commitAuthorOld": "",
      "daysBetweenCommits": 50.62,
      "commitsBetweenForRepo": 150,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected void doStart() throws Exception\n    {\n        BundleContext bundleContext \u003d FrameworkUtil.getBundle(this.getClass()).getBundleContext();\n\n        //Start a tracker to find webapps that are osgi services that are targetted to my server name\n        webappTracker \u003d new WebAppTracker (bundleContext, \n                                            Util.createFilter(bundleContext, WebAppContext.class.getName(), getServerInstanceWrapper().getManagedServerName()));\n        webappTracker.open();\n        \n        //register as an osgi service for deploying bundles, advertising the name of the jetty Server instance we are related to\n        Dictionary\u003cString,String\u003e properties \u003d new Hashtable\u003c\u003e();\n        properties.put(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME, getServerInstanceWrapper().getManagedServerName());\n       \n        //register as an osgi service for deploying contexts (discovered as osgi services), advertising the name of the jetty Server instance we are related to\n        _serviceRegForServices \u003d FrameworkUtil.getBundle(this.getClass()).getBundleContext().registerService(ServiceProvider.class.getName(), this, properties);\n        super.doStart();\n    }",
      "path": "jetty-osgi/jetty-osgi-boot/src/main/java/org/eclipse/jetty/osgi/boot/ServiceWebAppProvider.java",
      "functionStartLine": 264,
      "functionName": "doStart",
      "diff": "@@ -1,17 +1,17 @@\n     protected void doStart() throws Exception\n     {\n         BundleContext bundleContext \u003d FrameworkUtil.getBundle(this.getClass()).getBundleContext();\n \n         //Start a tracker to find webapps that are osgi services that are targetted to my server name\n         webappTracker \u003d new WebAppTracker (bundleContext, \n                                             Util.createFilter(bundleContext, WebAppContext.class.getName(), getServerInstanceWrapper().getManagedServerName()));\n         webappTracker.open();\n         \n         //register as an osgi service for deploying bundles, advertising the name of the jetty Server instance we are related to\n-        Dictionary\u003cString,String\u003e properties \u003d new Hashtable\u003cString,String\u003e();\n+        Dictionary\u003cString,String\u003e properties \u003d new Hashtable\u003c\u003e();\n         properties.put(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME, getServerInstanceWrapper().getManagedServerName());\n        \n         //register as an osgi service for deploying contexts (discovered as osgi services), advertising the name of the jetty Server instance we are related to\n         _serviceRegForServices \u003d FrameworkUtil.getBundle(this.getClass()).getBundleContext().registerService(ServiceProvider.class.getName(), this, properties);\n         super.doStart();\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "37fa778ea03aba953712348426393136e2314658": {
      "type": "Ybodychange",
      "commitMessage": "Issue #213\n",
      "commitDate": "2016-07-27, 6:13 a.m.",
      "commitName": "37fa778ea03aba953712348426393136e2314658",
      "commitAuthor": "Jan Bartel",
      "commitDateOld": "2016-01-04, 4:31 p.m.",
      "commitNameOld": "cd39fd84fe7c61267a5f652a79279b73a10e7f9c",
      "commitAuthorOld": "Joakim Erdfelt",
      "daysBetweenCommits": 204.53,
      "commitsBetweenForRepo": 803,
      "commitsBetweenForFile": 1,
      "actualSource": "    protected void doStart() throws Exception\n    {\n        BundleContext bundleContext \u003d FrameworkUtil.getBundle(this.getClass()).getBundleContext();\n\n        //Start a tracker to find webapps that are osgi services that are targetted to my server name\n        webappTracker \u003d new WebAppTracker (bundleContext, \n                                            Util.createFilter(bundleContext, WebAppContext.class.getName(), getServerInstanceWrapper().getManagedServerName()));\n        webappTracker.open();\n        \n        //register as an osgi service for deploying bundles, advertising the name of the jetty Server instance we are related to\n        Dictionary\u003cString,String\u003e properties \u003d new Hashtable\u003cString,String\u003e();\n        properties.put(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME, getServerInstanceWrapper().getManagedServerName());\n       \n        //register as an osgi service for deploying contexts (discovered as osgi services), advertising the name of the jetty Server instance we are related to\n        _serviceRegForServices \u003d FrameworkUtil.getBundle(this.getClass()).getBundleContext().registerService(ServiceProvider.class.getName(), this, properties);\n        super.doStart();\n    }",
      "path": "jetty-osgi/jetty-osgi-boot/src/main/java/org/eclipse/jetty/osgi/boot/ServiceWebAppProvider.java",
      "functionStartLine": 265,
      "functionName": "doStart",
      "diff": "@@ -1,10 +1,17 @@\n     protected void doStart() throws Exception\n     {\n+        BundleContext bundleContext \u003d FrameworkUtil.getBundle(this.getClass()).getBundleContext();\n+\n+        //Start a tracker to find webapps that are osgi services that are targetted to my server name\n+        webappTracker \u003d new WebAppTracker (bundleContext, \n+                                            Util.createFilter(bundleContext, WebAppContext.class.getName(), getServerInstanceWrapper().getManagedServerName()));\n+        webappTracker.open();\n+        \n         //register as an osgi service for deploying bundles, advertising the name of the jetty Server instance we are related to\n         Dictionary\u003cString,String\u003e properties \u003d new Hashtable\u003cString,String\u003e();\n         properties.put(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME, getServerInstanceWrapper().getManagedServerName());\n        \n         //register as an osgi service for deploying contexts (discovered as osgi services), advertising the name of the jetty Server instance we are related to\n         _serviceRegForServices \u003d FrameworkUtil.getBundle(this.getClass()).getBundleContext().registerService(ServiceProvider.class.getName(), this, properties);\n         super.doStart();\n     }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9af433473961dab9f5d534031fe0a6daa615a2a6": {
      "type": "Yintroduced",
      "commitMessage": "committing to save changes but does not yet compile\n",
      "commitDate": "2013-02-19, 5:26 p.m.",
      "commitName": "9af433473961dab9f5d534031fe0a6daa615a2a6",
      "commitAuthor": "Jan Bartel",
      "diff": "@@ -0,0 +1,10 @@\n+    protected void doStart() throws Exception\n+    {\n+        //register as an osgi service for deploying bundles, advertising the name of the jetty Server instance we are related to\n+        Dictionary\u003cString,String\u003e properties \u003d new Hashtable\u003cString,String\u003e();\n+        properties.put(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME, getServerInstanceWrapper().getManagedServerName());\n+       \n+        //register as an osgi service for deploying contexts (discovered as osgi services), advertising the name of the jetty Server instance we are related to\n+        _serviceRegForServices \u003d FrameworkUtil.getBundle(this.getClass()).getBundleContext().registerService(ServiceProvider.class.getName(), this, properties);\n+        super.doStart();\n+    }\n\\ No newline at end of file\n",
      "actualSource": "    protected void doStart() throws Exception\n    {\n        //register as an osgi service for deploying bundles, advertising the name of the jetty Server instance we are related to\n        Dictionary\u003cString,String\u003e properties \u003d new Hashtable\u003cString,String\u003e();\n        properties.put(OSGiServerConstants.MANAGED_JETTY_SERVER_NAME, getServerInstanceWrapper().getManagedServerName());\n       \n        //register as an osgi service for deploying contexts (discovered as osgi services), advertising the name of the jetty Server instance we are related to\n        _serviceRegForServices \u003d FrameworkUtil.getBundle(this.getClass()).getBundleContext().registerService(ServiceProvider.class.getName(), this, properties);\n        super.doStart();\n    }",
      "path": "jetty-osgi/jetty-osgi-boot/src/main/java/org/eclipse/jetty/osgi/boot/ServiceWebAppProvider.java",
      "functionStartLine": 215,
      "functionName": "doStart"
    }
  }
}