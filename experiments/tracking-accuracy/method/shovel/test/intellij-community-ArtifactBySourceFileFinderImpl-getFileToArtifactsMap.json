{
  "origin": "codeshovel",
  "repositoryName": "intellij-community",
  "repositoryPath": "H:\\Projects\\JetBrains\\intellij-community/.git",
  "startCommitName": "ecb1bb9d4d484ae63ee77f8ad45bdce154db9356",
  "sourceFileName": "ArtifactBySourceFileFinderImpl.java",
  "functionName": "getFileToArtifactsMap",
  "functionId": "getFileToArtifactsMap",
  "sourceFilePath": "java/compiler/impl/src/com/intellij/packaging/impl/artifacts/ArtifactBySourceFileFinderImpl.java",
  "functionStartLine": 53,
  "functionEndLine": 67,
  "numCommitsSeen": 9,
  "timeTaken": 19483,
  "changeHistory": [
    "67e051b43a00fbcfec4a648fc68446907839d7f2",
    "c71d5554c051d94d9868d128be6ba4c84b8978a4",
    "78d1492242539eb0d5e36016f9dc1f9b55d76f94",
    "9d6477485d37e796036ee524788231f2f47e6ada",
    "eda225b7af1f6452dfa6fe101167b7092a95bbbe"
  ],
  "changeHistoryShort": {
    "67e051b43a00fbcfec4a648fc68446907839d7f2": "Ybodychange",
    "c71d5554c051d94d9868d128be6ba4c84b8978a4": "Ybodychange",
    "78d1492242539eb0d5e36016f9dc1f9b55d76f94": "Ybodychange",
    "9d6477485d37e796036ee524788231f2f47e6ada": "Ybodychange",
    "eda225b7af1f6452dfa6fe101167b7092a95bbbe": "Yintroduced"
  },
  "changeHistoryDetails": {
    "67e051b43a00fbcfec4a648fc68446907839d7f2": {
      "type": "Ybodychange",
      "commitMessage": "Java: Cleanup \"confusing argument to varargs method\"\n",
      "commitDate": "2017-11-10, 7:54 a.m.",
      "commitName": "67e051b43a00fbcfec4a648fc68446907839d7f2",
      "commitAuthor": "Pavel Dolgov",
      "commitDateOld": "2017-04-27, 6:37 a.m.",
      "commitNameOld": "583a728f89fc6c69d08a085830a4470ce21ab8d9",
      "commitAuthorOld": "Anna.Kozlova",
      "daysBetweenCommits": 197.1,
      "commitsBetweenForRepo": 12548,
      "commitsBetweenForFile": 1,
      "actualSource": "  public CachedValue\u003cMultiValuesMap\u003cVirtualFile, Artifact\u003e\u003e getFileToArtifactsMap() {\n    if (myFile2Artifacts \u003d\u003d null) {\n      myFile2Artifacts \u003d\n        CachedValuesManager.getManager(myProject).createCachedValue(() -\u003e {\n          MultiValuesMap\u003cVirtualFile, Artifact\u003e result \u003d computeFileToArtifactsMap();\n          List\u003cModificationTracker\u003e trackers \u003d new ArrayList\u003c\u003e();\n          trackers.add(ArtifactManager.getInstance(myProject).getModificationTracker());\n          for (ComplexPackagingElementType\u003c?\u003e type : PackagingElementFactory.getInstance().getComplexElementTypes()) {\n            ContainerUtil.addIfNotNull(trackers, type.getAllSubstitutionsModificationTracker(myProject));\n          }\n          return CachedValueProvider.Result.create(result, trackers);\n        }, false);\n    }\n    return myFile2Artifacts;\n  }",
      "path": "java/compiler/impl/src/com/intellij/packaging/impl/artifacts/ArtifactBySourceFileFinderImpl.java",
      "functionStartLine": 53,
      "functionName": "getFileToArtifactsMap",
      "diff": "@@ -1,15 +1,15 @@\n   public CachedValue\u003cMultiValuesMap\u003cVirtualFile, Artifact\u003e\u003e getFileToArtifactsMap() {\n     if (myFile2Artifacts \u003d\u003d null) {\n       myFile2Artifacts \u003d\n         CachedValuesManager.getManager(myProject).createCachedValue(() -\u003e {\n           MultiValuesMap\u003cVirtualFile, Artifact\u003e result \u003d computeFileToArtifactsMap();\n           List\u003cModificationTracker\u003e trackers \u003d new ArrayList\u003c\u003e();\n           trackers.add(ArtifactManager.getInstance(myProject).getModificationTracker());\n           for (ComplexPackagingElementType\u003c?\u003e type : PackagingElementFactory.getInstance().getComplexElementTypes()) {\n             ContainerUtil.addIfNotNull(trackers, type.getAllSubstitutionsModificationTracker(myProject));\n           }\n-          return CachedValueProvider.Result.create(result, trackers.toArray(new ModificationTracker[trackers.size()]));\n+          return CachedValueProvider.Result.create(result, trackers);\n         }, false);\n     }\n     return myFile2Artifacts;\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c71d5554c051d94d9868d128be6ba4c84b8978a4": {
      "type": "Ybodychange",
      "commitMessage": "declare addIfNotNull(collection, element) to be the right one\n",
      "commitDate": "2016-08-10, 9:05 a.m.",
      "commitName": "c71d5554c051d94d9868d128be6ba4c84b8978a4",
      "commitAuthor": "peter",
      "commitDateOld": "2016-08-08, 11:08 a.m.",
      "commitNameOld": "78d1492242539eb0d5e36016f9dc1f9b55d76f94",
      "commitAuthorOld": "Anna.Kozlova",
      "daysBetweenCommits": 1.92,
      "commitsBetweenForRepo": 126,
      "commitsBetweenForFile": 1,
      "actualSource": "  public CachedValue\u003cMultiValuesMap\u003cVirtualFile, Artifact\u003e\u003e getFileToArtifactsMap() {\n    if (myFile2Artifacts \u003d\u003d null) {\n      myFile2Artifacts \u003d\n        CachedValuesManager.getManager(myProject).createCachedValue(() -\u003e {\n          MultiValuesMap\u003cVirtualFile, Artifact\u003e result \u003d computeFileToArtifactsMap();\n          List\u003cModificationTracker\u003e trackers \u003d new ArrayList\u003c\u003e();\n          trackers.add(ArtifactManager.getInstance(myProject).getModificationTracker());\n          for (ComplexPackagingElementType\u003c?\u003e type : PackagingElementFactory.getInstance().getComplexElementTypes()) {\n            ContainerUtil.addIfNotNull(trackers, type.getAllSubstitutionsModificationTracker(myProject));\n          }\n          return CachedValueProvider.Result.create(result, trackers.toArray(new ModificationTracker[trackers.size()]));\n        }, false);\n    }\n    return myFile2Artifacts;\n  }",
      "path": "java/compiler/impl/src/com/intellij/packaging/impl/artifacts/ArtifactBySourceFileFinderImpl.java",
      "functionStartLine": 53,
      "functionName": "getFileToArtifactsMap",
      "diff": "@@ -1,15 +1,15 @@\n   public CachedValue\u003cMultiValuesMap\u003cVirtualFile, Artifact\u003e\u003e getFileToArtifactsMap() {\n     if (myFile2Artifacts \u003d\u003d null) {\n       myFile2Artifacts \u003d\n         CachedValuesManager.getManager(myProject).createCachedValue(() -\u003e {\n           MultiValuesMap\u003cVirtualFile, Artifact\u003e result \u003d computeFileToArtifactsMap();\n           List\u003cModificationTracker\u003e trackers \u003d new ArrayList\u003c\u003e();\n           trackers.add(ArtifactManager.getInstance(myProject).getModificationTracker());\n           for (ComplexPackagingElementType\u003c?\u003e type : PackagingElementFactory.getInstance().getComplexElementTypes()) {\n-            ContainerUtil.addIfNotNull(type.getAllSubstitutionsModificationTracker(myProject), trackers);\n+            ContainerUtil.addIfNotNull(trackers, type.getAllSubstitutionsModificationTracker(myProject));\n           }\n           return CachedValueProvider.Result.create(result, trackers.toArray(new ModificationTracker[trackers.size()]));\n         }, false);\n     }\n     return myFile2Artifacts;\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "78d1492242539eb0d5e36016f9dc1f9b55d76f94": {
      "type": "Ybodychange",
      "commitMessage": "explicit types to diamonds\n",
      "commitDate": "2016-08-08, 11:08 a.m.",
      "commitName": "78d1492242539eb0d5e36016f9dc1f9b55d76f94",
      "commitAuthor": "Anna.Kozlova",
      "commitDateOld": "2016-06-01, 3:00 a.m.",
      "commitNameOld": "9d6477485d37e796036ee524788231f2f47e6ada",
      "commitAuthorOld": "Anna.Kozlova",
      "daysBetweenCommits": 68.34,
      "commitsBetweenForRepo": 3411,
      "commitsBetweenForFile": 1,
      "actualSource": "  public CachedValue\u003cMultiValuesMap\u003cVirtualFile, Artifact\u003e\u003e getFileToArtifactsMap() {\n    if (myFile2Artifacts \u003d\u003d null) {\n      myFile2Artifacts \u003d\n        CachedValuesManager.getManager(myProject).createCachedValue(() -\u003e {\n          MultiValuesMap\u003cVirtualFile, Artifact\u003e result \u003d computeFileToArtifactsMap();\n          List\u003cModificationTracker\u003e trackers \u003d new ArrayList\u003c\u003e();\n          trackers.add(ArtifactManager.getInstance(myProject).getModificationTracker());\n          for (ComplexPackagingElementType\u003c?\u003e type : PackagingElementFactory.getInstance().getComplexElementTypes()) {\n            ContainerUtil.addIfNotNull(type.getAllSubstitutionsModificationTracker(myProject), trackers);\n          }\n          return CachedValueProvider.Result.create(result, trackers.toArray(new ModificationTracker[trackers.size()]));\n        }, false);\n    }\n    return myFile2Artifacts;\n  }",
      "path": "java/compiler/impl/src/com/intellij/packaging/impl/artifacts/ArtifactBySourceFileFinderImpl.java",
      "functionStartLine": 53,
      "functionName": "getFileToArtifactsMap",
      "diff": "@@ -1,15 +1,15 @@\n   public CachedValue\u003cMultiValuesMap\u003cVirtualFile, Artifact\u003e\u003e getFileToArtifactsMap() {\n     if (myFile2Artifacts \u003d\u003d null) {\n       myFile2Artifacts \u003d\n         CachedValuesManager.getManager(myProject).createCachedValue(() -\u003e {\n           MultiValuesMap\u003cVirtualFile, Artifact\u003e result \u003d computeFileToArtifactsMap();\n-          List\u003cModificationTracker\u003e trackers \u003d new ArrayList\u003cModificationTracker\u003e();\n+          List\u003cModificationTracker\u003e trackers \u003d new ArrayList\u003c\u003e();\n           trackers.add(ArtifactManager.getInstance(myProject).getModificationTracker());\n           for (ComplexPackagingElementType\u003c?\u003e type : PackagingElementFactory.getInstance().getComplexElementTypes()) {\n             ContainerUtil.addIfNotNull(type.getAllSubstitutionsModificationTracker(myProject), trackers);\n           }\n           return CachedValueProvider.Result.create(result, trackers.toArray(new ModificationTracker[trackers.size()]));\n         }, false);\n     }\n     return myFile2Artifacts;\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "9d6477485d37e796036ee524788231f2f47e6ada": {
      "type": "Ybodychange",
      "commitMessage": "anonymous -\u003e lambda\n",
      "commitDate": "2016-06-01, 3:00 a.m.",
      "commitName": "9d6477485d37e796036ee524788231f2f47e6ada",
      "commitAuthor": "Anna.Kozlova",
      "commitDateOld": "2011-04-06, 12:59 a.m.",
      "commitNameOld": "f2b140e83382c60a4c52b3afe4192a1c3cef4f38",
      "commitAuthorOld": "nik",
      "daysBetweenCommits": 1883.08,
      "commitsBetweenForRepo": 98271,
      "commitsBetweenForFile": 1,
      "actualSource": "  public CachedValue\u003cMultiValuesMap\u003cVirtualFile, Artifact\u003e\u003e getFileToArtifactsMap() {\n    if (myFile2Artifacts \u003d\u003d null) {\n      myFile2Artifacts \u003d\n        CachedValuesManager.getManager(myProject).createCachedValue(() -\u003e {\n          MultiValuesMap\u003cVirtualFile, Artifact\u003e result \u003d computeFileToArtifactsMap();\n          List\u003cModificationTracker\u003e trackers \u003d new ArrayList\u003cModificationTracker\u003e();\n          trackers.add(ArtifactManager.getInstance(myProject).getModificationTracker());\n          for (ComplexPackagingElementType\u003c?\u003e type : PackagingElementFactory.getInstance().getComplexElementTypes()) {\n            ContainerUtil.addIfNotNull(type.getAllSubstitutionsModificationTracker(myProject), trackers);\n          }\n          return CachedValueProvider.Result.create(result, trackers.toArray(new ModificationTracker[trackers.size()]));\n        }, false);\n    }\n    return myFile2Artifacts;\n  }",
      "path": "java/compiler/impl/src/com/intellij/packaging/impl/artifacts/ArtifactBySourceFileFinderImpl.java",
      "functionStartLine": 53,
      "functionName": "getFileToArtifactsMap",
      "diff": "@@ -1,17 +1,15 @@\n   public CachedValue\u003cMultiValuesMap\u003cVirtualFile, Artifact\u003e\u003e getFileToArtifactsMap() {\n     if (myFile2Artifacts \u003d\u003d null) {\n       myFile2Artifacts \u003d\n-        CachedValuesManager.getManager(myProject).createCachedValue(new CachedValueProvider\u003cMultiValuesMap\u003cVirtualFile, Artifact\u003e\u003e() {\n-          public Result\u003cMultiValuesMap\u003cVirtualFile, Artifact\u003e\u003e compute() {\n-            MultiValuesMap\u003cVirtualFile, Artifact\u003e result \u003d computeFileToArtifactsMap();\n-            List\u003cModificationTracker\u003e trackers \u003d new ArrayList\u003cModificationTracker\u003e();\n-            trackers.add(ArtifactManager.getInstance(myProject).getModificationTracker());\n-            for (ComplexPackagingElementType\u003c?\u003e type : PackagingElementFactory.getInstance().getComplexElementTypes()) {\n-              ContainerUtil.addIfNotNull(type.getAllSubstitutionsModificationTracker(myProject), trackers);\n-            }\n-            return Result.create(result, trackers.toArray(new ModificationTracker[trackers.size()]));\n+        CachedValuesManager.getManager(myProject).createCachedValue(() -\u003e {\n+          MultiValuesMap\u003cVirtualFile, Artifact\u003e result \u003d computeFileToArtifactsMap();\n+          List\u003cModificationTracker\u003e trackers \u003d new ArrayList\u003cModificationTracker\u003e();\n+          trackers.add(ArtifactManager.getInstance(myProject).getModificationTracker());\n+          for (ComplexPackagingElementType\u003c?\u003e type : PackagingElementFactory.getInstance().getComplexElementTypes()) {\n+            ContainerUtil.addIfNotNull(type.getAllSubstitutionsModificationTracker(myProject), trackers);\n           }\n+          return CachedValueProvider.Result.create(result, trackers.toArray(new ModificationTracker[trackers.size()]));\n         }, false);\n     }\n     return myFile2Artifacts;\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "eda225b7af1f6452dfa6fe101167b7092a95bbbe": {
      "type": "Yintroduced",
      "commitMessage": "performane improvement: quickly find artifact by source file\n",
      "commitDate": "2009-11-18, 2:33 a.m.",
      "commitName": "eda225b7af1f6452dfa6fe101167b7092a95bbbe",
      "commitAuthor": "nik",
      "diff": "@@ -0,0 +1,17 @@\n+  public CachedValue\u003cMultiValuesMap\u003cVirtualFile, Artifact\u003e\u003e getFileToArtifactsMap() {\n+    if (myFile2Artifacts \u003d\u003d null) {\n+      myFile2Artifacts \u003d\n+        CachedValuesManager.getManager(myProject).createCachedValue(new CachedValueProvider\u003cMultiValuesMap\u003cVirtualFile, Artifact\u003e\u003e() {\n+          public Result\u003cMultiValuesMap\u003cVirtualFile, Artifact\u003e\u003e compute() {\n+            MultiValuesMap\u003cVirtualFile, Artifact\u003e result \u003d computeFileToArtifactsMap();\n+            List\u003cModificationTracker\u003e trackers \u003d new ArrayList\u003cModificationTracker\u003e();\n+            trackers.add(ArtifactManager.getInstance(myProject).getModificationTracker());\n+            for (ComplexPackagingElementType\u003c?\u003e type : PackagingElementFactory.getInstance().getComplexElementTypes()) {\n+              ContainerUtil.addIfNotNull(type.getAllSubstitutionsModificationTracker(myProject), trackers);\n+            }\n+            return Result.create(result, trackers.toArray(new ModificationTracker[trackers.size()]));\n+          }\n+        }, false);\n+    }\n+    return myFile2Artifacts;\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public CachedValue\u003cMultiValuesMap\u003cVirtualFile, Artifact\u003e\u003e getFileToArtifactsMap() {\n    if (myFile2Artifacts \u003d\u003d null) {\n      myFile2Artifacts \u003d\n        CachedValuesManager.getManager(myProject).createCachedValue(new CachedValueProvider\u003cMultiValuesMap\u003cVirtualFile, Artifact\u003e\u003e() {\n          public Result\u003cMultiValuesMap\u003cVirtualFile, Artifact\u003e\u003e compute() {\n            MultiValuesMap\u003cVirtualFile, Artifact\u003e result \u003d computeFileToArtifactsMap();\n            List\u003cModificationTracker\u003e trackers \u003d new ArrayList\u003cModificationTracker\u003e();\n            trackers.add(ArtifactManager.getInstance(myProject).getModificationTracker());\n            for (ComplexPackagingElementType\u003c?\u003e type : PackagingElementFactory.getInstance().getComplexElementTypes()) {\n              ContainerUtil.addIfNotNull(type.getAllSubstitutionsModificationTracker(myProject), trackers);\n            }\n            return Result.create(result, trackers.toArray(new ModificationTracker[trackers.size()]));\n          }\n        }, false);\n    }\n    return myFile2Artifacts;\n  }",
      "path": "java/compiler/impl/src/com/intellij/packaging/impl/artifacts/ArtifactBySourceFileFinderImpl.java",
      "functionStartLine": 47,
      "functionName": "getFileToArtifactsMap"
    }
  }
}