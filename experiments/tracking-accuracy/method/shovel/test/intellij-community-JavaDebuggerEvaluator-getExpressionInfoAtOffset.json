{
  "origin": "codeshovel",
  "repositoryName": "intellij-community",
  "repositoryPath": "H:\\Projects\\JetBrains\\intellij-community/.git",
  "startCommitName": "ecb1bb9d4d484ae63ee77f8ad45bdce154db9356",
  "sourceFileName": "JavaDebuggerEvaluator.java",
  "functionName": "getExpressionInfoAtOffset",
  "functionId": "getExpressionInfoAtOffset___project-Project(annotations-@NotNull)__document-Document(annotations-@NotNull)__offset-int__sideEffectsAllowed-boolean",
  "sourceFilePath": "java/debugger/impl/src/com/intellij/debugger/engine/JavaDebuggerEvaluator.java",
  "functionStartLine": 164,
  "functionEndLine": 182,
  "numCommitsSeen": 58,
  "timeTaken": 41946,
  "changeHistory": [
    "adc4d91f33d13281a462628dd27dbaf70c6fb9fa",
    "0f72008ee799986196217384078c8f2e55dba4f1",
    "36ee7203f65920264b1ad762c8ec542bf0790040",
    "053cdc4d345ef0e8fde3029933b82abb83eb6cda",
    "f7eddb75a89759750e2ed6d4f520dc1e52adc581",
    "ff46945822eb06b5df7e9c2cee809ca39fcaaf26",
    "c83bb6029573c0b6cdbcb1deeaaf0420bfd15701"
  ],
  "changeHistoryShort": {
    "adc4d91f33d13281a462628dd27dbaf70c6fb9fa": "Ybodychange",
    "0f72008ee799986196217384078c8f2e55dba4f1": "Ymultichange(Yrename,Yreturntypechange,Ybodychange,Yparametermetachange)",
    "36ee7203f65920264b1ad762c8ec542bf0790040": "Ybodychange",
    "053cdc4d345ef0e8fde3029933b82abb83eb6cda": "Ybodychange",
    "f7eddb75a89759750e2ed6d4f520dc1e52adc581": "Ybodychange",
    "ff46945822eb06b5df7e9c2cee809ca39fcaaf26": "Ybodychange",
    "c83bb6029573c0b6cdbcb1deeaaf0420bfd15701": "Yintroduced"
  },
  "changeHistoryDetails": {
    "adc4d91f33d13281a462628dd27dbaf70c6fb9fa": {
      "type": "Ybodychange",
      "commitMessage": "IDEA-185970 Non-java evaluation tooltips do not work\n",
      "commitDate": "2018-01-31, 12:28 p.m.",
      "commitName": "adc4d91f33d13281a462628dd27dbaf70c6fb9fa",
      "commitAuthor": "Egor Ushakov",
      "commitDateOld": "2018-01-26, 7:51 a.m.",
      "commitNameOld": "5c96491f3455ca203615b75af3651c71d36fa8ab",
      "commitAuthorOld": "Egor Ushakov",
      "daysBetweenCommits": 5.19,
      "commitsBetweenForRepo": 402,
      "commitsBetweenForFile": 1,
      "actualSource": "  public ExpressionInfo getExpressionInfoAtOffset(@NotNull Project project,\n                                                  @NotNull Document document,\n                                                  int offset,\n                                                  boolean sideEffectsAllowed) {\n    return PsiDocumentManager.getInstance(project).commitAndRunReadAction(() -\u003e {\n      try {\n        PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n        if (elementAtCursor \u003d\u003d null || !elementAtCursor.isValid()) {\n          return null;\n        }\n        Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n        if (pair !\u003d null) {\n          PsiElement element \u003d pair.getFirst();\n          return new ExpressionInfo(pair.getSecond(), null, null, element instanceof PsiExpression ? element : null);\n        }\n      } catch (IndexNotReadyException ignored) {}\n      return null;\n    });\n  }",
      "path": "java/debugger/impl/src/com/intellij/debugger/engine/JavaDebuggerEvaluator.java",
      "functionStartLine": 143,
      "functionName": "getExpressionInfoAtOffset",
      "diff": "@@ -1,18 +1,19 @@\n   public ExpressionInfo getExpressionInfoAtOffset(@NotNull Project project,\n                                                   @NotNull Document document,\n                                                   int offset,\n                                                   boolean sideEffectsAllowed) {\n     return PsiDocumentManager.getInstance(project).commitAndRunReadAction(() -\u003e {\n       try {\n         PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n         if (elementAtCursor \u003d\u003d null || !elementAtCursor.isValid()) {\n           return null;\n         }\n         Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n         if (pair !\u003d null) {\n-          return new ExpressionInfo(pair.getSecond(), null, null, pair.getFirst());\n+          PsiElement element \u003d pair.getFirst();\n+          return new ExpressionInfo(pair.getSecond(), null, null, element instanceof PsiExpression ? element : null);\n         }\n       } catch (IndexNotReadyException ignored) {}\n       return null;\n     });\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "0f72008ee799986196217384078c8f2e55dba4f1": {
      "type": "Ymultichange(Yrename,Yreturntypechange,Ybodychange,Yparametermetachange)",
      "commitMessage": "IDEA-150988 Debugger displays incorrect value tooltip for member variables if local variable with same name exists\n",
      "commitDate": "2018-01-25, 4:16 a.m.",
      "commitName": "0f72008ee799986196217384078c8f2e55dba4f1",
      "commitAuthor": "Egor Ushakov",
      "subchanges": [
        {
          "type": "Yrename",
          "commitMessage": "IDEA-150988 Debugger displays incorrect value tooltip for member variables if local variable with same name exists\n",
          "commitDate": "2018-01-25, 4:16 a.m.",
          "commitName": "0f72008ee799986196217384078c8f2e55dba4f1",
          "commitAuthor": "Egor Ushakov",
          "commitDateOld": "2017-08-22, 11:23 a.m.",
          "commitNameOld": "2349b087960ff184e92890a4db92dc7f9bb494da",
          "commitAuthorOld": "Egor.Ushakov",
          "daysBetweenCommits": 155.75,
          "commitsBetweenForRepo": 9864,
          "commitsBetweenForFile": 1,
          "actualSource": "  public ExpressionInfo getExpressionInfoAtOffset(@NotNull Project project,\n                                                  @NotNull Document document,\n                                                  int offset,\n                                                  boolean sideEffectsAllowed) {\n    return PsiDocumentManager.getInstance(project).commitAndRunReadAction(() -\u003e {\n      try {\n        PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n        if (elementAtCursor \u003d\u003d null || !elementAtCursor.isValid()) {\n          return null;\n        }\n        Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n        if (pair !\u003d null) {\n          return new ExpressionInfo(pair.getSecond(), null, null, pair.getFirst());\n        }\n      } catch (IndexNotReadyException ignored) {}\n      return null;\n    });\n  }",
          "path": "java/debugger/impl/src/com/intellij/debugger/engine/JavaDebuggerEvaluator.java",
          "functionStartLine": 143,
          "functionName": "getExpressionInfoAtOffset",
          "diff": "@@ -1,16 +1,18 @@\n-  public TextRange getExpressionRangeAtOffset(final Project project, final Document document, final int offset, final boolean sideEffectsAllowed) {\n-    final Ref\u003cTextRange\u003e currentRange \u003d Ref.create(null);\n-    PsiDocumentManager.getInstance(project).commitAndRunReadAction(() -\u003e {\n+  public ExpressionInfo getExpressionInfoAtOffset(@NotNull Project project,\n+                                                  @NotNull Document document,\n+                                                  int offset,\n+                                                  boolean sideEffectsAllowed) {\n+    return PsiDocumentManager.getInstance(project).commitAndRunReadAction(() -\u003e {\n       try {\n         PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n         if (elementAtCursor \u003d\u003d null || !elementAtCursor.isValid()) {\n-          return;\n+          return null;\n         }\n         Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n         if (pair !\u003d null) {\n-          currentRange.set(pair.getSecond());\n+          return new ExpressionInfo(pair.getSecond(), null, null, pair.getFirst());\n         }\n       } catch (IndexNotReadyException ignored) {}\n+      return null;\n     });\n-    return currentRange.get();\n   }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "getExpressionRangeAtOffset",
            "newValue": "getExpressionInfoAtOffset"
          }
        },
        {
          "type": "Yreturntypechange",
          "commitMessage": "IDEA-150988 Debugger displays incorrect value tooltip for member variables if local variable with same name exists\n",
          "commitDate": "2018-01-25, 4:16 a.m.",
          "commitName": "0f72008ee799986196217384078c8f2e55dba4f1",
          "commitAuthor": "Egor Ushakov",
          "commitDateOld": "2017-08-22, 11:23 a.m.",
          "commitNameOld": "2349b087960ff184e92890a4db92dc7f9bb494da",
          "commitAuthorOld": "Egor.Ushakov",
          "daysBetweenCommits": 155.75,
          "commitsBetweenForRepo": 9864,
          "commitsBetweenForFile": 1,
          "actualSource": "  public ExpressionInfo getExpressionInfoAtOffset(@NotNull Project project,\n                                                  @NotNull Document document,\n                                                  int offset,\n                                                  boolean sideEffectsAllowed) {\n    return PsiDocumentManager.getInstance(project).commitAndRunReadAction(() -\u003e {\n      try {\n        PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n        if (elementAtCursor \u003d\u003d null || !elementAtCursor.isValid()) {\n          return null;\n        }\n        Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n        if (pair !\u003d null) {\n          return new ExpressionInfo(pair.getSecond(), null, null, pair.getFirst());\n        }\n      } catch (IndexNotReadyException ignored) {}\n      return null;\n    });\n  }",
          "path": "java/debugger/impl/src/com/intellij/debugger/engine/JavaDebuggerEvaluator.java",
          "functionStartLine": 143,
          "functionName": "getExpressionInfoAtOffset",
          "diff": "@@ -1,16 +1,18 @@\n-  public TextRange getExpressionRangeAtOffset(final Project project, final Document document, final int offset, final boolean sideEffectsAllowed) {\n-    final Ref\u003cTextRange\u003e currentRange \u003d Ref.create(null);\n-    PsiDocumentManager.getInstance(project).commitAndRunReadAction(() -\u003e {\n+  public ExpressionInfo getExpressionInfoAtOffset(@NotNull Project project,\n+                                                  @NotNull Document document,\n+                                                  int offset,\n+                                                  boolean sideEffectsAllowed) {\n+    return PsiDocumentManager.getInstance(project).commitAndRunReadAction(() -\u003e {\n       try {\n         PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n         if (elementAtCursor \u003d\u003d null || !elementAtCursor.isValid()) {\n-          return;\n+          return null;\n         }\n         Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n         if (pair !\u003d null) {\n-          currentRange.set(pair.getSecond());\n+          return new ExpressionInfo(pair.getSecond(), null, null, pair.getFirst());\n         }\n       } catch (IndexNotReadyException ignored) {}\n+      return null;\n     });\n-    return currentRange.get();\n   }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "TextRange",
            "newValue": "ExpressionInfo"
          }
        },
        {
          "type": "Ybodychange",
          "commitMessage": "IDEA-150988 Debugger displays incorrect value tooltip for member variables if local variable with same name exists\n",
          "commitDate": "2018-01-25, 4:16 a.m.",
          "commitName": "0f72008ee799986196217384078c8f2e55dba4f1",
          "commitAuthor": "Egor Ushakov",
          "commitDateOld": "2017-08-22, 11:23 a.m.",
          "commitNameOld": "2349b087960ff184e92890a4db92dc7f9bb494da",
          "commitAuthorOld": "Egor.Ushakov",
          "daysBetweenCommits": 155.75,
          "commitsBetweenForRepo": 9864,
          "commitsBetweenForFile": 1,
          "actualSource": "  public ExpressionInfo getExpressionInfoAtOffset(@NotNull Project project,\n                                                  @NotNull Document document,\n                                                  int offset,\n                                                  boolean sideEffectsAllowed) {\n    return PsiDocumentManager.getInstance(project).commitAndRunReadAction(() -\u003e {\n      try {\n        PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n        if (elementAtCursor \u003d\u003d null || !elementAtCursor.isValid()) {\n          return null;\n        }\n        Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n        if (pair !\u003d null) {\n          return new ExpressionInfo(pair.getSecond(), null, null, pair.getFirst());\n        }\n      } catch (IndexNotReadyException ignored) {}\n      return null;\n    });\n  }",
          "path": "java/debugger/impl/src/com/intellij/debugger/engine/JavaDebuggerEvaluator.java",
          "functionStartLine": 143,
          "functionName": "getExpressionInfoAtOffset",
          "diff": "@@ -1,16 +1,18 @@\n-  public TextRange getExpressionRangeAtOffset(final Project project, final Document document, final int offset, final boolean sideEffectsAllowed) {\n-    final Ref\u003cTextRange\u003e currentRange \u003d Ref.create(null);\n-    PsiDocumentManager.getInstance(project).commitAndRunReadAction(() -\u003e {\n+  public ExpressionInfo getExpressionInfoAtOffset(@NotNull Project project,\n+                                                  @NotNull Document document,\n+                                                  int offset,\n+                                                  boolean sideEffectsAllowed) {\n+    return PsiDocumentManager.getInstance(project).commitAndRunReadAction(() -\u003e {\n       try {\n         PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n         if (elementAtCursor \u003d\u003d null || !elementAtCursor.isValid()) {\n-          return;\n+          return null;\n         }\n         Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n         if (pair !\u003d null) {\n-          currentRange.set(pair.getSecond());\n+          return new ExpressionInfo(pair.getSecond(), null, null, pair.getFirst());\n         }\n       } catch (IndexNotReadyException ignored) {}\n+      return null;\n     });\n-    return currentRange.get();\n   }\n\\ No newline at end of file\n",
          "extendedDetails": {}
        },
        {
          "type": "Yparametermetachange",
          "commitMessage": "IDEA-150988 Debugger displays incorrect value tooltip for member variables if local variable with same name exists\n",
          "commitDate": "2018-01-25, 4:16 a.m.",
          "commitName": "0f72008ee799986196217384078c8f2e55dba4f1",
          "commitAuthor": "Egor Ushakov",
          "commitDateOld": "2017-08-22, 11:23 a.m.",
          "commitNameOld": "2349b087960ff184e92890a4db92dc7f9bb494da",
          "commitAuthorOld": "Egor.Ushakov",
          "daysBetweenCommits": 155.75,
          "commitsBetweenForRepo": 9864,
          "commitsBetweenForFile": 1,
          "actualSource": "  public ExpressionInfo getExpressionInfoAtOffset(@NotNull Project project,\n                                                  @NotNull Document document,\n                                                  int offset,\n                                                  boolean sideEffectsAllowed) {\n    return PsiDocumentManager.getInstance(project).commitAndRunReadAction(() -\u003e {\n      try {\n        PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n        if (elementAtCursor \u003d\u003d null || !elementAtCursor.isValid()) {\n          return null;\n        }\n        Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n        if (pair !\u003d null) {\n          return new ExpressionInfo(pair.getSecond(), null, null, pair.getFirst());\n        }\n      } catch (IndexNotReadyException ignored) {}\n      return null;\n    });\n  }",
          "path": "java/debugger/impl/src/com/intellij/debugger/engine/JavaDebuggerEvaluator.java",
          "functionStartLine": 143,
          "functionName": "getExpressionInfoAtOffset",
          "diff": "@@ -1,16 +1,18 @@\n-  public TextRange getExpressionRangeAtOffset(final Project project, final Document document, final int offset, final boolean sideEffectsAllowed) {\n-    final Ref\u003cTextRange\u003e currentRange \u003d Ref.create(null);\n-    PsiDocumentManager.getInstance(project).commitAndRunReadAction(() -\u003e {\n+  public ExpressionInfo getExpressionInfoAtOffset(@NotNull Project project,\n+                                                  @NotNull Document document,\n+                                                  int offset,\n+                                                  boolean sideEffectsAllowed) {\n+    return PsiDocumentManager.getInstance(project).commitAndRunReadAction(() -\u003e {\n       try {\n         PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n         if (elementAtCursor \u003d\u003d null || !elementAtCursor.isValid()) {\n-          return;\n+          return null;\n         }\n         Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n         if (pair !\u003d null) {\n-          currentRange.set(pair.getSecond());\n+          return new ExpressionInfo(pair.getSecond(), null, null, pair.getFirst());\n         }\n       } catch (IndexNotReadyException ignored) {}\n+      return null;\n     });\n-    return currentRange.get();\n   }\n\\ No newline at end of file\n",
          "extendedDetails": {
            "oldValue": "[project-Project(modifiers-final), document-Document(modifiers-final), offset-int(modifiers-final), sideEffectsAllowed-boolean(modifiers-final)]",
            "newValue": "[project-Project(annotations-@NotNull), document-Document(annotations-@NotNull), offset-int, sideEffectsAllowed-boolean]"
          }
        }
      ]
    },
    "36ee7203f65920264b1ad762c8ec542bf0790040": {
      "type": "Ybodychange",
      "commitMessage": "anonym -\u003e lambda\n",
      "commitDate": "2016-05-18, 6:04 a.m.",
      "commitName": "36ee7203f65920264b1ad762c8ec542bf0790040",
      "commitAuthor": "Anna.Kozlova",
      "commitDateOld": "2016-01-19, 3:49 a.m.",
      "commitNameOld": "cb2690d073db533ab60260d7a16069b7bf092bb8",
      "commitAuthorOld": "Egor.Ushakov",
      "daysBetweenCommits": 120.05,
      "commitsBetweenForRepo": 6412,
      "commitsBetweenForFile": 1,
      "actualSource": "  public TextRange getExpressionRangeAtOffset(final Project project, final Document document, final int offset, final boolean sideEffectsAllowed) {\n    final Ref\u003cTextRange\u003e currentRange \u003d Ref.create(null);\n    PsiDocumentManager.getInstance(project).commitAndRunReadAction(() -\u003e {\n      try {\n        PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n        if (elementAtCursor \u003d\u003d null || !elementAtCursor.isValid()) {\n          return;\n        }\n        Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n        if (pair !\u003d null) {\n          currentRange.set(pair.getSecond());\n        }\n      } catch (IndexNotReadyException ignored) {}\n    });\n    return currentRange.get();\n  }",
      "path": "java/debugger/impl/src/com/intellij/debugger/engine/JavaDebuggerEvaluator.java",
      "functionStartLine": 109,
      "functionName": "getExpressionRangeAtOffset",
      "diff": "@@ -1,19 +1,16 @@\n   public TextRange getExpressionRangeAtOffset(final Project project, final Document document, final int offset, final boolean sideEffectsAllowed) {\n     final Ref\u003cTextRange\u003e currentRange \u003d Ref.create(null);\n-    PsiDocumentManager.getInstance(project).commitAndRunReadAction(new Runnable() {\n-      @Override\n-      public void run() {\n-        try {\n-          PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n-          if (elementAtCursor \u003d\u003d null || !elementAtCursor.isValid()) {\n-            return;\n-          }\n-          Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n-          if (pair !\u003d null) {\n-            currentRange.set(pair.getSecond());\n-          }\n-        } catch (IndexNotReadyException ignored) {}\n-      }\n+    PsiDocumentManager.getInstance(project).commitAndRunReadAction(() -\u003e {\n+      try {\n+        PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n+        if (elementAtCursor \u003d\u003d null || !elementAtCursor.isValid()) {\n+          return;\n+        }\n+        Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n+        if (pair !\u003d null) {\n+          currentRange.set(pair.getSecond());\n+        }\n+      } catch (IndexNotReadyException ignored) {}\n     });\n     return currentRange.get();\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "053cdc4d345ef0e8fde3029933b82abb83eb6cda": {
      "type": "Ybodychange",
      "commitMessage": "EA-68957 - PIEAE: PsiUtilCore.ensureValid\n",
      "commitDate": "2015-10-27, 4:39 a.m.",
      "commitName": "053cdc4d345ef0e8fde3029933b82abb83eb6cda",
      "commitAuthor": "Egor.Ushakov",
      "commitDateOld": "2015-02-19, 12:44 p.m.",
      "commitNameOld": "f7eddb75a89759750e2ed6d4f520dc1e52adc581",
      "commitAuthorOld": "Egor.Ushakov",
      "daysBetweenCommits": 249.62,
      "commitsBetweenForRepo": 12877,
      "commitsBetweenForFile": 1,
      "actualSource": "  public TextRange getExpressionRangeAtOffset(final Project project, final Document document, final int offset, final boolean sideEffectsAllowed) {\n    final Ref\u003cTextRange\u003e currentRange \u003d Ref.create(null);\n    PsiDocumentManager.getInstance(project).commitAndRunReadAction(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n          if (elementAtCursor \u003d\u003d null || !elementAtCursor.isValid()) {\n            return;\n          }\n          Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n          if (pair !\u003d null) {\n            currentRange.set(pair.getSecond());\n          }\n        } catch (IndexNotReadyException ignored) {}\n      }\n    });\n    return currentRange.get();\n  }",
      "path": "java/debugger/impl/src/com/intellij/debugger/engine/JavaDebuggerEvaluator.java",
      "functionStartLine": 103,
      "functionName": "getExpressionRangeAtOffset",
      "diff": "@@ -1,19 +1,19 @@\n   public TextRange getExpressionRangeAtOffset(final Project project, final Document document, final int offset, final boolean sideEffectsAllowed) {\n     final Ref\u003cTextRange\u003e currentRange \u003d Ref.create(null);\n     PsiDocumentManager.getInstance(project).commitAndRunReadAction(new Runnable() {\n       @Override\n       public void run() {\n         try {\n           PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n-          if (elementAtCursor \u003d\u003d null) {\n+          if (elementAtCursor \u003d\u003d null || !elementAtCursor.isValid()) {\n             return;\n           }\n           Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n           if (pair !\u003d null) {\n             currentRange.set(pair.getSecond());\n           }\n         } catch (IndexNotReadyException ignored) {}\n       }\n     });\n     return currentRange.get();\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "f7eddb75a89759750e2ed6d4f520dc1e52adc581": {
      "type": "Ybodychange",
      "commitMessage": "prevent IndexNotReadyException in quick evaluate\n",
      "commitDate": "2015-02-19, 12:44 p.m.",
      "commitName": "f7eddb75a89759750e2ed6d4f520dc1e52adc581",
      "commitAuthor": "Egor.Ushakov",
      "commitDateOld": "2015-02-04, 10:37 a.m.",
      "commitNameOld": "ff46945822eb06b5df7e9c2cee809ca39fcaaf26",
      "commitAuthorOld": "Egor.Ushakov",
      "daysBetweenCommits": 15.09,
      "commitsBetweenForRepo": 954,
      "commitsBetweenForFile": 1,
      "actualSource": "  public TextRange getExpressionRangeAtOffset(final Project project, final Document document, final int offset, final boolean sideEffectsAllowed) {\n    final Ref\u003cTextRange\u003e currentRange \u003d Ref.create(null);\n    PsiDocumentManager.getInstance(project).commitAndRunReadAction(new Runnable() {\n      @Override\n      public void run() {\n        try {\n          PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n          if (elementAtCursor \u003d\u003d null) {\n            return;\n          }\n          Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n          if (pair !\u003d null) {\n            currentRange.set(pair.getSecond());\n          }\n        } catch (IndexNotReadyException ignored) {}\n      }\n    });\n    return currentRange.get();\n  }",
      "path": "java/debugger/impl/src/com/intellij/debugger/engine/JavaDebuggerEvaluator.java",
      "functionStartLine": 103,
      "functionName": "getExpressionRangeAtOffset",
      "diff": "@@ -1,17 +1,19 @@\n   public TextRange getExpressionRangeAtOffset(final Project project, final Document document, final int offset, final boolean sideEffectsAllowed) {\n     final Ref\u003cTextRange\u003e currentRange \u003d Ref.create(null);\n     PsiDocumentManager.getInstance(project).commitAndRunReadAction(new Runnable() {\n       @Override\n       public void run() {\n-        PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n-        if (elementAtCursor \u003d\u003d null) {\n-          return;\n-        }\n-        Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n-        if (pair !\u003d null) {\n-          currentRange.set(pair.getSecond());\n-        }\n+        try {\n+          PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n+          if (elementAtCursor \u003d\u003d null) {\n+            return;\n+          }\n+          Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n+          if (pair !\u003d null) {\n+            currentRange.set(pair.getSecond());\n+          }\n+        } catch (IndexNotReadyException ignored) {}\n       }\n     });\n     return currentRange.get();\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "ff46945822eb06b5df7e9c2cee809ca39fcaaf26": {
      "type": "Ybodychange",
      "commitMessage": "enabled quick evaluate and smart step into while debugging decompiled code\n",
      "commitDate": "2015-02-04, 10:37 a.m.",
      "commitName": "ff46945822eb06b5df7e9c2cee809ca39fcaaf26",
      "commitAuthor": "Egor.Ushakov",
      "commitDateOld": "2014-10-17, 9:31 a.m.",
      "commitNameOld": "10f213ef8cf9974a0cc45b36e950cbc010f5e886",
      "commitAuthorOld": "Egor.Ushakov",
      "daysBetweenCommits": 110.09,
      "commitsBetweenForRepo": 5942,
      "commitsBetweenForFile": 1,
      "actualSource": "  public TextRange getExpressionRangeAtOffset(final Project project, final Document document, final int offset, final boolean sideEffectsAllowed) {\n    final Ref\u003cTextRange\u003e currentRange \u003d Ref.create(null);\n    PsiDocumentManager.getInstance(project).commitAndRunReadAction(new Runnable() {\n      @Override\n      public void run() {\n        PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n        if (elementAtCursor \u003d\u003d null) {\n          return;\n        }\n        Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n        if (pair !\u003d null) {\n          currentRange.set(pair.getSecond());\n        }\n      }\n    });\n    return currentRange.get();\n  }",
      "path": "java/debugger/impl/src/com/intellij/debugger/engine/JavaDebuggerEvaluator.java",
      "functionStartLine": 102,
      "functionName": "getExpressionRangeAtOffset",
      "diff": "@@ -1,21 +1,17 @@\n   public TextRange getExpressionRangeAtOffset(final Project project, final Document document, final int offset, final boolean sideEffectsAllowed) {\n     final Ref\u003cTextRange\u003e currentRange \u003d Ref.create(null);\n     PsiDocumentManager.getInstance(project).commitAndRunReadAction(new Runnable() {\n       @Override\n       public void run() {\n-        PsiFile psiFile \u003d PsiDocumentManager.getInstance(project).getPsiFile(document);\n-        if (psiFile \u003d\u003d null) {\n-          return;\n-        }\n-        PsiElement elementAtCursor \u003d psiFile.findElementAt(offset);\n+        PsiElement elementAtCursor \u003d DebuggerUtilsEx.findElementAt(PsiDocumentManager.getInstance(project).getPsiFile(document), offset);\n         if (elementAtCursor \u003d\u003d null) {\n           return;\n         }\n         Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n         if (pair !\u003d null) {\n           currentRange.set(pair.getSecond());\n         }\n       }\n     });\n     return currentRange.get();\n   }\n\\ No newline at end of file\n",
      "extendedDetails": {}
    },
    "c83bb6029573c0b6cdbcb1deeaaf0420bfd15701": {
      "type": "Yintroduced",
      "commitMessage": "java-xdebugger: tooltip evaluation support\n",
      "commitDate": "2014-05-15, 9:24 a.m.",
      "commitName": "c83bb6029573c0b6cdbcb1deeaaf0420bfd15701",
      "commitAuthor": "Egor.Ushakov",
      "diff": "@@ -0,0 +1,21 @@\n+  public TextRange getExpressionRangeAtOffset(final Project project, final Document document, final int offset, final boolean sideEffectsAllowed) {\n+    final Ref\u003cTextRange\u003e currentRange \u003d Ref.create(null);\n+    PsiDocumentManager.getInstance(project).commitAndRunReadAction(new Runnable() {\n+      @Override\n+      public void run() {\n+        PsiFile psiFile \u003d PsiDocumentManager.getInstance(project).getPsiFile(document);\n+        if (psiFile \u003d\u003d null) {\n+          return;\n+        }\n+        PsiElement elementAtCursor \u003d psiFile.findElementAt(offset);\n+        if (elementAtCursor \u003d\u003d null) {\n+          return;\n+        }\n+        Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n+        if (pair !\u003d null) {\n+          currentRange.set(pair.getSecond());\n+        }\n+      }\n+    });\n+    return currentRange.get();\n+  }\n\\ No newline at end of file\n",
      "actualSource": "  public TextRange getExpressionRangeAtOffset(final Project project, final Document document, final int offset, final boolean sideEffectsAllowed) {\n    final Ref\u003cTextRange\u003e currentRange \u003d Ref.create(null);\n    PsiDocumentManager.getInstance(project).commitAndRunReadAction(new Runnable() {\n      @Override\n      public void run() {\n        PsiFile psiFile \u003d PsiDocumentManager.getInstance(project).getPsiFile(document);\n        if (psiFile \u003d\u003d null) {\n          return;\n        }\n        PsiElement elementAtCursor \u003d psiFile.findElementAt(offset);\n        if (elementAtCursor \u003d\u003d null) {\n          return;\n        }\n        Pair\u003cPsiElement, TextRange\u003e pair \u003d findExpression(elementAtCursor, sideEffectsAllowed);\n        if (pair !\u003d null) {\n          currentRange.set(pair.getSecond());\n        }\n      }\n    });\n    return currentRange.get();\n  }",
      "path": "java/debugger/impl/src/com/intellij/debugger/engine/JavaDebuggerEvaluator.java",
      "functionStartLine": 78,
      "functionName": "getExpressionRangeAtOffset"
    }
  }
}